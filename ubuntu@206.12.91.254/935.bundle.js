"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[935],{53935:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ views_EditPage; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__(29439);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\nvar taggedTemplateLiteral = __webpack_require__(30168);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./src/components/SideBar/Sidebar.jsx + 23 modules\nvar Sidebar = __webpack_require__(30450);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(87462);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(15861);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(71002);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__(93433);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(15671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(43144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(97326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(60136);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(82963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(61120);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(4942);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(64687);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n// EXTERNAL MODULE: ./node_modules/js-file-download/file-download.js\nvar file_download = __webpack_require__(35823);\nvar file_download_default = /*#__PURE__*/__webpack_require__.n(file_download);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar node_modules_axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(node_modules_axios);\n// EXTERNAL MODULE: ./src/components/Level/Level.jsx + 4 modules\nvar Level = __webpack_require__(72005);\n// EXTERNAL MODULE: ./node_modules/react-dom/index.js\nvar react_dom = __webpack_require__(73935);\n;// CONCATENATED MODULE: ./src/components/Stage/Shapes/Portal.jsx\n\n\n\n\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n// adapted from https://github.com/tajo/react-portal/blob/55ed77ab823b03d1d4c45b950ba26ea5d687e85c/src/LegacyPortal.js\n\n\nvar Portal = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.Z)(Portal, _React$Component);\n  var _super = _createSuper(Portal);\n  function Portal() {\n    (0,classCallCheck/* default */.Z)(this, Portal);\n    return _super.apply(this, arguments);\n  }\n  (0,createClass/* default */.Z)(Portal, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      this.renderPortal();\n    }\n  }, {\n    key: "componentDidUpdate",\n    value: function componentDidUpdate(props) {\n      this.renderPortal();\n    }\n  }, {\n    key: "componentWillUnmount",\n    value: function componentWillUnmount() {\n      react_dom.unmountComponentAtNode(this.defaultNode || this.props.node);\n      if (this.defaultNode) {\n        document.body.removeChild(this.defaultNode);\n      }\n      this.defaultNode = null;\n    }\n  }, {\n    key: "renderPortal",\n    value: function renderPortal(props) {\n      if (!this.props.node && !this.defaultNode) {\n        this.defaultNode = document.createElement("div");\n        document.body.appendChild(this.defaultNode);\n      }\n      var children = this.props.children;\n      if (typeof children.type === "function") {\n        children = /*#__PURE__*/react.cloneElement(children);\n      }\n      react_dom.render(children, this.props.node || this.defaultNode);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      return null;\n    }\n  }]);\n  return Portal;\n}(react.Component);\n\n// EXTERNAL MODULE: ./node_modules/react-color/es/index.js + 206 modules\nvar es = __webpack_require__(97495);\n// EXTERNAL MODULE: ./node_modules/react-draggable/build/cjs/cjs.js\nvar cjs = __webpack_require__(61193);\nvar cjs_default = /*#__PURE__*/__webpack_require__.n(cjs);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(93379);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7795);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(90569);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(3565);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(19216);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(44589);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/DrawModal/DrawModal.css\nvar DrawModal = __webpack_require__(34149);\n;// CONCATENATED MODULE: ./src/components/DrawModal/DrawModal.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, "head");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(DrawModal/* default */.Z, options);\n\n\n\n\n       /* harmony default export */ var DrawModal_DrawModal = (DrawModal/* default */.Z && DrawModal/* default */.Z.locals ? DrawModal/* default */.Z.locals : undefined);\n\n// EXTERNAL MODULE: ./public/icons/close.svg\nvar icons_close = __webpack_require__(48451);\n;// CONCATENATED MODULE: ./src/components/DrawModal/DrawModal.jsx\n\n\n\n\n\n\nvar DrawModal_DrawModal_DrawModal = function DrawModal(props) {\n  var _useState = (0,react.useState)("#000"),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    color = _useState2[0],\n    setColor = _useState2[1];\n  var _useState3 = (0,react.useState)(0),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    width = _useState4[0],\n    setWidth = _useState4[1];\n  var _useState5 = (0,react.useState)(0),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    height = _useState6[0],\n    setHeight = _useState6[1];\n  var _useState7 = (0,react.useState)(0),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    sidebarW = _useState8[0],\n    setSidebarW = _useState8[1];\n  var _useState9 = (0,react.useState)(0),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    topbarH = _useState10[0],\n    setTopbarH = _useState10[1];\n  var _useState11 = (0,react.useState)(5),\n    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n    strokeW = _useState12[0],\n    _setStrokeW = _useState12[1];\n  var _useState13 = (0,react.useState)("pen"),\n    _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n    tool = _useState14[0],\n    setTool = _useState14[1];\n  var ref = (0,react.useRef)();\n  var scaleRef = (0,react.useRef)(props.scale);\n  (0,react.useEffect)(function () {\n    scaleRef.current = props.scale;\n  }, [props.scale]);\n  var drawCursor = function drawCursor(e) {\n    var cursor = document.getElementById("cursor");\n    cursor.style.height = strokeWRef.current * scaleRef.current + "px";\n    cursor.style.width = strokeWRef.current * scaleRef.current + "px";\n    cursor.style.left = e.clientX + "px";\n    cursor.style.top = e.clientY + "px";\n  };\n  var strokeWRef = (0,react.useRef)(strokeW);\n  var setStrokeW = function setStrokeW(data) {\n    strokeWRef.current = data;\n    _setStrokeW(data);\n  };\n  (0,react.useEffect)(function () {\n    setWidth(ref.current.clientWidth);\n    setHeight(ref.current.clientHeight);\n    var mainContainer = document.getElementById("editMainContainer");\n    mainContainer.classList.add("noCursor");\n    document.body.addEventListener("mousemove", drawCursor);\n    return function () {\n      mainContainer.classList.remove("noCursor");\n      document.body.removeEventListener("mousemove", drawCursor);\n    };\n  }, []);\n  (0,react.useEffect)(function () {\n    setSidebarW(window.matchMedia("(orientation: portrait)").matches ? 0 : 70);\n    setTopbarH(window.matchMedia("(orientation: portrait)").matches ? 120 : 50);\n  }, [window.matchMedia("(orientation: portrait)").matches]);\n  return /*#__PURE__*/react.createElement((cjs_default()), {\n    handle: ".drawModalDragBar",\n    defaultPosition: {\n      x: props.xPos,\n      y: props.yPos\n    },\n    bounds: {\n      left: 0,\n      top: 0,\n      right: window.innerWidth - width - sidebarW,\n      bottom: window.innerHeight - height - topbarH\n    }\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "drawModalContainer",\n    ref: ref\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "drawModalDragBar"\n  }, /*#__PURE__*/react.createElement("button", {\n    className: "drawModalExitButton",\n    onClick: function onClick() {\n      return props.setDrawMode(false);\n    }\n  }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_close/* default */.Z, {\n    className: "icon"\n  })))), /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n    color: color,\n    disableAlpha: true,\n    onChange: function onChange(color) {\n      setColor(color.hex);\n      props.chooseColor(color);\n    },\n    styles: {\n      "default": {\n        picker: {\n          boxShadow: "none"\n        }\n      }\n    }\n  }), /*#__PURE__*/react.createElement("div", {\n    className: "drawModalBottomControls"\n  }, /*#__PURE__*/react.createElement("h4", null, "Stroke Size: ".concat(strokeW)), /*#__PURE__*/react.createElement("input", {\n    type: "range",\n    min: "5",\n    max: "100",\n    value: strokeW,\n    className: "drawModalStrokeSlider",\n    onChange: function onChange(e) {\n      props.setDrawStrokeWidth(e.target.value);\n      setStrokeW(e.target.value);\n    }\n  }), /*#__PURE__*/react.createElement("h4", null, "Tool:"), /*#__PURE__*/react.createElement("label", {\n    onClick: function onClick() {\n      props.setDrawTool("pen");\n      setTool("pen");\n    }\n  }, "Pen"), /*#__PURE__*/react.createElement("input", {\n    type: "radio",\n    name: "drawModalTool",\n    value: "pen",\n    checked: tool === "pen",\n    onChange: function onChange() {\n      props.setDrawTool("pen");\n      setTool("pen");\n    }\n  }), /*#__PURE__*/react.createElement("label", {\n    style: {\n      paddingLeft: "5px"\n    },\n    onClick: function onClick() {\n      props.setDrawTool("eraser");\n      setTool("eraser");\n    }\n  }, "Eraser"), /*#__PURE__*/react.createElement("input", {\n    type: "radio",\n    name: "drawModalTool",\n    value: "eraser",\n    checked: tool === "eraser",\n    onChange: function onChange() {\n      props.setDrawTool("eraser");\n      setTool("eraser");\n    }\n  }))));\n};\n/* harmony default export */ var components_DrawModal_DrawModal = (DrawModal_DrawModal_DrawModal);\n// EXTERNAL MODULE: ./src/components/Stage/Overlay.jsx\nvar Overlay = __webpack_require__(99107);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/withTranslation.js\nvar withTranslation = __webpack_require__(91768);\n// EXTERNAL MODULE: ./node_modules/cloudinary-react/dist/cloudinary-react.esm.js\nvar cloudinary_react_esm = __webpack_require__(42736);\n// EXTERNAL MODULE: ./node_modules/uuid/dist/esm-browser/v4.js + 2 modules\nvar v4 = __webpack_require__(50681);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/Tooltip/Tooltip.css\nvar Tooltip = __webpack_require__(13788);\n;// CONCATENATED MODULE: ./src/components/Tooltip/Tooltip.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar Tooltip_options = {};\n\nTooltip_options.styleTagTransform = (styleTagTransform_default());\nTooltip_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      Tooltip_options.insert = insertBySelector_default().bind(null, "head");\n    \nTooltip_options.domAPI = (styleDomAPI_default());\nTooltip_options.insertStyleElement = (insertStyleElement_default());\n\nvar Tooltip_update = injectStylesIntoStyleTag_default()(Tooltip/* default */.Z, Tooltip_options);\n\n\n\n\n       /* harmony default export */ var Tooltip_Tooltip = (Tooltip/* default */.Z && Tooltip/* default */.Z.locals ? Tooltip/* default */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/Tooltip/Tooltip.jsx\n\n\nvar Tooltip_Tooltip_Tooltip = function Tooltip(_ref) {\n  var children = _ref.children,\n    tooltipText = _ref.tooltipText,\n    direction = _ref.direction;\n  return /*#__PURE__*/react.createElement("div", {\n    className: "tooltip-container"\n  }, children, /*#__PURE__*/react.createElement("span", {\n    className: "tooltip-text " + direction\n  }, tooltipText));\n};\n// EXTERNAL MODULE: ./src/components/Dropdown/DropdownRoles.jsx + 3 modules\nvar DropdownRoles = __webpack_require__(14497);\n// EXTERNAL MODULE: ./node_modules/react-transition-group/esm/CSSTransition.js + 7 modules\nvar CSSTransition = __webpack_require__(86759);\n// EXTERNAL MODULE: ./src/components/Dropdown/DropdownItem.jsx\nvar DropdownItem = __webpack_require__(355);\n// EXTERNAL MODULE: ./src/components/Alerts/AlertContext.jsx\nvar AlertContext = __webpack_require__(31582);\n// EXTERNAL MODULE: ./src/components/Loading/Loading.jsx + 1 modules\nvar Loading = __webpack_require__(42861);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/useTranslation.js\nvar useTranslation = __webpack_require__(26793);\n// EXTERNAL MODULE: ./src/components/Dropdown/Dropdown.css\nvar Dropdown = __webpack_require__(23955);\n// EXTERNAL MODULE: ./public/icons/star.svg\nvar star = __webpack_require__(19681);\n;// CONCATENATED MODULE: ./public/icons/image.svg\nvar _path, _path2;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nvar SvgImage = function SvgImage(props) {\n  return /*#__PURE__*/react.createElement("svg", _extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    viewBox: "0 0 24 24",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, props), _path || (_path = /*#__PURE__*/react.createElement("path", {\n    d: "M19 7.5a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0Z"\n  })), _path2 || (_path2 = /*#__PURE__*/react.createElement("path", {\n    d: "M1.25 5A3.75 3.75 0 0 1 5 1.25h14A3.75 3.75 0 0 1 22.75 5v14A3.75 3.75 0 0 1 19 22.75H5A3.75 3.75 0 0 1 1.25 19V5ZM5 2.75A2.25 2.25 0 0 0 2.75 5v9.75l4.231-4.231a2 2 0 0 1 2.926.104l4.397 5.073 1.282-1.282a2 2 0 0 1 2.828 0l2.836 2.836V5A2.25 2.25 0 0 0 19 2.75H5Z"\n  })));\n};\n/* harmony default export */ var icons_image = (SvgImage);\n// EXTERNAL MODULE: ./public/icons/pointer-top.svg\nvar pointer_top = __webpack_require__(31102);\n// EXTERNAL MODULE: ./public/icons/help.svg\nvar help = __webpack_require__(44453);\n;// CONCATENATED MODULE: ./public/icons/game.svg\nvar game_path, game_path2;\nfunction game_extends() { game_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return game_extends.apply(this, arguments); }\n\nvar SvgGame = function SvgGame(props) {\n  return /*#__PURE__*/react.createElement("svg", game_extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    viewBox: "0 0 64 64",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, props), game_path || (game_path = /*#__PURE__*/react.createElement("path", {\n    d: "M23.3 25.9h-2.2v-2.1c0-1.2-1-2.3-2.3-2.3-1.3 0-2.3 1-2.3 2.3v2.1h-2.2c-1.2 0-2.3 1-2.3 2.3 0 1.3 1 2.3 2.3 2.3h2.2v2.1c0 1.2 1 2.3 2.3 2.3 1.3 0 2.3-1 2.3-2.3v-2.1h2.2c1.2 0 2.3-1 2.3-2.3 0-1.3-1.1-2.3-2.3-2.3ZM42.899 25c.1.1.1.3.2.4.1.1.2.2.3.4l.3.3c.1.1.3.1.4.2.1.1.3.1.4.1.2 0 .3.1.4.1.6 0 1.2-.2 1.6-.7.1-.1.2-.2.3-.4.1-.1.1-.3.2-.4 0-.1.1-.3.1-.4v-.4c0-.6-.2-1.2-.7-1.6-.5-.5-1.3-.8-2-.6-.1 0-.3.1-.4.1-.1 0-.3.1-.4.2l-.3.3c-.1.1-.2.2-.3.4 0 0 0 .1-.1.3 0 .1-.1.3-.1.4v.8c0 .2.1.3.1.5ZM42.9 28.5v-.4c0-.2-.1-.3-.1-.4-.1-.1-.1-.3-.2-.4l-.3-.3c-.5-.5-1.3-.8-2-.6-.2 0-.3.1-.4.1-.1.1-.3.1-.4.2l-.3.3-.3.3c-.1.1-.2.3-.2.4-.1.1-.1.3-.1.4v.8c0 .1.1.3.1.4.1.1.1.3.2.4l.3.3.3.3c.1.1.3.2.4.2.1.1.3.1.4.1.1 0 .3.1.4.1.6 0 1.2-.2 1.6-.7l.3-.3c.1-.1.2-.3.2-.4.1-.1.1-.3.1-.4-.1-.1 0-.3 0-.4ZM47.099 32.4c-.1-.1-.1-.3-.2-.4l-.3-.3c-.8-.8-2.3-.8-3.2 0l-.3.3c-.1.1-.2.3-.2.4 0 .1-.1.3-.1.4v.8c0 .1.1.3.1.4.1.1.1.3.2.4l.3.3.3.3c.1.1.3.1.4.2.1.1.3.1.4.1h.8c.2 0 .3-.1.4-.1.1 0 .3-.1.4-.2l.3-.3.3-.3c.1-.1.1-.3.2-.4.1-.1.1-.3.1-.4v-.8c.2-.1.1-.3.1-.4ZM47.7 26.899c-.4.4-.7 1-.7 1.6 0 .6.2 1.2.7 1.6.5.4 1 .7 1.6.7.6 0 1.2-.2 1.6-.7.4-.5.7-1 .7-1.6 0-.6-.2-1.2-.7-1.6-.8-.8-2.3-.8-3.2 0Z"\n  })), game_path2 || (game_path2 = /*#__PURE__*/react.createElement("path", {\n    d: "m62.5 38-3.7-14.8c-1.6-6.2-7.1-10.6-13.5-10.6H18.8c-6.4 0-12 4.3-13.5 10.6L1.5 38c-.8 3.2-.1 6.6 1.9 9.2 2 2.6 5.1 4.1 8.5 4.1 4.3 0 8.2-2.6 9.9-6.5l1.1-2.5h18.3l1.1 2.5c1.7 4 5.6 6.5 9.9 6.5 3.3 0 6.4-1.5 8.5-4.1 1.9-2.6 2.6-6 1.8-9.2ZM57 44.4c-1.2 1.5-3 2.4-4.9 2.4-2.5 0-4.8-1.5-5.7-3.8l-1.6-3.8c-.4-.8-1.2-1.4-2.1-1.4H21.4c-.9 0-1.7.5-2.1 1.4L17.7 43c-1 2.3-3.2 3.8-5.7 3.8-2 0-3.8-.8-5-2.4-1.2-1.5-1.6-3.5-1.1-5.3l3.7-14.8c1.1-4.2 4.8-7.2 9.2-7.2h26.4c4.3 0 8.1 2.9 9.2 7.2l3.7 14.8c.5 1.9.1 3.8-1.1 5.3Z"\n  })));\n};\n/* harmony default export */ var game = (SvgGame);\n// EXTERNAL MODULE: ./public/icons/text.svg\nvar icons_text = __webpack_require__(69327);\n;// CONCATENATED MODULE: ./public/icons/text-alt.svg\nvar text_alt_path;\nfunction text_alt_extends() { text_alt_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return text_alt_extends.apply(this, arguments); }\n\nvar SvgTextAlt = function SvgTextAlt(props) {\n  return /*#__PURE__*/react.createElement("svg", text_alt_extends({\n    fill: "#fff",\n    width: 52,\n    height: 52,\n    viewBox: "0 0 24 24",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, props), text_alt_path || (text_alt_path = /*#__PURE__*/react.createElement("path", {\n    d: "M1.25 3c0-.966.784-1.75 1.75-1.75h18c.966 0 1.75.784 1.75 1.75v4.795a.75.75 0 0 1-1.5 0V3a.25.25 0 0 0-.25-.25h-6.25v18.5H16a.75.75 0 0 1 0 1.5H8a.75.75 0 0 1 0-1.5h1.25V2.75H3a.25.25 0 0 0-.25.25v4.795a.75.75 0 1 1-1.5 0V3Zm9.5-.25v18.5h2.5V2.75h-2.5Z"\n  })));\n};\n/* harmony default export */ var text_alt = (SvgTextAlt);\n// EXTERNAL MODULE: ./public/icons/stop.svg\nvar stop = __webpack_require__(598);\n// EXTERNAL MODULE: ./public/icons/circle.svg\nvar circle = __webpack_require__(85786);\n// EXTERNAL MODULE: ./public/icons/triangle-9.svg\nvar triangle_9 = __webpack_require__(82724);\n;// CONCATENATED MODULE: ./public/icons/vector-alt.svg\nvar vector_alt_path;\nfunction vector_alt_extends() { vector_alt_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return vector_alt_extends.apply(this, arguments); }\n\nvar SvgVectorAlt = function SvgVectorAlt(props) {\n  return /*#__PURE__*/react.createElement("svg", vector_alt_extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), vector_alt_path || (vector_alt_path = /*#__PURE__*/react.createElement("path", {\n    d: "M57.9 48.4c-.2-2.9-1.1-8.8-5.4-13.4-3.3-3.5-7.9-5.4-13.6-5.7v-1.1c0-1.8-1.5-3.2-3.2-3.2h-7.5c-1.8 0-3.2 1.5-3.2 3.2v1.4c-4.2-.4-7.5-1.8-9.8-4.2-3-3.1-3.9-7.3-4.1-9.8 2.6-.5 4.7-2.8 4.7-5.6V7.5c0-3.2-2.6-5.7-5.7-5.7H7.5c-3.2 0-5.7 2.6-5.7 5.7V10c0 2.9 2.1 5.2 4.8 5.7.3 3 1.3 8.5 5.3 12.8 3.2 3.4 7.6 5.3 13.1 5.7v1.6c0 1.8 1.5 3.2 3.2 3.2h7.5c1.8 0 3.2-1.5 3.2-3.2v-1.9c4.4.3 7.8 1.7 10.3 4.3 3.2 3.3 4 7.8 4.1 10.2-2.9.3-5.2 2.7-5.2 5.7v2.5c0 3.2 2.6 5.7 5.7 5.7h2.5c3.2 0 5.7-2.6 5.7-5.7V54c.2-2.7-1.6-4.9-4.1-5.6zM6.2 7.5c0-.7.6-1.2 1.2-1.2H10c.7 0 1.2.6 1.2 1.2V10c0 .7-.6 1.2-1.2 1.2H7.5c-.7 0-1.2-.6-1.2-1.2V7.5zm28.3 27h-5v-5h5v5zm23.3 22c0 .7-.6 1.2-1.2 1.2H54c-.7 0-1.2-.6-1.2-1.2V54c0-.7.6-1.2 1.2-1.2h2.5c.7 0 1.2.6 1.2 1.2v2.5z"\n  })));\n};\n/* harmony default export */ var vector_alt = (SvgVectorAlt);\n;// CONCATENATED MODULE: ./public/icons/paint-roller-alt-2.svg\nvar paint_roller_alt_2_path;\nfunction paint_roller_alt_2_extends() { paint_roller_alt_2_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return paint_roller_alt_2_extends.apply(this, arguments); }\n\nvar SvgPaintRollerAlt2 = function SvgPaintRollerAlt2(props) {\n  return /*#__PURE__*/React.createElement("svg", paint_roller_alt_2_extends({\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), paint_roller_alt_2_path || (paint_roller_alt_2_path = /*#__PURE__*/React.createElement("path", {\n    d: "M57 14.4h-3.5v-7c0-2.2-1.8-4-4-4h-36c-2.2 0-4 1.8-4 4v6.5H4.2v-3.2c0-.6-.4-1-1-1s-1 .4-1 1v8.2c0 .6.4 1 1 1s1-.4 1-1v-3h5.2v6.5c0 2.2 1.8 4 4 4h36c2.2 0 4-1.8 4-4v-6H57c1.7 0 3 1.4 3 3V29c0 1.3-.8 2.4-1.9 2.8L29.9 42.9H29c-2.3 0-4.3 1.9-4.3 4.3v9.2c0 2.3 1.9 4.3 4.3 4.3h2.3c2.3 0 4.3-1.9 4.3-4.3v-9.2c0-1.5-.8-2.8-1.9-3.5l25.2-9.9c1.9-.8 3.2-2.6 3.2-4.7v-9.5c-.1-2.9-2.4-5.2-5.1-5.2zm-5.5 8c0 1.1-.9 2-2 2h-36c-1.1 0-2-.9-2-2v-15c0-1.1.9-2 2-2h36c1.1 0 2 .9 2 2v15zm-18 34c0 1.2-1 2.3-2.3 2.3h-2.3c-1.2 0-2.3-1-2.3-2.3v-9.2c0-1.2 1-2.3 2.3-2.3h2.3c1.2 0 2.3 1 2.3 2.3v9.2z"\n  })));\n};\n/* harmony default export */ var paint_roller_alt_2 = ((/* unused pure expression or super */ null && (SvgPaintRollerAlt2)));\n;// CONCATENATED MODULE: ./public/icons/video-camera-alt-2.svg\nvar video_camera_alt_2_path, video_camera_alt_2_path2;\nfunction video_camera_alt_2_extends() { video_camera_alt_2_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return video_camera_alt_2_extends.apply(this, arguments); }\n\nvar SvgVideoCameraAlt2 = function SvgVideoCameraAlt2(props) {\n  return /*#__PURE__*/react.createElement("svg", video_camera_alt_2_extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), video_camera_alt_2_path || (video_camera_alt_2_path = /*#__PURE__*/react.createElement("path", {\n    d: "M54 1.8H10c-4.5 0-8.3 3.7-8.3 8.3v44c0 4.5 3.7 8.3 8.3 8.3h44c4.5 0 8.3-3.7 8.3-8.3V10c0-4.5-3.8-8.2-8.3-8.2zm-38.5 28H6.3V20h9.3v9.8zm-9.2 4.5h9.3V44H6.3v-9.7zM20 6.3h24v51.5H20V6.3zm37.8 23.5h-9.3V20h9.3v9.8zm-9.3 4.5h9.3V44h-9.3v-9.7zM57.8 10v5.5h-9.3V6.3H54c2.1 0 3.8 1.6 3.8 3.7zM10 6.3h5.5v9.3H6.3V10c0-2.1 1.6-3.7 3.7-3.7zM6.3 54v-5.5h9.3v9.3H10c-2.1 0-3.7-1.7-3.7-3.8zM54 57.8h-5.5v-9.3h9.3V54c0 2.1-1.7 3.8-3.8 3.8z"\n  })), video_camera_alt_2_path2 || (video_camera_alt_2_path2 = /*#__PURE__*/react.createElement("path", {\n    d: "m39.8 28.9-9.2-5.6c-1.1-.7-2.5-.7-3.6-.1s-1.8 1.8-1.8 3.1v11.1c0 1.3.7 2.5 1.8 3.1.5.3 1.2.5 1.8.5.7 0 1.3-.2 1.9-.5l9.2-5.6c1.1-.7 1.7-1.8 1.7-3.1s-.7-2.2-1.8-2.9zM29.7 36v-8l6.6 4-6.6 4z"\n  })));\n};\n/* harmony default export */ var video_camera_alt_2 = (SvgVideoCameraAlt2);\n;// CONCATENATED MODULE: ./public/icons/volume-medium.svg\nvar volume_medium_path;\nfunction volume_medium_extends() { volume_medium_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return volume_medium_extends.apply(this, arguments); }\n\nvar SvgVolumeMedium = function SvgVolumeMedium(props) {\n  return /*#__PURE__*/react.createElement("svg", volume_medium_extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    viewBox: "0 0 64 64",\n    xmlns: "http://www.w3.org/2000/svg"\n  }, props), volume_medium_path || (volume_medium_path = /*#__PURE__*/react.createElement("path", {\n    d: "M62.2 5.9c0-1.7-.9-3.1-2.4-3.8-1.5-.7-3.3-.4-4.5.7C49 8.2 40 11.4 33.6 12.7c-2.4 0-21.3.2-22.1.2-1.2 0-2.2 1-2.2 2.3V17h-1c-3.6 0-6.5 2.9-6.5 6.5v7.2c0 3.6 2.9 6.5 6.5 6.5h1V39c0 1.2 1 2.2 2.2 2.3h3.9l3.3 15.8c.6 3 3.3 5.1 6.3 5.1h.9c2 0 3.8-.9 5-2.4 1.2-1.5 1.7-3.5 1.3-5.4l-2.7-13.1h4C40 42.7 49 46 55.2 51.4c.8.7 1.8 1 2.8 1 .6 0 1.2-.1 1.8-.4 1.5-.7 2.4-2.2 2.4-3.8V5.9ZM27.4 57c-.2.3-.7.7-1.5.7H25c-.9 0-1.7-.7-1.9-1.6L20 41.4h4.9l2.9 14c.1.8-.2 1.4-.4 1.6ZM11.5 32.6H8.2c-1.1 0-2-.9-2-2v-7.2c0-1.1.9-2 2-2h3.2c1.2 0 2.3-1 2.3-2.3v-1.9c5.6-.1 13.4-.1 17.4-.2v19.7c-4 0-11.8-.1-17.4-.2v-1.9c0-1-1-2-2.2-2Zm24.2 4.7V16.9c8.3-1.9 16.4-5.6 22-10.3v41c-5.6-4.7-13.7-8.5-22-10.3Z"\n  })));\n};\n/* harmony default export */ var volume_medium = (SvgVolumeMedium);\n;// CONCATENATED MODULE: ./public/icons/home-documents.svg\nvar home_documents_path, home_documents_path2;\nfunction home_documents_extends() { home_documents_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return home_documents_extends.apply(this, arguments); }\n\nvar SvgHomeDocuments = function SvgHomeDocuments(props) {\n  return /*#__PURE__*/react.createElement("svg", home_documents_extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), home_documents_path || (home_documents_path = /*#__PURE__*/react.createElement("path", {\n    d: "M38.6 22.1h-4.3v-4.3c0-1.2-1-2.3-2.3-2.3-1.2 0-2.3 1-2.3 2.3v4.3h-4.3c-1.2 0-2.3 1-2.3 2.3s1 2.3 2.3 2.3h4.3V31c0 1.2 1 2.3 2.3 2.3 1.2 0 2.3-1 2.3-2.3v-4.3h4.3c1.2 0 2.3-1 2.3-2.3s-1.1-2.3-2.3-2.3z"\n  })), home_documents_path2 || (home_documents_path2 = /*#__PURE__*/react.createElement("path", {\n    d: "M50 1.8H14c-3.4 0-6.1 2.7-6.1 6.1V40c0 1.5.6 2.9 1.7 3.9l18 17c1 1 2.3 1.5 3.7 1.5H50c3.4 0 6.1-2.7 6.1-6.1V7.9c0-3.4-2.7-6.1-6.1-6.1zM15.7 43.4h11.7c.5 0 .9.4.9.8v11L15.7 43.4zm35.9 12.7c0 .9-.7 1.6-1.6 1.6H32.8V44.2c0-2.9-2.4-5.3-5.4-5.3h-15v-31c0-.9.7-1.6 1.6-1.6h36c.9 0 1.6.7 1.6 1.6v48.2z"\n  })));\n};\n/* harmony default export */ var home_documents = (SvgHomeDocuments);\n// EXTERNAL MODULE: ./public/icons/graph.svg\nvar graph = __webpack_require__(72120);\n;// CONCATENATED MODULE: ./public/icons/code.svg\nvar code_path;\nfunction code_extends() { code_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return code_extends.apply(this, arguments); }\n\nvar SvgCode = function SvgCode(props) {\n  return /*#__PURE__*/react.createElement("svg", code_extends({\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), code_path || (code_path = /*#__PURE__*/react.createElement("path", {\n    d: "M18.1 15.5c.4-.4.3-1-.1-1.4-.4-.4-1-.3-1.4.1L3 29.4c-1.3 1.4-1.3 3.7 0 5.1l13.6 15.3c.2.2.5.3.7.3.2 0 .5-.1.7-.3.4-.4.4-1 .1-1.4L4.4 33.2c-.6-.7-.6-1.8 0-2.5l13.7-15.2zM61 29.4 47.4 14.1c-.4-.4-1-.4-1.4-.1-.4.4-.4 1-.1 1.4l13.6 15.3c.6.7.6 1.8 0 2.5L45.9 48.5c-.4.4-.3 1 .1 1.4.2.2.4.3.7.3.3 0 .5-.1.7-.3L61 34.6c1.3-1.4 1.3-3.8 0-5.2zM37.8 14.7c-.5-.2-1.1.1-1.3.6L25.6 48c-.2.5.1 1.1.6 1.3.1 0 .2.1.3.1.4 0 .8-.3.9-.7l11-32.7c.2-.5-.1-1.1-.6-1.3z"\n  })));\n};\n/* harmony default export */ var code = (SvgCode);\n;// CONCATENATED MODULE: ./public/icons/stopwatch.svg\nvar stopwatch_path, stopwatch_path2;\nfunction stopwatch_extends() { stopwatch_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return stopwatch_extends.apply(this, arguments); }\n\nvar SvgStopwatch = function SvgStopwatch(props) {\n  return /*#__PURE__*/react.createElement("svg", stopwatch_extends({\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), stopwatch_path || (stopwatch_path = /*#__PURE__*/react.createElement("path", {\n    d: "M33 12V4h5.3c.6 0 1-.4 1-1s-.4-1-1-1H25.7c-.6 0-1 .4-1 1s.4 1 1 1H31v8c-13.3.5-24 11.5-24 25 0 13.8 11.2 25 25 25s25-11.2 25-25c0-13.5-10.7-24.5-24-25zm-1 48C19.3 60 9 49.7 9 37s10.3-23 23-23 23 10.3 23 23-10.3 23-23 23z"\n  })), stopwatch_path2 || (stopwatch_path2 = /*#__PURE__*/react.createElement("path", {\n    d: "M33 31.8v-9.1c0-.6-.4-1-1-1s-1 .4-1 1v9.1c-2.5.5-4.4 2.7-4.4 5.3 0 3 2.4 5.4 5.4 5.4s5.4-2.4 5.4-5.4c0-2.6-1.9-4.8-4.4-5.3zm-1 8.7c-1.9 0-3.4-1.5-3.4-3.4s1.5-3.4 3.4-3.4 3.4 1.5 3.4 3.4-1.5 3.4-3.4 3.4z"\n  })));\n};\n/* harmony default export */ var stopwatch = (SvgStopwatch);\n;// CONCATENATED MODULE: ./public/icons/database.svg\nvar database_path;\nfunction database_extends() { database_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return database_extends.apply(this, arguments); }\n\nvar SvgDatabase = function SvgDatabase(props) {\n  return /*#__PURE__*/react.createElement("svg", database_extends({\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), database_path || (database_path = /*#__PURE__*/react.createElement("path", {\n    d: "M52.3 38.6V13.5C52.3 7.1 43.4 2 32 2S11.7 7.1 11.7 13.5v37C11.7 56.8 20.8 62 32 62c11.2 0 20.3-5.2 20.3-11.5V38.6zM32 4c9.9 0 18.3 4.4 18.3 9.5S41.9 23 32 23s-18.3-4.4-18.3-9.5S22.1 4 32 4zm0 21.1c8.2 0 15-2.6 18.3-6.5v7.6c-.1 2.2-1.8 3.9-3.2 4.9-3.4 2.6-9 4.1-15.1 4.1-6 0-11.6-1.5-15.1-4.1-1.4-1-3-2.7-3.2-4.8v-7.6c3.3 3.8 10.1 6.4 18.3 6.4zm-16.3 7.6c3.8 2.8 9.9 4.5 16.3 4.5 6.5 0 12.5-1.7 16.3-4.5.8-.6 1.5-1.2 2-1.8v8c-.3 4.9-8.5 9-18.3 9s-18-4.1-18.3-9V31c.6.5 1.2 1.1 2 1.7zm34.6 17.8c0 5.2-8.4 9.5-18.3 9.5-9.7 0-18.3-4.5-18.3-9.5v-6.9c3.2 3.8 10.1 6.3 18.3 6.3 8.2 0 15-2.5 18.3-6.3v6.9z"\n  })));\n};\n/* harmony default export */ var database = (SvgDatabase);\n// EXTERNAL MODULE: ./public/icons/plus.svg\nvar plus = __webpack_require__(38036);\n// EXTERNAL MODULE: ./public/icons/checkmark.svg\nvar checkmark = __webpack_require__(29181);\n;// CONCATENATED MODULE: ./public/icons/radio-button.svg\nvar radio_button_path;\nfunction radio_button_extends() { radio_button_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return radio_button_extends.apply(this, arguments); }\n\nvar SvgRadioButton = function SvgRadioButton(props) {\n  return /*#__PURE__*/react.createElement("svg", radio_button_extends({\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), radio_button_path || (radio_button_path = /*#__PURE__*/react.createElement("path", {\n    d: "M8.3 4.6C4.8 4.6 2 7.5 2 10.9c0 3.5 2.8 6.3 6.3 6.3s6.3-2.8 6.3-6.3c-.1-3.4-2.9-6.3-6.3-6.3zm0 10.6c-2.4 0-4.3-1.9-4.3-4.3s1.9-4.3 4.3-4.3 4.3 1.9 4.3 4.3-2 4.3-4.3 4.3zM8.3 25.7C4.8 25.7 2 28.5 2 32s2.8 6.3 6.3 6.3 6.3-2.8 6.3-6.3-2.9-6.3-6.3-6.3zm0 10.6C5.9 36.3 4 34.4 4 32s1.9-4.3 4.3-4.3 4.3 1.9 4.3 4.3c-.1 2.4-2 4.3-4.3 4.3zM8.3 46.8c-3.5 0-6.3 2.8-6.3 6.3s2.8 6.3 6.3 6.3 6.3-2.8 6.3-6.3-2.9-6.3-6.3-6.3zm0 10.6c-2.4 0-4.3-1.9-4.3-4.3s1.9-4.3 4.3-4.3 4.3 1.9 4.3 4.3-2 4.3-4.3 4.3zM24.1 11.9H61c.6 0 1-.4 1-1s-.4-1-1-1H24.1c-.6 0-1 .4-1 1s.4 1 1 1zM61 31H24.1c-.6 0-1 .4-1 1s.4 1 1 1H61c.6 0 1-.4 1-1s-.4-1-1-1zM61 52.1H24.1c-.6 0-1 .4-1 1s.4 1 1 1H61c.6 0 1-.4 1-1s-.4-1-1-1z"\n  })));\n};\n/* harmony default export */ var radio_button = (SvgRadioButton);\n// EXTERNAL MODULE: ./public/icons/arrow-left.svg\nvar arrow_left = __webpack_require__(4571);\n// EXTERNAL MODULE: ./public/icons/club.svg\nvar club = __webpack_require__(44757);\n;// CONCATENATED MODULE: ./public/icons/dice.svg\nvar dice_path, dice_path2;\nfunction dice_extends() { dice_extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return dice_extends.apply(this, arguments); }\n\nvar SvgDice = function SvgDice(props) {\n  return /*#__PURE__*/react.createElement("svg", dice_extends({\n    fill: "#1C2033",\n    width: 52,\n    height: 52,\n    xmlns: "http://www.w3.org/2000/svg",\n    viewBox: "0 0 64 64",\n    style: {\n      enableBackground: "new 0 0 64 64"\n    },\n    xmlSpace: "preserve"\n  }, props), dice_path || (dice_path = /*#__PURE__*/react.createElement("path", {\n    d: "M56 3H8C5.2 3 3 5.2 3 8v48c0 2.8 2.2 5 5 5h48c2.8 0 5-2.2 5-5V8c0-2.8-2.2-5-5-5zm3 53c0 1.7-1.3 3-3 3H8c-1.7 0-3-1.3-3-3V8c0-1.7 1.3-3 3-3h48c1.7 0 3 1.3 3 3v48z"\n  })), dice_path2 || (dice_path2 = /*#__PURE__*/react.createElement("path", {\n    d: "M16.3 11.8c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3zM47.7 11.8c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.3-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3zM47.7 42.2c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.3-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3zM16.3 42.2c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3zM32 27c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z"\n  })));\n};\n/* harmony default export */ var dice = (SvgDice);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownAddObjects.jsx\n\n\n\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_STROKE = 2;\nvar DropdownAddObjects = function DropdownAddObjects(props) {\n  var _useState = (0,react.useState)("main"),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    activeMenu = _useState2[0],\n    setActiveMenu = _useState2[1];\n  var _useState3 = (0,react.useState)(234),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    menuHeight = _useState4[0],\n    setMenuHeight = _useState4[1];\n  var dropdownRef = (0,react.useRef)(null);\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    imageUploaded = _useState6[0],\n    setImageUploaded = _useState6[1];\n  var _useState7 = (0,react.useState)(true),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    isLoading = _useState8[0],\n    setLoading = _useState8[1];\n  var _useState9 = (0,react.useState)(false),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    imageUploading = _useState10[0],\n    setImageUploading = _useState10[1];\n  var _useState11 = (0,react.useState)(false),\n    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n    audioUploaded = _useState12[0],\n    setAudioUploaded = _useState12[1];\n  var _useState13 = (0,react.useState)(false),\n    _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n    validImgURL = _useState14[0],\n    setValidImgURL = _useState14[1];\n  var _useState15 = (0,react.useState)(false),\n    _useState16 = (0,slicedToArray/* default */.Z)(_useState15, 2),\n    validVideoURL = _useState16[0],\n    setValidVideoURL = _useState16[1];\n  var _useState17 = (0,react.useState)(false),\n    _useState18 = (0,slicedToArray/* default */.Z)(_useState17, 2),\n    validAudioURL = _useState18[0],\n    setValidAudioURL = _useState18[1];\n  var _useState19 = (0,react.useState)(""),\n    _useState20 = (0,slicedToArray/* default */.Z)(_useState19, 2),\n    imgsrc = _useState20[0],\n    setImgsrc = _useState20[1];\n  var _useState21 = (0,react.useState)(""),\n    _useState22 = (0,slicedToArray/* default */.Z)(_useState21, 2),\n    vidsrc = _useState22[0],\n    setVidsrc = _useState22[1];\n  var _useState23 = (0,react.useState)(""),\n    _useState24 = (0,slicedToArray/* default */.Z)(_useState23, 2),\n    audiosrc = _useState24[0],\n    setAudiosrc = _useState24[1];\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  var calcOutOfBounds = function calcOutOfBounds(x, y) {\n    var dropHeight = dropdownRef.current ? dropdownRef.current.clientHeight : 272;\n    var dropWidth = dropdownRef.current ? dropdownRef.current.clientWidth : 298;\n    var paddingPx = 7;\n    var screenH = window.innerHeight - paddingPx;\n    var screenW = window.innerWidth - paddingPx;\n    var transformX = x + dropWidth - screenW;\n    if (transformX < 0) {\n      transformX = 0;\n    }\n    var transformY = y + dropHeight - screenH;\n    if (transformY < 0) {\n      transformY = 0;\n    }\n    return {\n      x: transformX,\n      y: transformY\n    };\n  };\n  var _useState25 = (0,react.useState)(-calcOutOfBounds(props.xPos, props.yPos).x),\n    _useState26 = (0,slicedToArray/* default */.Z)(_useState25, 2),\n    offsetX = _useState26[0],\n    setOffsetX = _useState26[1];\n  var _useState27 = (0,react.useState)(-calcOutOfBounds(props.xPos, props.yPos).y),\n    _useState28 = (0,slicedToArray/* default */.Z)(_useState27, 2),\n    offsetY = _useState28[0],\n    setOffsetY = _useState28[1];\n  (0,react.useEffect)(function () {\n    document.addEventListener(\'click\', handleClickOutside);\n    document.addEventListener(\'touchstart\', handleClickOutside);\n    document.addEventListener(\'contextmenu\', handleReposition);\n    return function () {\n      document.removeEventListener(\'click\', handleClickOutside);\n      document.addEventListener(\'touchstart\', handleClickOutside);\n      document.removeEventListener(\'contextmenu\', handleReposition);\n    };\n  }, []);\n  var handleReposition = function handleReposition(e) {\n    setActiveMenu("main");\n    var offset = calcOutOfBounds(e.clientX, e.clientY);\n    setOffsetX(-offset.x);\n    setOffsetY(-offset.y);\n    setLoading(false);\n  };\n  var handleClickOutside = function handleClickOutside(e) {\n    if (dropdownRef.current && !dropdownRef.current.contains(e.target)) {\n      props.close();\n    }\n  };\n  var calcHeight = function calcHeight(el) {\n    var height = el.offsetHeight;\n    var matrix = new DOMMatrix(window.getComputedStyle(dropdownRef.current).transform);\n    var y = matrix.m42;\n    if (height + y > window.innerHeight) {\n      var newOffset = menuHeight - height;\n      setOffsetY(offsetY + newOffset);\n    }\n    setMenuHeight(height);\n  };\n  var uploadFile = /*#__PURE__*/function () {\n    var _ref = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee(info, type) {\n      var name, _name, _name2, _name3;\n      return regenerator_default().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              if (type === "image") {\n                setImageUploading(true);\n                name = "https://res.cloudinary.com/uottawaedusim/image/upload/" + info.public_id + "." + info.format;\n                setImageUploaded(true);\n                setImageUploading(false);\n                addImage(name, info);\n                props.handleImage(name);\n              } else if (type === "video") {\n                _name = "https://res.cloudinary.com/uottawaedusim/video/upload/" + info.file + "." + info.format;\n                addVideo(_name);\n                props.handleVideo(_name);\n              } else if (type === "audio") {\n                _name2 = info.secure_url;\n                setAudioUploaded(true);\n                addAudio(_name2);\n                props.handleAudio(_name2);\n              } else if (type === "pdf") {\n                _name3 = info.secure_url;\n                addDocument(_name3);\n                props.handleDocument(_name3);\n              }\n            } catch (error) {\n              if (type === "image") {\n                setImageUploaded(false);\n              } else if (type === "video") {\n                setVideoUploaded(false);\n              } else if (type === "audio") {\n                setAudioUploaded(false);\n              }\n              console.error(error);\n            }\n          case 1:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function uploadFile(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  // Adding Objects\n  var addObjectToLayer = function addObjectToLayer(objectName, objectParameters) {\n    var _props$setState;\n    var objectsState = props.state[objectName];\n    var objectsDeletedState = parseInt(props.state["".concat(objectName, "DeleteCount")]);\n    var numOfObj = objectsState.length + (objectsDeletedState ? objectsDeletedState : 0) + 1;\n    var isCustom = props.customObjects.includes(objectName);\n    var name = objectName + numOfObj;\n    var objX = props.state.selectedContextMenu.position.relX;\n    var objY = props.state.selectedContextMenu.position.relY;\n    var paddingPx = 7;\n    var screenH = window.innerHeight - paddingPx;\n    var screenW = window.innerWidth - paddingPx;\n    if (objX > screenW) {\n      objX = objX - 200;\n    }\n    if (objY > screenH) {\n      objY = objY - 200;\n    }\n    var object = _objectSpread(_objectSpread({\n      rolelevel: props.state.rolelevel,\n      infolevel: props.layer.attrs.name === "personal",\n      overlay: props.type === "overlay",\n      overlayIndex: props.type === "overlay" ? props.state.overlayOpenIndex : -1,\n      level: props.state.level,\n      visible: true,\n      x: objX,\n      y: objY,\n      id: name,\n      name: objectName + numOfObj,\n      type: objectName,\n      ref: name\n    }, objectParameters), isCustom ? {\n      onTop: true\n    } : {});\n    var newPages = (0,toConsumableArray/* default */.Z)(props.state.pages);\n    var thisPage = _objectSpread({}, newPages[props.state.level - 1]);\n    if (props.layer.attrs.name === "group") {\n      var groupLayers = (0,toConsumableArray/* default */.Z)(thisPage.groupLayers);\n      isCustom ? groupLayers.unshift(name) : groupLayers.push(name);\n      thisPage.groupLayers = groupLayers;\n    } else if (props.layer.attrs.name === "personal") {\n      var personalLayers = (0,toConsumableArray/* default */.Z)(thisPage.personalLayers);\n      isCustom ? personalLayers.unshift(name) : personalLayers.push(name);\n      thisPage.personalLayers = personalLayers;\n    } else {\n      var oIndex = 0;\n      var overlay = thisPage.overlays.filter(function (overlay, index) {\n        if (overlay.id === props.state.overlayOpenIndex) {\n          oIndex = index;\n          return true;\n        } else {\n          return false;\n        }\n      })[0];\n      overlay.layers.push(name);\n      thisPage.overlays[oIndex] = overlay;\n    }\n    newPages[props.state.level - 1] = thisPage;\n    props.setState((_props$setState = {}, (0,defineProperty/* default */.Z)(_props$setState, objectName, [].concat((0,toConsumableArray/* default */.Z)(objectsState), [object])), (0,defineProperty/* default */.Z)(_props$setState, "selectedShapeName", name), (0,defineProperty/* default */.Z)(_props$setState, "pages", newPages), _props$setState));\n    props.close();\n  };\n  var addRectangle = function addRectangle() {\n    console.log(props.shapeThemes);\n    addObjectToLayer("rectangles", {\n      width: 100,\n      height: 100,\n      stroke: props.shapeThemes[0] ? props.shapeThemes[0][1] : \'black\',\n      strokeWidth: DEFAULT_STROKE,\n      rotation: 0,\n      fill: props.shapeThemes[0] ? props.shapeThemes[0][0] : \'black\',\n      useImage: false\n    });\n  };\n  var addCircle = function addCircle() {\n    addObjectToLayer("ellipses", {\n      radiusX: 50,\n      radiusY: 50,\n      stroke: props.shapeThemes[1] ? props.shapeThemes[1][1] : \'black\',\n      strokeWidth: DEFAULT_STROKE,\n      fill: props.shapeThemes[1] ? props.shapeThemes[1][0] : \'black\',\n      rotation: 0\n    });\n  };\n  var addStar = function addStar() {\n    addObjectToLayer("stars", {\n      numPoints: 5,\n      innerRadius: 30,\n      outerRadius: 70,\n      stroke: props.shapeThemes[3] ? props.shapeThemes[3][1] : \'black\',\n      strokeWidth: DEFAULT_STROKE,\n      fill: props.shapeThemes[3] ? props.shapeThemes[3][0] : \'black\',\n      rotation: 0,\n      width: 100,\n      height: 100\n    });\n  };\n  var addLine = function addLine() {\n    addObjectToLayer("lines", {\n      stroke: \'black\',\n      strokeWidth: DEFAULT_STROKE,\n      points: [0, 0, 1000, 0],\n      opacity: 1\n    });\n  };\n  var addTriangle = function addTriangle() {\n    addObjectToLayer("triangles", {\n      sides: 3,\n      radius: 70,\n      stroke: props.shapeThemes[2] ? props.shapeThemes[2][1] : \'black\',\n      strokeWidth: DEFAULT_STROKE,\n      useImage: false,\n      fill: props.shapeThemes[2] ? props.shapeThemes[2][0] : \'black\',\n      rotation: 0,\n      width: 100,\n      height: 100\n    });\n  };\n  var getMeta = function getMeta(url, type, callback) {\n    if (type === "img") {\n      var img = new icons_image();\n      img.src = url;\n      img.onload = function () {\n        callback(img.width, img.height);\n      };\n    } else {\n      var video = document.createElement("video");\n      video.src = url;\n      video.addEventListener(\'loadedmetadata\', function () {\n        callback(video.videoWidth, video.videoHeight);\n      });\n    }\n  };\n  var addImage = function addImage(img, info) {\n    addObjectToLayer("images", {\n      temporary: false,\n      imgsrc: img,\n      stroke: \'black\',\n      strokeWidth: 0,\n      opacity: 1,\n      width: info.width,\n      height: info.height\n    });\n  };\n  var addVideo = function addVideo(video) {\n    addObjectToLayer("videos", {\n      vidsrc: video\n    });\n  };\n  var addNewText = function addNewText() {\n    addObjectToLayer("richTexts", {\n      editorState: null,\n      draggable: true\n    });\n  };\n  var addText = function addText() {\n    addObjectToLayer("texts", {\n      fontSize: 50,\n      text: "Edit this",\n      fontFamily: "Belgrano",\n      opacity: 1,\n      fill: props.shapeThemes[5] ? props.shapeThemes[5][0] : \'black\',\n      rotation: 0,\n      width: 300,\n      height: 60,\n      stroke: props.shapeThemes[5] ? props.shapeThemes[5][1] : \'black\',\n      strokeWidth: 0,\n      backgroundColor: "transparent"\n    });\n  };\n  var addAudio = function addAudio(audio) {\n    addObjectToLayer("audios", {\n      imgsrc: "sound.png",\n      audsrc: audio\n    });\n  };\n  var addDocument = function addDocument(document) {\n    addObjectToLayer("documents", {\n      fill: \'none\',\n      rotation: 0,\n      width: 100,\n      height: 100,\n      docsrc: document\n    });\n  };\n\n  // Custom Components (Interactive)\n  var addPoll = function addPoll() {\n    addObjectToLayer("polls", {\n      performanceEnabled: false,\n      customName: "",\n      json: {\n        pages: [{\n          questions: [{\n            id: 0,\n            type: "text",\n            name: "0",\n            title: t("edit.sampleTextQuestion"),\n            isRequired: true,\n            performanceOption: props.type === "group" ? "groupResponse" : "personalResponse"\n          }, {\n            id: 1,\n            type: "text",\n            name: "1",\n            inputType: "date",\n            title: t("edit.sampleDateQuestion"),\n            isRequired: false,\n            performanceOption: props.type === "group" ? "groupResponse" : "personalResponse"\n          }, {\n            id: 2,\n            type: "boolean",\n            name: "2",\n            title: t("edit.sampleYesNoQuestion"),\n            isRequired: false,\n            performanceOption: props.type === "group" ? "groupResponse" : "personalResponse"\n          }]\n        }]\n      }\n    });\n  };\n  var addHTMLFrame = function addHTMLFrame() {\n    addObjectToLayer("htmlFrames", {});\n  };\n  var addTimer = function addTimer() {\n    addObjectToLayer("timers", {\n      controls: true\n    });\n  };\n  var addConnect4 = function addConnect4() {\n    addObjectToLayer("connect4s", {});\n  };\n  var addTicTacToe = function addTicTacToe() {\n    addObjectToLayer("tics", {});\n  };\n  var addDeck = function addDeck() {\n    addObjectToLayer("decks", {});\n  };\n  var addDice = function addDice() {\n    addObjectToLayer("dice", {});\n  };\n  var addInput = function addInput(varType) {\n    addObjectToLayer("inputs", {\n      varType: varType,\n      label: t("edit.labelText"),\n      zIndex: 0,\n      fill: props.shapeThemes[4] ? props.shapeThemes[4][0] : \'white\',\n      stroke: props.shapeThemes[4] ? props.shapeThemes[4][1] : \'black\',\n      textColor: props.shapeThemes[4] ? props.shapeThemes[4][2] : \'black\'\n    });\n  };\n\n  // Other\n  var imageURLGood = function imageURLGood(url) {\n    if ((url.includes("http://") || url.includes("https://")) && (url.includes(".png") || url.includes(".jpg") || url.includes(".jpeg") || url.includes(".gif"))) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  var handleImage = function handleImage(e) {\n    var url = e.target.value;\n    if (imageURLGood(url)) {\n      setValidImgURL(true);\n      props.handleImage(url);\n    } else {\n      setValidImgURL(false);\n    }\n    setImgsrc(url);\n  };\n  var videoURLGood = function videoURLGood(url) {\n    if ((url.includes("http://") || url.includes("https://")) && (url.includes(".mp4") || url.includes(".webm") || url.includes(".ogv") || url.includes(".avi") || url.includes(".youtube"))) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  var handleVideo = function handleVideo(e) {\n    var url = e.target.value;\n    if (videoURLGood(url)) {\n      setValidVideoURL(true);\n      props.handleVideo(url);\n    } else {\n      setValidVideoURL(false);\n    }\n    setVidsrc(url);\n  };\n  var audioURLGood = function audioURLGood(url) {\n    if ((url.includes("http://") || url.includes("https://")) && (url.includes(".mp3") || url.includes(".wav"))) {\n      return true;\n    } else {\n      return false;\n    }\n  };\n  var handleAudio = function handleAudio(e) {\n    var url = e.target.value;\n    if (audioURLGood(url)) {\n      setValidAudioURL(true);\n      props.handleAudio(url);\n    } else {\n      setValidAudioURL(false);\n    }\n    setAudiosrc(url);\n  };\n  var openWidget = function openWidget(preset) {\n    var myWidget = window.cloudinary.createUploadWidget({\n      cloudName: "uottawaedusim",\n      uploadPreset: preset,\n      singleUploadAutoClose: true\n    }, function (error, result) {\n      if (!error && result && result.event === "success") {\n        var type = "";\n        if (preset == "bb8lewrh") {\n          type = "image";\n        } else if (preset == "tj5ptxi8") {\n          type = "video";\n        } else if (preset == "du7sbfat") {\n          type = "audio";\n        } else if (preset == "mfcgzpkg") {\n          type = "pdf";\n        }\n        uploadFile(result.info, type);\n        myWidget.close();\n      }\n    });\n    props.close();\n    myWidget.open();\n  };\n  return isLoading ? false : /*#__PURE__*/react.createElement("div", {\n    className: "dropdown",\n    style: {\n      height: menuHeight,\n      transform: "translateX(".concat(props.xPos + offsetX, "px)\\n        translateY(").concat(props.yPos + offsetY, "px)")\n    },\n    ref: dropdownRef,\n    onContextMenu: function onContextMenu(e) {\n      e.preventDefault();\n    }\n  }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'main\',\n    timeout: 500,\n    classNames: "menu-primary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu",\n    style: {\n      textAlign: "left"\n    }\n  }, /*#__PURE__*/react.createElement("h1", null, props.title), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(star/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("shapes");\n    }\n  }, t("edit.addShape")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_image, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("media");\n    }\n  }, t("edit.addMedia")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(pointer_top/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("pieces");\n    }\n  }, t("edit.addInteractive")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(game, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("games");\n    }\n  }, t("edit.addGames")))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'shapes\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("main");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.addShape"))), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addText,\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_text/* default */.Z, {\n      className: "icon add-icons"\n    }))\n  }, t("edit.shape.simpleText")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addNewText,\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(text_alt, {\n      className: "icon add-icons"\n    }))\n  }, t("edit.shape.richText")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addRectangle,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addRectangle\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(stop/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.shape.square")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addCircle,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addCircle\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(circle/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.shape.circle")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addTriangle,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addTriangle\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(triangle_9/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.shape.triangle")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addStar,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addStar\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(star/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.shape.star")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addLine,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addLine\n    }, /*#__PURE__*/react.createElement(vector_alt, {\n      className: "icon add-icons"\n    }))\n  }, t("edit.shape.line")))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'media\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("main");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.addMedia"))), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_image, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("image");\n    }\n  }, t("edit.media.imageOrGif")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(video_camera_alt_2, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("video");\n    }\n  }, t("edit.media.video")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(volume_medium, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("audio");\n    }\n  }, t("edit.media.audio")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(home_documents, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("docs");\n    }\n  }, t("edit.media.document")))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'image\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("media");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.media.addImage"))), /*#__PURE__*/react.createElement("div", {\n    className: "".concat(imageUploaded ? "" : "dropdown-add-disabled")\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: !imageUploading ? /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick(e) {\n        if (imageUploaded) {\n          addImage(e);\n        }\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(plus/* default */.Z, {\n      className: "icon add-icons"\n    }))) : /*#__PURE__*/react.createElement("div", {\n      className: "loadingMediaAddMenuContainer"\n    }, /*#__PURE__*/react.createElement(Loading/* default */.Z, null))\n  }, /*#__PURE__*/react.createElement("button", {\n    type: "button",\n    className: "add-media-button",\n    onClick: function onClick() {\n      return openWidget("bb8lewrh");\n    }\n  }, t("modal.imageFromFile")))), /*#__PURE__*/react.createElement("div", {\n    className: "".concat(validImgURL ? "" : "dropdown-add-disabled")\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick(e) {\n        if (validImgURL) {\n          addImage(e);\n        }\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(plus/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, /*#__PURE__*/react.createElement("input", {\n    className: "add-dropdown-item-input",\n    type: "text",\n    placeholder: t("edit.media.imageURL"),\n    onChange: handleImage,\n    value: imgsrc\n  }))))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'video\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("media");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.media.addVideo"))), /*#__PURE__*/react.createElement("div", {\n    className: "".concat(validVideoURL ? "" : "dropdown-add-disabled")\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick(e) {\n        if (validVideoURL) {\n          addVideo(vidsrc);\n        }\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(plus/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, /*#__PURE__*/react.createElement("input", {\n    className: "add-dropdown-item-input",\n    type: "text",\n    placeholder: t("edit.media.videoURL"),\n    onChange: handleVideo,\n    value: vidsrc\n  }))))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'audio\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("media");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.media.addAudio"))), /*#__PURE__*/react.createElement("div", {\n    className: "".concat(audioUploaded ? "" : "dropdown-add-disabled")\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick(e) {\n        if (audioUploaded) {\n          addAudio(e);\n        }\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(plus/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, /*#__PURE__*/react.createElement("button", {\n    type: "button",\n    className: "add-media-button",\n    onClick: function onClick() {\n      return openWidget("du7sbfat");\n    }\n  }, t("modal.imageFromFile")))))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'docs\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("media");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.media.addDocument"))), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(plus/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, /*#__PURE__*/react.createElement("button", {\n    type: "button",\n    className: "add-media-button",\n    onClick: function onClick() {\n      return openWidget("mfcgzpkg");\n    }\n  }, t("modal.imageFromFile"))))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'pieces\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("main");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.addInteractive"))), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: function onClick() {\n      return addInput("button");\n    },\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick() {\n        return addInput("button");\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(pointer_top/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.input.button")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: function onClick() {\n      return addInput("text");\n    },\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick() {\n        return addInput("text");\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_text/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.input.textbox")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: function onClick() {\n      return addInput("checkbox");\n    },\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick() {\n        return addInput("checkbox");\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(checkmark/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.input.checkbox")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: function onClick() {\n      return addInput("radio");\n    },\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick() {\n        return addInput("radio");\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(radio_button, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.input.radio")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: function onClick() {\n      return addInput("variable");\n    },\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: function onClick() {\n        return addInput("variable");\n      }\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(help/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, "Variable"), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addPoll,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addPoll\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(graph/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.interactive.poll")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addHTMLFrame,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addHTMLFrame\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(code, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.interactive.html")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addTimer,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addTimer\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(stopwatch, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.interactive.timer")))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'games\',\n    timeout: 500,\n    classNames: "menu-secondary",\n    unmountOnExit: true,\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n      className: "icon add-icons"\n    })),\n    onClick: function onClick() {\n      return setActiveMenu("main");\n    }\n  }, /*#__PURE__*/react.createElement("h2", null, t("edit.addGames"))), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addTicTacToe,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addTicTacToe\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(stop/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.game.tic")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addDeck,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addDeck\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(club/* default */.Z, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.game.deck")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addDice,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addDice\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(dice, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.game.dice")), /*#__PURE__*/react.createElement(DropdownItem/* default */.Z, {\n    onClick: addConnect4,\n    leftIcon: /*#__PURE__*/react.createElement("i", {\n      onClick: addConnect4\n    }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(database, {\n      className: "icon add-icons"\n    })))\n  }, t("edit.game.connect4")))));\n};\n/* harmony default export */ var Dropdown_DropdownAddObjects = (DropdownAddObjects);\n\n// <div className={`${videoUploaded ? "" : "dropdown-add-disabled"}`}>\n//   <DropdownItem\n//     leftIcon={\n//       !videoUploading ? (\n//\n//         <i  onClick={(e) => {\n//\n//           if (videoUploaded) {\n//             addVideo(e);\n//           }\n//         }} ><i><Plus className="icon add-icons"/></i></i>\n//       ) : (\n//         <div className="loadingMediaAddMenuContainer">\n//           <Loading />\n//         </div>\n//       )\n//     }>\n//     <button type="button" className="add-media-button" onClick={() => openWidget("tj5ptxi8")} >\n//       {t("modal.imageFromFile")}\n//     </button>\n//   </DropdownItem>\n// </div>\n//\n// EXTERNAL MODULE: ./node_modules/lodash.debounce/index.js\nvar lodash_debounce = __webpack_require__(91296);\nvar lodash_debounce_default = /*#__PURE__*/__webpack_require__.n(lodash_debounce);\n// EXTERNAL MODULE: ./node_modules/rc-slider/es/index.js + 61 modules\nvar rc_slider_es = __webpack_require__(45295);\n// EXTERNAL MODULE: ./node_modules/font-picker-react/dist/FontPicker.es.js + 1 modules\nvar FontPicker_es = __webpack_require__(10194);\n// EXTERNAL MODULE: ./node_modules/dompurify/dist/purify.js\nvar purify = __webpack_require__(27856);\nvar purify_default = /*#__PURE__*/__webpack_require__.n(purify);\n// EXTERNAL MODULE: ./node_modules/rc-slider/assets/index.css\nvar assets = __webpack_require__(56597);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/Dropdown/DropdownEditObject.css\nvar DropdownEditObject = __webpack_require__(32134);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownEditObject.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar DropdownEditObject_options = {};\n\nDropdownEditObject_options.styleTagTransform = (styleTagTransform_default());\nDropdownEditObject_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      DropdownEditObject_options.insert = insertBySelector_default().bind(null, "head");\n    \nDropdownEditObject_options.domAPI = (styleDomAPI_default());\nDropdownEditObject_options.insertStyleElement = (insertStyleElement_default());\n\nvar DropdownEditObject_update = injectStylesIntoStyleTag_default()(DropdownEditObject/* default */.Z, DropdownEditObject_options);\n\n\n\n\n       /* harmony default export */ var Dropdown_DropdownEditObject = (DropdownEditObject/* default */.Z && DropdownEditObject/* default */.Z.locals ? DropdownEditObject/* default */.Z.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/Dropdown/DropdownEditPoll.css\nvar DropdownEditPoll = __webpack_require__(27463);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownEditPoll.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar DropdownEditPoll_options = {};\n\nDropdownEditPoll_options.styleTagTransform = (styleTagTransform_default());\nDropdownEditPoll_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      DropdownEditPoll_options.insert = insertBySelector_default().bind(null, "head");\n    \nDropdownEditPoll_options.domAPI = (styleDomAPI_default());\nDropdownEditPoll_options.insertStyleElement = (insertStyleElement_default());\n\nvar DropdownEditPoll_update = injectStylesIntoStyleTag_default()(DropdownEditPoll/* default */.Z, DropdownEditPoll_options);\n\n\n\n\n       /* harmony default export */ var Dropdown_DropdownEditPoll = (DropdownEditPoll/* default */.Z && DropdownEditPoll/* default */.Z.locals ? DropdownEditPoll/* default */.Z.locals : undefined);\n\n// EXTERNAL MODULE: ./public/icons/cog.svg\nvar cog = __webpack_require__(22608);\n// EXTERNAL MODULE: ./public/icons/trash-can-alt-2.svg\nvar trash_can_alt_2 = __webpack_require__(70216);\n// EXTERNAL MODULE: ./public/icons/chevron-up.svg\nvar chevron_up = __webpack_require__(88025);\n// EXTERNAL MODULE: ./public/icons/chevron-down.svg\nvar chevron_down = __webpack_require__(53602);\n// EXTERNAL MODULE: ./public/icons/page.svg\nvar page = __webpack_require__(66296);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownEditPoll.jsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DropdownEditPoll_DropdownEditPoll = function DropdownEditPoll(props) {\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  var _useState = (0,react.useState)(\'main\'),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    activeMenu = _useState2[0],\n    setActiveMenu = _useState2[1];\n  var _useState3 = (0,react.useState)(props.shape.attrs.customProps.customName),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    name = _useState4[0],\n    setName = _useState4[1];\n  var _useState5 = (0,react.useState)(props.shape.attrs.customProps.pollJson.pages),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    pages = _useState6[0],\n    setPages = _useState6[1];\n  var _useState7 = (0,react.useState)({\n      pIndex: 0,\n      qIndex: 0\n    }),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    currentQuestion = _useState8[0],\n    setCurrentQuestion = _useState8[1];\n  var _useState9 = (0,react.useState)(null),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    menuHeight = _useState10[0],\n    setMenuHeight = _useState10[1];\n  var pollMenu = (0,react.useRef)();\n  (0,react.useEffect)(function () {\n    setMenuHeight(pollMenu.current.clientHeight);\n  }, []);\n  (0,react.useEffect)(function () {\n    if (pages) {\n      createJson();\n    }\n    calcHeight();\n  }, [pages]);\n  var createJson = function createJson() {\n    var pagesJson = pages.map(function (p, pIndex) {\n      var questions = p.questions;\n      var qJson = questions.map(function (q, index) {\n        return {\n          id: q.id,\n          name: t("edit.pageXQuestionY", {\n            p: pIndex + 1,\n            q: index + 1\n          }),\n          type: q.type,\n          inputType: q.inputType,\n          title: q.title,\n          isRequired: q.isRequired,\n          choices: q.choices,\n          hasNone: false,\n          correctAnswer: q.correctAnswer,\n          performanceOption: q.performanceOption\n        };\n      });\n      return {\n        questions: qJson\n      };\n    });\n    var json = {\n      "showProgressBar": pages.length === 1 ? null : "bottom",\n      "pages": pagesJson\n    };\n    props.setData("polls", "json", json, props.shape.attrs.id);\n  };\n  var setQuestionParam = function setQuestionParam(type, pIndex, qIndex, val) {\n    var pageQs = (0,toConsumableArray/* default */.Z)(pages[pIndex].questions);\n    var newQ = pageQs[qIndex];\n    newQ[type] = val;\n    pageQs[qIndex] = newQ;\n    pageQs = {\n      questions: pageQs\n    };\n    var newPages = (0,toConsumableArray/* default */.Z)(pages);\n    newPages[pIndex] = pageQs;\n    setPages(newPages);\n  };\n  var renderQuestions = function renderQuestions() {\n    return pages.map(function (p, pIndex) {\n      var questions = p.questions;\n      var pageQuestions = questions.map(function (q, index) {\n        return /*#__PURE__*/react.createElement("tr", {\n          key: index\n        }, /*#__PURE__*/react.createElement("td", null, /*#__PURE__*/react.createElement("input", {\n          className: "pollEditQuestionInput",\n          type: "text",\n          placeholder: t("edit.questionPlaceholder"),\n          value: q.title,\n          onChange: function onChange(e) {\n            setQuestionParam("title", pIndex, index, e.target.value);\n          }\n        })), /*#__PURE__*/react.createElement("td", null, /*#__PURE__*/react.createElement("select", {\n          value: q.inputType || q.type,\n          onChange: function onChange(e) {\n            switch (e.target.value) {\n              case "text":\n              case "date":\n              case "color":\n                setQuestionParam("type", pIndex, index, "text");\n                setQuestionParam("inputType", pIndex, index, e.target.value);\n                setQuestionParam("choices", pIndex, index, null);\n                break;\n              case "dropdown":\n              case "radiogroup":\n              case "checkbox":\n                setQuestionParam("hasNone", pIndex, index, true);\n                setQuestionParam("choices", pIndex, index, [t("edit.clickCogToEditChoices"), t("edit.clickCogToEditChoices")]);\n                setQuestionParam("colCount", pIndex, index, 1);\n              default:\n                setQuestionParam("type", pIndex, index, e.target.value);\n                setQuestionParam("inputType", pIndex, index, null);\n                break;\n            }\n            if (e.target.value === "boolean") {\n              setQuestionParam("choices", pIndex, index, null);\n            }\n            setQuestionParam("correctAnswer", pIndex, index, null);\n          }\n        }, ["text", "dropdown", "radiogroup", "checkbox", "boolean", "date", "color"].map(function (key) {\n          return /*#__PURE__*/react.createElement("option", {\n            value: key,\n            key: key\n          }, t("edit.pollq.".concat(key)));\n        }))), /*#__PURE__*/react.createElement("td", {\n          className: "pollsEditorRequiredCheck"\n        }, /*#__PURE__*/react.createElement("input", {\n          type: "checkbox",\n          checked: q.isRequired,\n          value: q.isRequired,\n          onChange: function onChange(e) {\n            setQuestionParam("isRequired", pIndex, index, e.target.checked);\n          }\n        })), /*#__PURE__*/react.createElement("td", {\n          className: "editPollEditBtns",\n          onClick: function onClick() {\n            if (!(pIndex === 0 && index === 0)) {\n              if (index !== 0) {\n                // It is not the first question on the page (move it up one)\n                var pageQs = pages[pIndex].questions;\n                var prevQ = pageQs[index - 1];\n                pageQs[index - 1] = q;\n                pageQs[index] = prevQ;\n                var newPages = (0,toConsumableArray/* default */.Z)(pages);\n                newPages[pIndex] = {\n                  questions: pageQs\n                };\n                setPages(newPages);\n              } else {\n                // It is the first question on the page (move to end of previous page)\n                var prevPage = {\n                  questions: [].concat((0,toConsumableArray/* default */.Z)(pages[pIndex - 1].questions), [q])\n                };\n                var thisPage = {\n                  questions: (0,toConsumableArray/* default */.Z)(p.questions).slice(1)\n                };\n                var _newPages = (0,toConsumableArray/* default */.Z)(pages);\n                _newPages[pIndex - 1] = prevPage;\n                if (thisPage.questions.length) {\n                  _newPages[pIndex] = thisPage;\n                } else {\n                  _newPages[pIndex] = null;\n                  _newPages = _newPages.filter(function (e) {\n                    return e;\n                  });\n                }\n                setTimeout(function () {\n                  return setPages(_newPages);\n                }, 0);\n              }\n            }\n          }\n        }, /*#__PURE__*/react.createElement("i", {\n          className: "".concat(pIndex === 0 && index === 0 ? "disabled" : "")\n        }, /*#__PURE__*/react.createElement(chevron_up/* default */.Z, {\n          className: "icon poll-icons"\n        }))), /*#__PURE__*/react.createElement("td", {\n          className: "editPollEditBtns",\n          onClick: function onClick() {\n            if (!(pIndex === pages.length - 1 && index === p.questions.length - 1)) {\n              if (index !== p.questions.length - 1) {\n                // It is not the last question on the page (move it down one)\n                var pageQs = pages[pIndex].questions;\n                var nextQ = pageQs[index + 1];\n                pageQs[index + 1] = q;\n                pageQs[index] = nextQ;\n                var newPages = (0,toConsumableArray/* default */.Z)(pages);\n                newPages[pIndex] = {\n                  questions: pageQs\n                };\n                setPages(newPages);\n              } else {\n                // It is the last question on the page (move to start of next page)\n                var nextPage = {\n                  questions: [q].concat((0,toConsumableArray/* default */.Z)(pages[pIndex + 1].questions))\n                };\n                var thisPage = {\n                  questions: (0,toConsumableArray/* default */.Z)(p.questions).slice(0, -1)\n                };\n                var _newPages2 = (0,toConsumableArray/* default */.Z)(pages);\n                _newPages2[pIndex + 1] = nextPage;\n                if (thisPage.questions.length) {\n                  _newPages2[pIndex] = thisPage;\n                } else {\n                  _newPages2[pIndex] = null;\n                  _newPages2 = _newPages2.filter(function (e) {\n                    return e;\n                  });\n                }\n                setTimeout(function () {\n                  return setPages(_newPages2);\n                }, 0);\n              }\n            }\n          }\n        }, /*#__PURE__*/react.createElement("i", {\n          className: "\\n                ".concat(pIndex === pages.length - 1 && index === p.questions.length - 1 ? "disabled" : "")\n        }, /*#__PURE__*/react.createElement(chevron_down/* default */.Z, {\n          className: "icon poll-icons"\n        }))), /*#__PURE__*/react.createElement("td", {\n          className: "editPollEditBtns",\n          onClick: function onClick() {\n            if ((q.inputType || q.type) !== "color") {\n              setActiveMenu("settings");\n              setCurrentQuestion({\n                pIndex: pIndex,\n                qIndex: index\n              });\n            }\n          }\n        }, /*#__PURE__*/react.createElement("i", {\n          className: "".concat((q.inputType || q.type) === "color" ? "disabled" : "")\n        }, /*#__PURE__*/react.createElement(cog/* default */.Z, {\n          className: "icon poll-icons"\n        }))), /*#__PURE__*/react.createElement("td", {\n          className: "editPollEditBtns",\n          onClick: function onClick() {\n            if (pages.map(function (p) {\n              return p.questions;\n            }).flat().length > 1) {\n              if (p.questions.length === 1) {\n                // Delete page (since it is the last question on the page)\n                var newPages = [].concat((0,toConsumableArray/* default */.Z)(pages.slice(0, pIndex)), (0,toConsumableArray/* default */.Z)(pages.slice(pIndex + 1)));\n                setTimeout(function () {\n                  return setPages(newPages);\n                }, 0);\n              } else {\n                // Delete question from page\n                var newPage = {\n                  questions: [].concat((0,toConsumableArray/* default */.Z)(p.questions.slice(0, index)), (0,toConsumableArray/* default */.Z)(p.questions.slice(index + 1)))\n                };\n                var _newPages3 = (0,toConsumableArray/* default */.Z)(pages);\n                _newPages3[pIndex] = newPage;\n                setTimeout(function () {\n                  return setPages(_newPages3);\n                }, 0);\n              }\n            }\n          }\n        }, /*#__PURE__*/react.createElement("i", {\n          className: "".concat(pages.map(function (p) {\n            return p.questions;\n          }).flat().length === 1 ? "disabled" : "")\n        }, /*#__PURE__*/react.createElement(trash_can_alt_2/* default */.Z, {\n          className: "icon poll-icons"\n        }))));\n      });\n      return /*#__PURE__*/react.createElement(react.Fragment, {\n        key: pIndex\n      }, pIndex > 0 && /*#__PURE__*/react.createElement("tr", null, /*#__PURE__*/react.createElement("td", null, /*#__PURE__*/react.createElement("i", {\n        className: " editPollNewPageIcon"\n      }, /*#__PURE__*/react.createElement(page/* default */.Z, {\n        className: "icon poll-icons"\n      })), t("edit.newPage")), /*#__PURE__*/react.createElement("td", null), /*#__PURE__*/react.createElement("td", null), /*#__PURE__*/react.createElement("td", {\n        className: "editPollEditBtns",\n        onClick: function onClick() {\n          // Move question above down to next page\n          var prevQs = pages[pIndex - 1].questions;\n          var q = prevQs[prevQs.length - 1];\n          var nextPage = {\n            questions: [q].concat((0,toConsumableArray/* default */.Z)(pages[pIndex].questions))\n          };\n          var thisPage = {\n            questions: (0,toConsumableArray/* default */.Z)(prevQs).slice(0, -1)\n          };\n          var newPages = (0,toConsumableArray/* default */.Z)(pages);\n          newPages[pIndex] = nextPage;\n          if (thisPage.questions.length) {\n            newPages[pIndex - 1] = thisPage;\n          } else {\n            newPages[pIndex - 1] = null;\n            newPages = newPages.filter(function (e) {\n              return e;\n            });\n          }\n          setTimeout(function () {\n            return setPages(newPages);\n          }, 0);\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_up/* default */.Z, {\n        className: "icon poll-icons"\n      }))), /*#__PURE__*/react.createElement("td", {\n        className: "editPollEditBtns",\n        onClick: function onClick() {\n          // Move question below page above to previous page\n          var p = pages[pIndex - 1].questions;\n          var q = pages[pIndex].questions[0];\n          var prevPage = {\n            questions: [].concat((0,toConsumableArray/* default */.Z)(p), [q])\n          };\n          var thisPage = {\n            questions: (0,toConsumableArray/* default */.Z)(pages[pIndex].questions).slice(1)\n          };\n          var newPages = (0,toConsumableArray/* default */.Z)(pages);\n          newPages[pIndex - 1] = prevPage;\n          if (thisPage.questions.length) {\n            newPages[pIndex] = thisPage;\n          } else {\n            newPages[pIndex] = null;\n            newPages = newPages.filter(function (e) {\n              return e;\n            });\n          }\n          setTimeout(function () {\n            return setPages(newPages);\n          }, 0);\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_down/* default */.Z, {\n        className: "icon poll-icons"\n      }))), /*#__PURE__*/react.createElement("td", {\n        className: "editPollEditBtns"\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_up/* default */.Z, {\n        className: "icon poll-icons disabled"\n      }))), /*#__PURE__*/react.createElement("td", {\n        className: "editPollEditBtns",\n        onClick: function onClick() {\n          // Merge this page with the previous\n          var thisPage = pages[pIndex].questions;\n          var prevPage = pages[pIndex - 1].questions;\n          var newPrev = {\n            questions: [].concat((0,toConsumableArray/* default */.Z)(prevPage), (0,toConsumableArray/* default */.Z)(thisPage))\n          };\n          var newPages = (0,toConsumableArray/* default */.Z)(pages);\n          newPages[pIndex - 1] = newPrev;\n          newPages = [].concat((0,toConsumableArray/* default */.Z)(newPages.slice(0, pIndex)), (0,toConsumableArray/* default */.Z)(newPages.slice(pIndex + 1)));\n          setTimeout(function () {\n            return setPages(newPages);\n          }, 0);\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(trash_can_alt_2/* default */.Z, {\n        className: "icon poll-icons"\n      })))), pageQuestions);\n    });\n  };\n  var optionsForQuestion = function optionsForQuestion() {\n    var options = pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].choices;\n    if (options) {\n      return options.map(function (o, index) {\n        return /*#__PURE__*/react.createElement("tr", {\n          key: index\n        }, /*#__PURE__*/react.createElement("td", null, /*#__PURE__*/react.createElement("input", {\n          className: "pollEditQuestionInput",\n          type: "text",\n          placeholder: t("edit.optionTextPlaceholder"),\n          value: o,\n          onChange: function onChange(e) {\n            var newOptions = (0,toConsumableArray/* default */.Z)(options);\n            newOptions[index] = e.target.value;\n            setQuestionParam("choices", currentQuestion.pIndex, currentQuestion.qIndex, newOptions);\n          }\n        })), /*#__PURE__*/react.createElement("td", {\n          className: "editPollEditBtns",\n          onClick: function onClick() {\n            if (options.length > 1) {\n              var newOptions = [].concat((0,toConsumableArray/* default */.Z)(options.slice(0, index)), (0,toConsumableArray/* default */.Z)(options.slice(index + 1)));\n              setTimeout(function () {\n                return setQuestionParam("choices", currentQuestion.pIndex, currentQuestion.qIndex, newOptions);\n              }, 0);\n            }\n          }\n        }, /*#__PURE__*/react.createElement("i", {\n          className: " ".concat(options.length === 1 ? "disabled" : "")\n        }, /*#__PURE__*/react.createElement(trash_can_alt_2/* default */.Z, {\n          className: "icon poll-icons"\n        }))));\n      });\n    }\n  };\n  var defaultQ = function defaultQ() {\n    return {\n      // Makes each question unique\n      id: Date.now().toString(36) + Math.random().toString(36).substring(2),\n      title: "",\n      type: "text",\n      isRequired: false,\n      options: null,\n      correctAnswer: null,\n      hasNone: null,\n      choices: null\n    };\n  };\n  var getSelectedQType = function getSelectedQType() {\n    var q = pages[currentQuestion.pIndex].questions[currentQuestion.qIndex];\n    return q.inputType || q.type;\n  };\n  var setDropdownAnswerOptions = function setDropdownAnswerOptions() {\n    if (getSelectedQType() === "boolean") {\n      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("option", {\n        value: "none"\n      }, t("edit.selectAnAnswer")), /*#__PURE__*/react.createElement("option", {\n        value: "yes"\n      }, t("common.yes")), /*#__PURE__*/react.createElement("option", {\n        value: "no"\n      }, t("common.no")));\n    } else {\n      var choices = pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].choices;\n      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("option", {\n        value: "none"\n      }, t("edit.selectAnAnswer")), choices.map(function (c, i) {\n        return /*#__PURE__*/react.createElement("option", {\n          key: i,\n          value: c\n        }, c);\n      }));\n    }\n  };\n  var addQuestion = function addQuestion() {\n    var lastPageQuestions = pages[pages.length - 1].questions;\n    lastPageQuestions.push(defaultQ());\n    lastPageQuestions = {\n      questions: lastPageQuestions\n    };\n    var newPages = [].concat((0,toConsumableArray/* default */.Z)(pages.slice(0, pages.length - 1)), [lastPageQuestions]);\n    setPages(newPages);\n  };\n  var addPage = function addPage() {\n    var newPages = [].concat((0,toConsumableArray/* default */.Z)(pages), [{\n      questions: [defaultQ()]\n    }]);\n    setPages(newPages);\n  };\n  var calcHeight = function calcHeight(el) {\n    if (el) {\n      setMenuHeight(el.offsetHeight);\n    } else {\n      setMenuHeight(pollMenu.current.childNodes[0].offsetHeight);\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: "editPollContainer",\n    ref: pollMenu,\n    style: {\n      height: menuHeight\n    }\n  }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'main\',\n    timeout: 500,\n    unmountOnExit: true,\n    classNames: "editPollPrimary",\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("h1", {\n    style: {\n      paddingBottom: "0.5rem",\n      display: "inline-block"\n    }\n  }, t("edit.pollName")), /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: t("edit.pollNamePlaceholder"),\n    className: "editPollNameBox",\n    value: name,\n    onChange: function onChange(e) {\n      props.setData("polls", "customName", e.target.value, props.shape.attrs.id);\n      setName(e.target.value);\n    }\n  }), /*#__PURE__*/react.createElement("table", {\n    className: "editPollQuestionBox"\n  }, /*#__PURE__*/react.createElement("thead", {\n    className: "editPollTableHead"\n  }, /*#__PURE__*/react.createElement("tr", null, /*#__PURE__*/react.createElement("th", null, t("edit.question")), /*#__PURE__*/react.createElement("th", null, t("edit.type")), /*#__PURE__*/react.createElement("th", {\n    className: "editPollStar"\n  }, "*"), /*#__PURE__*/react.createElement("th", null), /*#__PURE__*/react.createElement("th", null))), /*#__PURE__*/react.createElement("tbody", {\n    className: "editPollQuestionsArea"\n  }, renderQuestions())), /*#__PURE__*/react.createElement("button", {\n    onClick: addQuestion,\n    className: "editPollAddQuestionBtn"\n  }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(help/* default */.Z, {\n    className: "icon poll-icons"\n  })), t("edit.addQuestion")), /*#__PURE__*/react.createElement("button", {\n    onClick: addPage,\n    className: "editPollAddQuestionBtn",\n    style: {\n      marginLeft: "10px"\n    }\n  }, /*#__PURE__*/react.createElement("i", {\n    className: "fas fa-scroll"\n  }), t("edit.addNewPage")))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n    in: activeMenu === \'settings\',\n    timeout: 500,\n    unmountOnExit: true,\n    classNames: "editPollSecondary",\n    onEnter: calcHeight\n  }, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      setActiveMenu("main");\n    },\n    className: "editPollBackButton"\n  }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n    className: "icon poll-icons"\n  }))), /*#__PURE__*/react.createElement("h1", {\n    style: {\n      display: "inline"\n    }\n  }, t("edit.editQuestionX", {\n    name: pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].title || pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].name\n  })), /*#__PURE__*/react.createElement("table", {\n    style: {\n      marginTop: "10px",\n      display: "table"\n    },\n    className: "editPollQuestionBox"\n  }, /*#__PURE__*/react.createElement("tbody", {\n    className: "editPollQuestionsArea"\n  }, optionsForQuestion())), pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].choices && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("button", {\n    onClick: function onClick() {\n      var options = pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].choices;\n      var newOptions = [].concat((0,toConsumableArray/* default */.Z)(options), [""]);\n      setTimeout(setQuestionParam("choices", currentQuestion.pIndex, currentQuestion.qIndex, newOptions), 0);\n    },\n    className: "editPollAddQuestionBtn"\n  }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(page/* default */.Z, {\n    className: "icon poll-icons"\n  })), t("edit.addOption")), /*#__PURE__*/react.createElement("hr", null)), /*#__PURE__*/react.createElement("div", {\n    style: {\n      width: "100%",\n      textAlign: "center"\n    }\n  }, t("edit.correctAnswerBlankAccepted"), ["text"].includes(getSelectedQType()) && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("p", {\n    style: {\n      fontSize: "0.8em"\n    }\n  }, t("edit.correctAnswerSeparateByComma")), /*#__PURE__*/react.createElement("input", {\n    className: "editPollAnswerBox",\n    type: "text",\n    placeholder: t("edit.answerValuePlaceholder"),\n    value: pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].correctAnswer ? pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].correctAnswer : "",\n    onChange: function onChange(e) {\n      var answer = e.target.value.split(",").map(function (val) {\n        return val.trimStart();\n      });\n      setQuestionParam("correctAnswer", currentQuestion.pIndex, currentQuestion.qIndex, answer);\n    }\n  })), ["checkbox"].includes(getSelectedQType()) && /*#__PURE__*/react.createElement(react.Fragment, null, pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].choices.map(function (choice) {\n    return /*#__PURE__*/react.createElement("div", {\n      className: "pollCorrectAnswerCheckboxContainer"\n    }, /*#__PURE__*/react.createElement("input", {\n      type: "checkbox",\n      id: choice,\n      name: "pollCorrectAnswerCheckbox",\n      value: choice,\n      onChange: function onChange() {\n        var answer = Array.from(document.getElementsByClassName("pollCorrectAnswerCheckboxContainer")).map(function (box) {\n          var input = box.firstChild.value;\n          var checked = box.firstChild.checked;\n          if (checked) {\n            return input;\n          } else {\n            return null;\n          }\n        }).filter(function (obj) {\n          return obj !== null;\n        });\n        setQuestionParam("correctAnswer", currentQuestion.pIndex, currentQuestion.qIndex, answer);\n      }\n    }), /*#__PURE__*/react.createElement("label", {\n      for: choice\n    }, choice), /*#__PURE__*/react.createElement("br", null));\n  })), ["dropdown", "boolean", "radiogroup"].includes(getSelectedQType()) && /*#__PURE__*/react.createElement("select", {\n    className: "editPollAnswerBox",\n    value: pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].correctAnswer ? pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].correctAnswer : "",\n    onChange: function onChange(e) {\n      setQuestionParam("correctAnswer", currentQuestion.pIndex, currentQuestion.qIndex, e.target.value);\n    }\n  }, setDropdownAnswerOptions()), ["date"].includes(getSelectedQType()) && /*#__PURE__*/react.createElement("input", {\n    className: "editPollAnswerBox",\n    type: "date",\n    min: "",\n    max: "",\n    value: pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].correctAnswer ? pages[currentQuestion.pIndex].questions[currentQuestion.qIndex].correctAnswer : "",\n    onChange: function onChange(e) {\n      setQuestionParam("correctAnswer", currentQuestion.pIndex, currentQuestion.qIndex, e.target.value);\n    }\n  })))));\n};\n/* harmony default export */ var components_Dropdown_DropdownEditPoll = (DropdownEditPoll_DropdownEditPoll);\n// EXTERNAL MODULE: ./node_modules/i18next/dist/esm/i18next.js + 1 modules\nvar i18next = __webpack_require__(68752);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownEditObject.jsx\n\n\n\nfunction DropdownEditObject_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction DropdownEditObject_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? DropdownEditObject_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : DropdownEditObject_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar DEFAULT_FONT_SIZE = 50;\nvar DropdownEditObject_DropdownEditObject = function DropdownEditObject(props) {\n  var _useState = (0,react.useState)(\'main\'),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    activeMenu = _useState2[0],\n    setActiveMenu = _useState2[1];\n  var dropdownRef = (0,react.useRef)(null);\n  var _useState3 = (0,react.useState)("black"),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    fillColor = _useState4[0],\n    setFillColor = _useState4[1];\n  var _useState5 = (0,react.useState)("black"),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    strokeColor = _useState6[0],\n    setStrokeColor = _useState6[1];\n  var _useState7 = (0,react.useState)("white"),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    backgroundColor = _useState8[0],\n    setBackgroundColor = _useState8[1];\n  var _React$useState = react.useState(0),\n    _React$useState2 = (0,slicedToArray/* default */.Z)(_React$useState, 2),\n    strokeWidth = _React$useState2[0],\n    setStrokeWidth = _React$useState2[1];\n  var _React$useState3 = react.useState(1),\n    _React$useState4 = (0,slicedToArray/* default */.Z)(_React$useState3, 2),\n    opacity = _React$useState4[0],\n    setOpacity = _React$useState4[1];\n  var _React$useState5 = react.useState("Belgrano"),\n    _React$useState6 = (0,slicedToArray/* default */.Z)(_React$useState5, 2),\n    font = _React$useState6[0],\n    setFont = _React$useState6[1];\n  var _useState9 = (0,react.useState)(DEFAULT_FONT_SIZE),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    fontSize = _useState10[0],\n    setFontSize = _useState10[1];\n  var _useState11 = (0,react.useState)(props.left ? {\n      right: "110px"\n    } : {\n      left: "155px"\n    }),\n    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n    leftOrRight = _useState12[0],\n    setLeftOrRight = _useState12[1];\n  var _useState13 = (0,react.useState)(true),\n    _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n    loading = _useState14[0],\n    setLoading = _useState14[1];\n  var _useState15 = (0,react.useState)(props.getObj(props.selectedShapeName, false, false)),\n    _useState16 = (0,slicedToArray/* default */.Z)(_useState15, 2),\n    shape = _useState16[0],\n    setShape = _useState16[1];\n  var _useState17 = (0,react.useState)(props.grouped ? props.getObjGroup() : props.getObjState()),\n    _useState18 = (0,slicedToArray/* default */.Z)(_useState17, 2),\n    objState = _useState18[0],\n    setObjState = _useState18[1];\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  var _useState19 = (0,react.useState)(""),\n    _useState20 = (0,slicedToArray/* default */.Z)(_useState19, 2),\n    texts = _useState20[0],\n    setTexts = _useState20[1];\n  var _useState21 = (0,react.useState)(objState.style ? objState.varName : []),\n    _useState22 = (0,slicedToArray/* default */.Z)(_useState21, 2),\n    vTexts = _useState22[0],\n    setVTexts = _useState22[1];\n  var _useState23 = (0,react.useState)(props.title),\n    _useState24 = (0,slicedToArray/* default */.Z)(_useState23, 2),\n    title = _useState24[0],\n    setTitle = _useState24[1];\n  var _useState25 = (0,react.useState)(0),\n    _useState26 = (0,slicedToArray/* default */.Z)(_useState25, 2),\n    index = _useState26[0],\n    setIndex = _useState26[1];\n  var _useState27 = (0,react.useState)(objState.style ? objState.varValue : []),\n    _useState28 = (0,slicedToArray/* default */.Z)(_useState27, 2),\n    vTextsV = _useState28[0],\n    setVTextsV = _useState28[1];\n  var _useState29 = (0,react.useState)(objState.style ? objState.varOne : ""),\n    _useState30 = (0,slicedToArray/* default */.Z)(_useState29, 2),\n    varOne = _useState30[0],\n    setVarOne = _useState30[1];\n  var _useState31 = (0,react.useState)(objState.style ? objState.varTwo : ""),\n    _useState32 = (0,slicedToArray/* default */.Z)(_useState31, 2),\n    varTwo = _useState32[0],\n    setVarTwo = _useState32[1];\n  var _useState33 = (0,react.useState)(false),\n    _useState34 = (0,slicedToArray/* default */.Z)(_useState33, 2),\n    showFill = _useState34[0],\n    setShowFill = _useState34[1];\n  var _useState35 = (0,react.useState)(false),\n    _useState36 = (0,slicedToArray/* default */.Z)(_useState35, 2),\n    showStroke = _useState36[0],\n    setShowStroke = _useState36[1];\n  var _useState37 = (0,react.useState)(false),\n    _useState38 = (0,slicedToArray/* default */.Z)(_useState37, 2),\n    showBackground = _useState38[0],\n    setShowBackground = _useState38[1];\n\n  // Input Settings\n  var DEFAULT_INPUT_FILL = "#e4e4e4";\n  var DEFAULT_INPUT_STROKE_W = 2;\n\n  //const DEFAULT_INPUT_STROKE = "rgb(44, 44, 44)";\n  var _useState39 = (0,react.useState)(objState.style ? objState.style.backgroundColor ? objState.style.backgroundColor : DEFAULT_INPUT_FILL : DEFAULT_INPUT_FILL),\n    _useState40 = (0,slicedToArray/* default */.Z)(_useState39, 2),\n    inputFillColor = _useState40[0],\n    setInputFillColor = _useState40[1];\n  var _useState41 = (0,react.useState)(objState ? objState.style ? objState.style.borderWidth : DEFAULT_INPUT_STROKE_W : DEFAULT_INPUT_STROKE_W),\n    _useState42 = (0,slicedToArray/* default */.Z)(_useState41, 2),\n    inputStrokeWidth = _useState42[0],\n    setInputStrokeWidth = _useState42[1];\n  var _useState43 = (0,react.useState)("fill"),\n    _useState44 = (0,slicedToArray/* default */.Z)(_useState43, 2),\n    inputCurrentOptions = _useState44[0],\n    setInputCurrentOptions = _useState44[1];\n  var calcTopOffset = function calcTopOffset() {\n    var element = document.getElementsByClassName("dropdownedit")[0];\n    if (element) {\n      var dropHeight = element.clientHeight;\n      var contextHeight = 300;\n      var thresholdPx = dropHeight - contextHeight;\n      if (props.top < thresholdPx) {\n        return thresholdPx / 2;\n      }\n    }\n    return null;\n  };\n  setTimeout(function () {\n    setTopOffset(calcTopOffset());\n  }, 10);\n  var _useState45 = (0,react.useState)(null),\n    _useState46 = (0,slicedToArray/* default */.Z)(_useState45, 2),\n    topOffset = _useState46[0],\n    setTopOffset = _useState46[1];\n  (0,react.useEffect)(function () {\n    if (Array.isArray(objState)) {\n      setTexts(objState.map(function (obj) {\n        return obj.varName;\n      }));\n      setVTexts(objState.map(function (obj) {\n        return obj.varName;\n      }));\n      setVTextsV(objState.map(function (obj) {\n        return obj.varValue;\n      }));\n      setVarOne(objState.map(function (obj) {\n        return obj.varOne;\n      }));\n      setVarTwo(objState.map(function (obj) {\n        return obj.varTwo;\n      }));\n      // setInputFillColor(objState.map((obj) => obj.style.backgroundColor))\n      // setInputStrokeWidth(objState.map((obj) => obj.style.borderWidth))\n      if (props.grouped) {\n        var shapeNames = [];\n        var editTitleOptions = ["text", "poll", "connect4", "tic", "html", "input", "timer"];\n        objState.map(function (obj) {\n          shapeNames.push(obj.id.replace(/\\d+/g, \'\'));\n        });\n        var allEqual = function allEqual(arr) {\n          return arr.every(function (v) {\n            return v === arr[0];\n          });\n        };\n        if (allEqual(shapeNames) && editTitleOptions.includes(shapeNames[0].slice(0, -1))) {\n          setTitle(shapeNames[0].slice(0, -1));\n        } else {\n          setTitle("shape");\n        }\n      }\n      setObjState(objState[0]);\n    }\n    if (!objState.volume) {\n      props.updateObjState({\n        volume: 1\n      });\n      setObjState(function (prev) {\n        return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n          volume: 1\n        });\n      });\n    }\n    if (title === "shape") {\n      setOpacity(shape.attrs.opacity ? shape.attrs.opacity : 1);\n      setStrokeColor(shape.attrs.stroke);\n      setFillColor(shape.attrs.fill);\n      setStrokeWidth(shape.attrs.strokeWidth);\n    } else if (title === "text") {\n      if (props.font) {\n        setFillColor(props.font.attrs.fill);\n        setOpacity(props.font.attrs.opacity);\n        setFont(props.font.attrs.fontFamily);\n        setFontSize(props.font.attrs.fontSize);\n      } else {\n        console.error("ERROR: No Font.");\n      }\n    } else if (title === "Edit Poll") {}\n    setLoading(false);\n  }, []);\n  (0,react.useEffect)(function () {\n    // setTexts([])\n  }, [activeMenu]);\n\n  // Slider Styles\n  var railStyle = {\n    height: 4,\n    marginTop: 14\n  };\n  var handleStyle = {\n    height: 28,\n    width: 28,\n    marginTop: 0,\n    backgroundColor: "black",\n    border: 0\n  };\n  var trackStyle = {\n    marginTop: 14,\n    background: "red"\n  };\n  var DropdownItem = function DropdownItem(props) {\n    return /*#__PURE__*/react.createElement("div", {\n      className: "menu-itemedit",\n      onClick: function onClick() {\n        return props.goToMenu && setActiveMenu(props.goToMenu);\n      }\n    }, /*#__PURE__*/react.createElement("span", {\n      className: "icon-buttonedit"\n    }, props.leftIcon), props.children, /*#__PURE__*/react.createElement("span", {\n      className: "icon-righedit"\n    }, props.rightIcon));\n  };\n  var handleChangeF = function handleChangeF(e) {\n    setFillColor(e.hex);\n    props.handleFillColor(e);\n  };\n  var handleChangeS = function handleChangeS(e) {\n    setStrokeColor(e.hex);\n    props.handleStrokeColor(e);\n  };\n  var handleChangeB = function handleChangeB(e) {\n    setBackgroundColor(e.hex);\n    props.handleBackgroundColor(e);\n  };\n  var onSliderChange = function onSliderChange(e) {\n    var newStrokeWidth = parseFloat(e);\n    setStrokeWidth(newStrokeWidth);\n    props.handleWidth(newStrokeWidth);\n  };\n  var onSliderChangeOpacity = function onSliderChangeOpacity(e) {\n    var newOpacity = parseFloat(e);\n    setOpacity(newOpacity);\n    props.handleOpacity(newOpacity);\n  };\n  var onSliderChangeV = function onSliderChangeV(e) {\n    props.updateObjState({\n      volume: e\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        volume: e\n      });\n    });\n  };\n  var handleSize = function handleSize(e) {\n    setFontSize(e.target.value);\n    props.handleSize(e.target.value);\n  };\n  var debounceObjState = (0,react.useCallback)(lodash_debounce_default()(function (state) {\n    return props.updateObjState(state);\n  }, 100), [] // will be created only once initially\n  );\n\n  var handleVarLabel = function handleVarLabel(val) {\n    debounceObjState({\n      label: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        label: val\n      });\n    });\n  };\n  var handleInputStyle = function handleInputStyle(type, val) {\n    var style = DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, objState.style), {}, (0,defineProperty/* default */.Z)({}, type, val));\n    setObjState(function (prev) {\n      debounceObjState({\n        style: DropdownEditObject_objectSpread({}, style)\n      });\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        style: DropdownEditObject_objectSpread({}, style)\n      });\n    });\n  };\n  var handleVarName = function handleVarName(val) {\n    debounceObjState({\n      varName: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        varName: val\n      });\n    });\n  };\n  var handleRadio = function handleRadio(val) {\n    debounceObjState({\n      amount: val\n    });\n    props.updateObjState({\n      amount: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        amount: val\n      });\n    });\n  };\n  var handleButtonVariable = function handleButtonVariable(val) {\n    debounceObjState({\n      variableAmount: val\n    });\n    props.updateObjState({\n      variableAmount: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        variableAmount: val\n      });\n    });\n  };\n  var handleButtonCondition = function handleButtonCondition(val) {\n    debounceObjState({\n      conditionAmount: val\n    });\n    props.updateObjState({\n      conditionAmount: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        conditionAmount: val\n      });\n    });\n  };\n  var handleVarEnable = function handleVarEnable(val) {\n    props.updateObjState({\n      varEnable: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        varEnable: val\n      });\n    });\n  };\n  var handleVarInterval = function handleVarInterval(val) {\n    props.updateObjState({\n      varInterval: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        varInterval: val\n      });\n    });\n  };\n  var handleVarType = function handleVarType(val) {\n    props.updateObjState({\n      varType: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        varType: val\n      });\n    });\n  };\n  var handleIFrameURL = function handleIFrameURL(val) {\n    debounceObjState({\n      iframeSrc: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        iframeSrc: val\n      });\n    });\n  };\n  var handleHTML = function handleHTML(val) {\n    var sanitized = purify_default().sanitize(val);\n    debounceObjState({\n      htmlValue: sanitized\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        htmlValue: val\n      });\n    });\n  };\n  var handleWidth = function handleWidth(val) {\n    props.updateObjState({\n      containerWidth: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        containerWidth: val\n      });\n    });\n  };\n  var handleHeight = function handleHeight(val) {\n    props.updateObjState({\n      containerHeight: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        containerHeight: val\n      });\n    });\n  };\n  var handleProperty = function handleProperty(val, prop) {\n    props.updateObjState((0,defineProperty/* default */.Z)({}, prop, val));\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, (0,defineProperty/* default */.Z)({}, prop, val));\n    });\n  };\n  var handleTimeLimit = function handleTimeLimit(num) {\n    var correct = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var val = num;\n    if (correct && (isNaN(num) || parseInt(num) < 1 || num.length == 0)) {\n      val = 1;\n    }\n    props.updateObjState({\n      timeLimit: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        timeLimit: val\n      });\n    });\n  };\n  var populateRadio = function populateRadio() {\n    var list = [];\n    var value = 0;\n    for (var i = 0; i < (objState !== null && objState !== void 0 && objState.amount ? objState === null || objState === void 0 ? void 0 : objState.amount : 3); i++) {\n      list.push( /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        onChange: function onChange(e) {\n          return handleRadioText(e.target);\n        },\n        value: objState !== null && objState !== void 0 && objState.radioText ? objState === null || objState === void 0 ? void 0 : objState.radioText[i] : texts[i],\n        id: i,\n        key: i,\n        placeholder: t("edit.radioText")\n      })));\n    }\n    return list;\n  };\n  var handleRadioText = function handleRadioText(e) {\n    var arr = [];\n    for (var i = 0; i < (objState !== null && objState !== void 0 && objState.amount ? objState === null || objState === void 0 ? void 0 : objState.amount : 0); i++) {\n      if (e.id != i) {\n        arr[i] = objState !== null && objState !== void 0 && objState.radioText ? objState === null || objState === void 0 ? void 0 : objState.radioText[i] : texts[i];\n      }\n    }\n    arr[e.id] = e.value;\n    props.updateObjState({\n      radioText: arr\n    });\n    debounceObjState({\n      radioText: arr\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        radioText: arr\n      });\n    });\n  };\n  var handleObjectName = function handleObjectName(val) {\n    props.updateObjState({\n      name: val\n    });\n    debounceObjState({\n      name: val\n    });\n    setObjState(function (prev) {\n      return DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, prev), {}, {\n        name: val\n      });\n    });\n  };\n  var newTabInputSettings = function newTabInputSettings(tab) {\n    console.log(objState);\n    setInputStrokeWidth(objState.style && objState.style.borderWidth ? parseInt(objState.style.borderWidth) : DEFAULT_INPUT_STROKE_W);\n    setInputFillColor(tab === "fill" ? objState.style && objState.style.backgroundColor : tab === "stroke" ? objState.style && objState.style.borderColor : DEFAULT_INPUT_FILL);\n    setInputCurrentOptions(tab);\n  };\n  var getThemesBoxes = function getThemesBoxes() {\n    console.log(props.themes);\n    return props.themes.map(function (theme, i) {\n      return /*#__PURE__*/react.createElement("div", {\n        className: "theme-box",\n        key: i,\n        onClick: function onClick() {\n          setIndex(i);\n          if (showFill) handleChangeF({\n            hex: theme\n          });else if (showStroke) handleChangeS({\n            hex: theme\n          });\n        }\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "theme-box-color " + (i === index ? "selected" : ""),\n        style: {\n          backgroundColor: theme\n        }\n      }));\n    });\n  };\n  if (!loading) {\n    if (title === "shape") {\n      /* Edit a Shape Object */\n      return /*#__PURE__*/react.createElement("div", {\n        className: "dropdownedit paddingRight fixed-anim-2",\n        ref: dropdownRef,\n        style: DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, leftOrRight), {}, {\n          transform: "translateY(".concat(topOffset, "px)")\n        })\n      }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'main\',\n        timeout: 500,\n        classNames: "edit-menu-primary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit"\n      }, /*#__PURE__*/react.createElement("input", {\n        id: "menuedit-name",\n        type: "text",\n        onChange: function onChange(e) {\n          return handleObjectName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.name,\n        placeholder: objState === null || objState === void 0 ? void 0 : objState.id\n      }), !((objState === null || objState === void 0 ? void 0 : objState.id).includes("videos") || (objState === null || objState === void 0 ? void 0 : objState.id).includes("audios")) && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-color-container"\n      }, !props.selectedShapeName.includes("lines") && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n        className: "color-button-container"\n      }, /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          setShowFill(!showFill), setShowStroke(false);\n        },\n        className: showFill ? \'active\' : \'\'\n      }, "Fill Color"), /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          setShowStroke(!showStroke), setShowFill(false);\n        },\n        className: showStroke ? \'active\' : \'\'\n      }, "Stroke Color")), (showFill || showStroke) && /*#__PURE__*/react.createElement("div", {\n        className: "theme-boxes-dropdown"\n      }, getThemesBoxes()), showFill && /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        color: fillColor,\n        onChangeComplete: handleChangeF,\n        className: "color-picker"\n      })), showStroke && /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        className: "color-picker",\n        color: strokeColor,\n        onChangeComplete: handleChangeS\n      })), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "slider-container"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.strokeWidth")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        value: Math.round(strokeWidth),\n        onChange: function onChange(e) {\n          return onSliderChange(e.target.value);\n        }\n      })), /*#__PURE__*/react.createElement(rc_slider_es/* default */.ZP, {\n        min: 0,\n        max: 100,\n        step: 0.01,\n        className: "slider",\n        value: strokeWidth,\n        onChange: onSliderChange,\n        railStyle: railStyle,\n        handleStyle: handleStyle,\n        trackStyle: trackStyle\n      })), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "slider-container"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.opacity")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        value: opacity,\n        onChange: function onChange(e) {\n          return onSliderChangeOpacity(e.target.value);\n        }\n      })), /*#__PURE__*/react.createElement(rc_slider_es/* default */.ZP, {\n        className: "slider",\n        value: opacity,\n        min: 0,\n        max: 1,\n        step: 0.01,\n        onChange: onSliderChangeOpacity,\n        railStyle: railStyle,\n        handleStyle: handleStyle,\n        trackStyle: trackStyle\n      }))), (objState === null || objState === void 0 ? void 0 : objState.id).includes("videos") || (objState === null || objState === void 0 ? void 0 : objState.id).includes("audios") ? /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("b", null, t("edit.volume"), /*#__PURE__*/react.createElement(rc_slider_es/* default */.ZP, {\n        className: "slider",\n        value: objState === null || objState === void 0 ? void 0 : objState.volume,\n        min: 0,\n        max: 1,\n        step: 0.01,\n        onChange: onSliderChangeV,\n        railStyle: railStyle,\n        handleStyle: handleStyle,\n        trackStyle: trackStyle\n      })), /*#__PURE__*/react.createElement("br", null)), /*#__PURE__*/react.createElement("div", {\n        className: "dropdowncheckbox"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.autoStart),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.autoStart), \'autoStart\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.autoStart"))), /*#__PURE__*/react.createElement("div", {\n        className: "dropdowncheckbox"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.loop),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.loop), \'loop\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.loop")))) : /*#__PURE__*/react.createElement("div", null, " "), /*#__PURE__*/react.createElement("div", {\n        className: "dropdowncheckbox"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.draggable),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.draggable), \'draggable\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.draggable"))), /*#__PURE__*/react.createElement("div", {\n        className: "dropdowncheckbox"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.anchor),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.anchor), \'anchor\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.setAsAnchorPoint"))))), /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'shapes\',\n        timeout: 500,\n        classNames: "edit-menu-secondary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit"\n      }, /*#__PURE__*/react.createElement(DropdownItem, {\n        goToMenu: "main",\n        leftIcon: /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(arrow_left/* default */.Z, {\n          id: "iconsedit"\n        }))\n      }, /*#__PURE__*/react.createElement("h2", null, "COLOUR!")))));\n    } else if (title === "text") {\n      /* Edit a Text Object */\n      return /*#__PURE__*/react.createElement("div", {\n        className: "dropdownedit paddingRight fixed-anim-2",\n        ref: dropdownRef,\n        style: DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, leftOrRight), {}, {\n          transform: "translateY(".concat(topOffset, "px)")\n        })\n      }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'main\',\n        timeout: 500,\n        classNames: "edit-menu-primary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit"\n      }, /*#__PURE__*/react.createElement("input", {\n        id: "menuedit-name",\n        type: "text",\n        onChange: function onChange(e) {\n          return handleObjectName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.name,\n        placeholder: objState === null || objState === void 0 ? void 0 : objState.id\n      }), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-color-container"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "color-button-container text"\n      }, /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          setShowFill(!showFill), setShowStroke(false), setShowBackground(false);\n        },\n        className: showFill ? \'active\' : \'\'\n      }, "Fill Color"), /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          setShowBackground(!showBackground), setShowFill(false), setShowStroke(false);\n        },\n        className: showBackground ? \'active\' : \'\'\n      }, "Background Color"), /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          setShowStroke(!showStroke), setShowFill(false), setShowBackground(false);\n        },\n        className: showStroke ? \'active\' : \'\'\n      }, "Stroke Color")), showFill && /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        color: fillColor,\n        onChangeComplete: handleChangeF,\n        className: "color-picker"\n      }), showBackground && /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        className: "color-picker",\n        color: backgroundColor,\n        onChangeComplete: handleChangeB\n      }), showStroke && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        className: "color-picker",\n        color: strokeColor,\n        onChangeComplete: handleChangeS\n      }), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "slider-container"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.strokeWidth")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        value: Math.round(strokeWidth),\n        onChange: function onChange(e) {\n          return onSliderChange(e.target.value);\n        }\n      })), /*#__PURE__*/react.createElement(rc_slider_es/* default */.ZP, {\n        min: 0,\n        max: 100,\n        step: 0.01,\n        className: "slider",\n        value: strokeWidth,\n        onChange: onSliderChange,\n        railStyle: railStyle,\n        handleStyle: handleStyle,\n        trackStyle: trackStyle\n      })))), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("b", null, t("edit.textFont")), /*#__PURE__*/react.createElement("b", {\n        id: "fontpick"\n      }, font && /*#__PURE__*/react.createElement(FontPicker_es/* default */.Z, {\n        apiKey: "AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU",\n        activeFontFamily: font,\n        onChange: function onChange(nextFont) {\n          setFont(nextFont.family);\n          props.handleFont(nextFont.family);\n        }\n      }))), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "slider-container"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.opacity")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        value: opacity,\n        onChange: function onChange(e) {\n          return onSliderChangeOpacity(e.target.value);\n        }\n      })), /*#__PURE__*/react.createElement(rc_slider_es/* default */.ZP, {\n        className: "slider",\n        value: opacity,\n        min: 0,\n        max: 1,\n        step: 0.01,\n        onChange: onSliderChangeOpacity,\n        railStyle: railStyle,\n        handleStyle: handleStyle,\n        trackStyle: trackStyle\n      })), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("b", null, t("edit.textSize")), /*#__PURE__*/react.createElement("input", {\n        id: "sizeinput",\n        type: "text",\n        pattern: "[0-9]*",\n        onChange: handleSize,\n        value: fontSize\n      })))));\n    } else if (title === "poll") {\n      return /*#__PURE__*/react.createElement("div", {\n        className: "dropdownedit",\n        ref: dropdownRef,\n        style: DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, leftOrRight), {}, {\n          transform: "translateY(".concat(topOffset, "px)")\n        })\n      }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'main\',\n        timeout: 500,\n        classNames: "edit-menu-primary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit"\n      }, /*#__PURE__*/react.createElement(components_Dropdown_DropdownEditPoll, (0,esm_extends/* default */.Z)({\n        setData: props.setCustomObjData,\n        shape: shape,\n        title: t("edit.pollEdit")\n      }, props)), /*#__PURE__*/react.createElement("p", null, t("edit.variableNameToSet")), /*#__PURE__*/react.createElement("select", {\n        onChange: function onChange(e) {\n          return handleVarName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.varName\n      }, props.globalVars.map(function (data) {\n        return /*#__PURE__*/react.createElement("option", {\n          value: Object.keys(data)\n        }, Object.keys(data));\n      })))));\n    } else if (title === "timer") {\n      return /*#__PURE__*/react.createElement("div", {\n        className: "dropdownedit timer",\n        ref: dropdownRef,\n        style: DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, leftOrRight), {}, {\n          transform: "translateY(".concat(topOffset, "px)")\n        })\n      }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'main\',\n        timeout: 500,\n        classNames: "edit-menu-primary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit htmledit"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.timerEdit")), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.controls),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.controls), \'controls\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.enableControls"))), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !(objState !== null && objState !== void 0 && objState.invisible),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.invisible), \'invisible\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.visible"))), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.timeLimit),\n        onChange: function onChange() {\n          return handleTimeLimit(!(objState !== null && objState !== void 0 && objState.timeLimit) ? 60 : null);\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.timerCountDown"))), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: objState === null || objState === void 0 ? void 0 : objState.sync,\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.sync), \'sync\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.variableSync"))), !!(objState !== null && objState !== void 0 && objState.timeLimit) && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("p", null, t("edit.timeLimitSeconds")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        onChange: function onChange(e) {\n          return handleTimeLimit(e.target.value, true);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.timeLimit,\n        placeholder: "Time limit"\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.timerFinishedVariable")), /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        onChange: function onChange(e) {\n          return handleVarName(e.target.value);\n        },\n        value: (objState === null || objState === void 0 ? void 0 : objState.varName) || "",\n        placeholder: "Variable name"\n      })), /*#__PURE__*/react.createElement("p", null, t("edit.timerStartVariable")), /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        onChange: function onChange(e) {\n          return handleVarEnable(e.target.value);\n        },\n        value: (objState === null || objState === void 0 ? void 0 : objState.varEnable) || "",\n        placeholder: "Variable name"\n      }))));\n    } else if (title === "html") {\n      return /*#__PURE__*/react.createElement("div", {\n        className: "dropdownedit html",\n        ref: dropdownRef,\n        style: DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, leftOrRight), {}, {\n          transform: "translateY(".concat(topOffset, "px)")\n        })\n      }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'main\',\n        timeout: 500,\n        classNames: "edit-menu-primary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit htmledit"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.htmlEdit")), /*#__PURE__*/react.createElement("div", {\n        className: "htmlwhinput"\n      }, /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, t("edit.width")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        onChange: function onChange(e) {\n          return handleWidth(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.containerWidth,\n        placeholder: "Auto"\n      })), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("p", null, t("edit.height")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        onChange: function onChange(e) {\n          return handleHeight(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.containerHeight,\n        placeholder: "Auto"\n      }))), /*#__PURE__*/react.createElement("p", null, t("edit.htmlContent")), /*#__PURE__*/react.createElement("textarea", {\n        className: "htmltextarea",\n        onChange: function onChange(e) {\n          return handleHTML(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.htmlValue\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.iframeURL")), /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        onChange: function onChange(e) {\n          return handleIFrameURL(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.iframeSrc,\n        placeholder: "URL"\n      }), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: objState === null || objState === void 0 ? void 0 : objState.varEnable,\n        onChange: function onChange() {\n          return handleVarEnable(!(objState !== null && objState !== void 0 && objState.varEnable));\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.listenToMessages"))), /*#__PURE__*/react.createElement("p", null, t("edit.variablesToSendCommaSeparated")), /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        onChange: function onChange(e) {\n          return handleVarName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.varName\n      }), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: objState === null || objState === void 0 ? void 0 : objState.varInterval,\n        onChange: function onChange() {\n          return handleVarInterval(!(objState !== null && objState !== void 0 && objState.varInterval));\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.sendAtIntervals"))), /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!(objState !== null && objState !== void 0 && objState.sync),\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.sync), \'sync\');\n        },\n        value: true\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.variableSync"))))));\n    } else if (title === "input") {\n      return /*#__PURE__*/react.createElement("div", {\n        className: "dropdownedit input",\n        ref: dropdownRef,\n        style: DropdownEditObject_objectSpread(DropdownEditObject_objectSpread({}, leftOrRight), {}, {\n          transform: "translateY(".concat(topOffset, "px)")\n        })\n      }, /*#__PURE__*/react.createElement(CSSTransition/* default */.Z, {\n        in: activeMenu === \'main\',\n        timeout: 500,\n        classNames: "edit-menu-primary",\n        unmountOnExit: true\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "menuedit htmledit"\n      }, /*#__PURE__*/react.createElement("input", {\n        id: "menuedit-name",\n        type: "text",\n        onChange: function onChange(e) {\n          return handleVarName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.varName,\n        placeholder: objState === null || objState === void 0 ? void 0 : objState.id\n      }), objState.varType !== "checkbox" && /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-color-container"\n      }, /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n        className: "color-button-container text"\n      }, /*#__PURE__*/react.createElement("button", {\n        className: "".concat(inputCurrentOptions === "fill" ? "editInputOptionSelected" : ""),\n        onClick: function onClick() {\n          newTabInputSettings("fill");\n        }\n      }, t("edit.colorFill")), /*#__PURE__*/react.createElement("button", {\n        className: "".concat(inputCurrentOptions === "stroke" ? "editInputOptionSelected" : ""),\n        onClick: function onClick() {\n          return newTabInputSettings("stroke");\n        }\n      }, t("edit.colorStroke")), /*#__PURE__*/react.createElement("button", {\n        className: "".concat(inputCurrentOptions === "text" ? "editInputOptionSelected" : ""),\n        onClick: function onClick() {\n          return newTabInputSettings("text");\n        }\n      }, t("edit.shape.simpleText"))), inputCurrentOptions === "fill" && /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        className: "compactPickerEditInput",\n        color: inputFillColor,\n        disableAlpha: true,\n        onChange: function onChange(color) {\n          setInputFillColor(color.hex);\n          handleInputStyle("backgroundColor", color.hex);\n        }\n      }), inputCurrentOptions === "stroke" && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        className: "compactPickerEditInput",\n        color: inputFillColor,\n        disableAlpha: true,\n        onChange: function onChange(color) {\n          setInputFillColor(color.hex);\n          handleInputStyle("borderColor", color.hex);\n        }\n      }), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "slider-container"\n      }, /*#__PURE__*/react.createElement("h1", null, t("edit.strokeWidth")), /*#__PURE__*/react.createElement("input", {\n        type: "number",\n        value: Math.round(inputStrokeWidth),\n        onChange: function onChange(e) {\n          setInputStrokeWidth(e.target.value);\n          handleInputStyle("borderWidth", e.target.value + "px");\n        }\n      })), /*#__PURE__*/react.createElement(rc_slider_es/* default */.ZP, {\n        min: 0,\n        max: 100,\n        step: 0.01,\n        className: "slider",\n        value: inputStrokeWidth,\n        onChange: function onChange(e) {\n          setInputStrokeWidth(e);\n          handleInputStyle("borderWidth", e + "px");\n        },\n        railStyle: railStyle,\n        handleStyle: handleStyle,\n        trackStyle: trackStyle\n      }))), inputCurrentOptions === "text" && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(es/* ChromePicker */.AI, {\n        className: "compactPickerEditInput",\n        color: inputFillColor,\n        disableAlpha: true,\n        onChange: function onChange(color) {\n          setInputFillColor(color.hex);\n          handleInputStyle("color", color.hex);\n        }\n      })))), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("p", null, t("edit.inputType")), /*#__PURE__*/react.createElement("select", {\n        name: "inputtype",\n        onChange: function onChange(e) {\n          return handleVarType(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.varType\n      }, /*#__PURE__*/react.createElement("option", {\n        value: "checkbox"\n      }, t("edit.input.checkbox")), /*#__PURE__*/react.createElement("option", {\n        value: "text"\n      }, t("edit.input.textbox")), /*#__PURE__*/react.createElement("option", {\n        value: "button"\n      }, t("edit.input.button")), /*#__PURE__*/react.createElement("option", {\n        value: "radio"\n      }, t("edit.input.radio")), /*#__PURE__*/react.createElement("option", {\n        value: "variable"\n      }, t("edit.input.variable")))), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "htmliframeinput"\n      }, /*#__PURE__*/react.createElement("input", {\n        type: "checkbox",\n        checked: !!objState.sync,\n        onChange: function onChange() {\n          return handleProperty(!(objState !== null && objState !== void 0 && objState.sync), \'sync\');\n        }\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.variableSync")))), (objState === null || objState === void 0 ? void 0 : objState.varType) !== "button" && /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("p", null, t("edit.variableNameToSet")), /*#__PURE__*/react.createElement("select", {\n        onChange: function onChange(e) {\n          return handleVarName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.varName\n      }, props.globalVars.map(function (data) {\n        return /*#__PURE__*/react.createElement("option", {\n          value: Object.keys(data)\n        }, Object.keys(data));\n      }))), (objState === null || objState === void 0 ? void 0 : objState.varType) === "radio" && /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "radio-dropdown"\n      }, /*#__PURE__*/react.createElement("p", null, t("edit.radioAmount")), /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        value: objState === null || objState === void 0 ? void 0 : objState.amount,\n        placeholder: 3,\n        onChange: function onChange(e) {\n          return handleRadio(e.target.value);\n        },\n        maxLength: "1"\n      }), /*#__PURE__*/react.createElement("p", null, t("edit.radioText")), populateRadio())), (objState === null || objState === void 0 ? void 0 : objState.varType) === "checkbox" && /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "radio-dropdown"\n      }, /*#__PURE__*/react.createElement("p", null, t("edit.variableNameToSet")), /*#__PURE__*/react.createElement("input", {\n        className: "margin-bottom",\n        type: "text",\n        onChange: function onChange(e) {\n          return handleVarName(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.varName,\n        placeholder: objState === null || objState === void 0 ? void 0 : objState.id\n      }))), /*#__PURE__*/react.createElement("div", {\n        className: "menuedit-sliders"\n      }, /*#__PURE__*/react.createElement("p", null, t("edit.label")), /*#__PURE__*/react.createElement("input", {\n        type: "text",\n        onChange: function onChange(e) {\n          return handleVarLabel(e.target.value);\n        },\n        value: objState === null || objState === void 0 ? void 0 : objState.label\n      })))));\n    }\n  } else {\n    return null;\n  }\n};\n/* harmony default export */ var components_Dropdown_DropdownEditObject = (DropdownEditObject_DropdownEditObject);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./src/components/ContextMenu/ContextMenu.css\nvar ContextMenu = __webpack_require__(47930);\n;// CONCATENATED MODULE: ./src/components/ContextMenu/ContextMenu.css\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar ContextMenu_options = {};\n\nContextMenu_options.styleTagTransform = (styleTagTransform_default());\nContextMenu_options.setAttributes = (setAttributesWithoutAttributes_default());\n\n      ContextMenu_options.insert = insertBySelector_default().bind(null, "head");\n    \nContextMenu_options.domAPI = (styleDomAPI_default());\nContextMenu_options.insertStyleElement = (insertStyleElement_default());\n\nvar ContextMenu_update = injectStylesIntoStyleTag_default()(ContextMenu/* default */.Z, ContextMenu_options);\n\n\n\n\n       /* harmony default export */ var ContextMenu_ContextMenu = (ContextMenu/* default */.Z && ContextMenu/* default */.Z.locals ? ContextMenu/* default */.Z.locals : undefined);\n\n;// CONCATENATED MODULE: ./src/components/ContextMenu/DeckCreator.jsx\n\n\n\nfunction DeckCreator_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction DeckCreator_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? DeckCreator_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : DeckCreator_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\nvar CustomDeckModal = function CustomDeckModal(_ref) {\n  var onSave = _ref.onSave,\n    getObj = _ref.getObj;\n  var _useState = (0,react.useState)({\n      image: null,\n      text: \'\'\n    }),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    newCard = _useState2[0],\n    setNewCard = _useState2[1];\n  var _useState3 = (0,react.useState)([]),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    cards = _useState4[0],\n    setCards = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    showWarning = _useState6[0],\n    setShowWarning = _useState6[1];\n  (0,react.useEffect)(function () {\n    setCards(getObj.cards ? getObj.cards : []);\n  }, []);\n  var openWidget = function openWidget(event) {\n    var myWidget = window.cloudinary.createUploadWidget({\n      cloudName: "uottawaedusim",\n      uploadPreset: "bb8lewrh"\n    }, function (error, result) {\n      if (!error && result && result.event === "success") {\n        setNewCard(function (prevCard) {\n          return DeckCreator_objectSpread(DeckCreator_objectSpread({}, prevCard), {}, {\n            image: result.info.public_id\n          });\n        });\n        myWidget.close();\n      }\n    });\n    myWidget.open();\n  };\n  var handleTextChange = function handleTextChange(event) {\n    event.stopPropagation();\n    setNewCard(function (prevCard) {\n      return DeckCreator_objectSpread(DeckCreator_objectSpread({}, prevCard), {}, {\n        text: event.target.value\n      });\n    });\n  };\n  var handleSave = function handleSave() {\n    if (!newCard.image || !newCard.text) {\n      setShowWarning(true);\n    } else {\n      setCards([].concat((0,toConsumableArray/* default */.Z)(cards), [newCard]));\n      setNewCard({\n        image: null,\n        text: \'\'\n      });\n      setShowWarning(false);\n    }\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-overlay"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-header"\n  }, /*#__PURE__*/react.createElement("h2", null, "Create Custom Deck")), /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-body"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-card-preview"\n  }, cards.map(function (card, index) {\n    return /*#__PURE__*/react.createElement("div", {\n      key: index,\n      className: "custom-deck-modal-cards"\n    }, card.image && /*#__PURE__*/react.createElement(cloudinary_react_esm/* Image */.Ee, {\n      id: "deck-preview",\n      cloudName: "uottawaedusim",\n      publicId: card.image,\n      alt: "card"\n    }), card.text && /*#__PURE__*/react.createElement("div", {\n      className: "custom-deck-modal-cards-text"\n    }, card.text));\n  })), /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-card-form"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-card-image"\n  }, /*#__PURE__*/react.createElement("button", {\n    onClick: openWidget\n  }, "Select Image")), /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-card-text"\n  }, /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: "Enter text here",\n    value: newCard.text,\n    onChange: handleTextChange\n  }))), showWarning && /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-warning"\n  }, "Please add an image or text to the new card.")), /*#__PURE__*/react.createElement("div", {\n    className: "custom-deck-modal-footer"\n  }, /*#__PURE__*/react.createElement("button", {\n    className: "custom-deck-modal-add-card",\n    onClick: handleSave\n  }, "Add Card"), /*#__PURE__*/react.createElement("button", {\n    className: "custom-deck-modal-save",\n    onClick: function onClick() {\n      return onSave(cards);\n    }\n  }, "Save Deck"))));\n};\n/* harmony default export */ var DeckCreator = (CustomDeckModal);\n// EXTERNAL MODULE: ./node_modules/react-modal/lib/index.js\nvar lib = __webpack_require__(83253);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n;// CONCATENATED MODULE: ./src/components/ContextMenu/ContextMenu.jsx\n\n\nfunction ContextMenu_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction ContextMenu_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ContextMenu_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ContextMenu_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\nvar ContextMenu_ContextMenu_ContextMenu = function ContextMenu(props) {\n  var _props$getObjState2, _props$getObjState3, _conditions$condition;\n  var _useState = (0,react.useState)(false),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    drop = _useState2[0],\n    setDrop = _useState2[1];\n  var _useState3 = (0,react.useState)({}),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    conditions = _useState4[0],\n    setConditions = _useState4[1];\n  var _useState5 = (0,react.useState)(false),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    conditionsVisible = _useState6[0],\n    setConditionsVisible = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    showDeck = _useState8[0],\n    setShowDeck = _useState8[1];\n  var _useState9 = (0,react.useState)(false),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    editModalLeft = _useState10[0],\n    setEditModalLeft = _useState10[1];\n  var _useState11 = (0,react.useState)(false),\n    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n    updater = _useState12[0],\n    setUpdater = _useState12[1];\n  var _useState13 = (0,react.useState)(\'\'),\n    _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n    layerDisabled = _useState14[0],\n    setLayerDisabled = _useState14[1];\n  var _useState15 = (0,react.useState)(""),\n    _useState16 = (0,slicedToArray/* default */.Z)(_useState15, 2),\n    editTitle = _useState16[0],\n    setEditTitle = _useState16[1];\n  var menuRef = (0,react.useRef)();\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  (0,react.useEffect)(function () {\n    var _props$getObjState;\n    setLayerDisabled(props.contextDisabled);\n    setConditions(((_props$getObjState = props.getObjState()) === null || _props$getObjState === void 0 ? void 0 : _props$getObjState.conditions) || {});\n  }, [props.pages, props.getObjState(), props.contextDisabled]);\n  var setContextMenuTitle = function setContextMenuTitle() {\n    var editTitleOptions = ["text", "poll", "connect4", "tic", "html", "input", "timer"];\n    var selectedShapeName = props.selectedShapeName;\n    var title = editTitleOptions.find(function (key) {\n      return selectedShapeName.startsWith(key);\n    }) || "shape";\n    setEditTitle(title);\n  };\n  var handleClickOutside = function handleClickOutside(e) {\n    if (menuRef.current && !menuRef.current.contains(e.target)) {\n      props.close();\n    }\n  };\n  var calcOutOfBounds = function calcOutOfBounds(x, y) {\n    var dropHeight = menuRef.current ? menuRef.current.clientHeight : 235;\n    var dropWidth = menuRef.current ? menuRef.current.clientWidth : 155;\n    var paddingPx = 7;\n    var screenH = window.innerHeight - paddingPx;\n    var screenW = window.innerWidth - paddingPx;\n    var editModalWidth = 180;\n    var transformX = x + dropWidth - screenW;\n    if (transformX < 0) {\n      transformX = 0;\n    }\n    var transformY = y + dropHeight - screenH;\n    if (transformY < 0) {\n      transformY = 0;\n    }\n    var left = false;\n    if (screenW - (x + dropWidth + editModalWidth) < 0 && menuRef.current) {\n      left = true;\n    }\n    return {\n      x: transformX,\n      y: transformY,\n      left: left\n    };\n  };\n  var _useState17 = (0,react.useState)(-calcOutOfBounds(props.position.x, props.position.y).x),\n    _useState18 = (0,slicedToArray/* default */.Z)(_useState17, 2),\n    offsetX = _useState18[0],\n    setOffsetX = _useState18[1];\n  var _useState19 = (0,react.useState)(-calcOutOfBounds(props.position.x, props.position.y).y),\n    _useState20 = (0,slicedToArray/* default */.Z)(_useState19, 2),\n    offsetY = _useState20[0],\n    setOffsetY = _useState20[1];\n  var handleRightClick = function handleRightClick(e) {\n    setDrop(false);\n    var offset = calcOutOfBounds(e.clientX, e.clientY);\n    setOffsetX(-offset.x);\n    setOffsetY(-offset.y);\n    setUpdater(true);\n    setEditModalLeft(offset.left);\n  };\n  var handleEdit = function handleEdit() {\n    setDrop(!drop);\n    if (conditionsVisible) {\n      props.updateObjState({\n        conditions: conditions\n      });\n    }\n    setConditionsVisible(false);\n  };\n  var handleConditionsVisible = function handleConditionsVisible() {\n    setDrop(false);\n    if (conditionsVisible) {\n      props.updateObjState({\n        conditions: conditions\n      });\n    }\n    setConditionsVisible(!conditionsVisible);\n  };\n  var handleGrouping = function handleGrouping() {\n    props.handleGrouping();\n    props.close();\n  };\n  var handleUngrouping = function handleUngrouping() {\n    props.handleUngrouping();\n    props.close();\n  };\n  var debounceObjState = (0,react.useCallback)(lodash_debounce_default()(function (state) {\n    return props.updateObjState(state);\n  }, 100), [] // will be created only once initially\n  );\n\n  var handleUpdateConditions = function handleUpdateConditions(key, value) {\n    setConditions(function (old) {\n      return ContextMenu_objectSpread(ContextMenu_objectSpread({}, old), {}, (0,defineProperty/* default */.Z)({}, key, value ? value : undefined));\n    });\n    debounceObjState({\n      conditions: ContextMenu_objectSpread(ContextMenu_objectSpread({}, conditions), {}, (0,defineProperty/* default */.Z)({}, key, value ? value : undefined))\n    });\n  };\n  var handleDeck = function handleDeck() {\n    setShowDeck(true);\n    setOffsetX(1000);\n  };\n  (0,react.useEffect)(function () {\n    if (!showDeck) {\n      document.addEventListener(\'click\', handleClickOutside);\n      document.addEventListener(\'touchstart\', handleClickOutside);\n      document.addEventListener(\'contextmenu\', handleRightClick);\n      var offset = calcOutOfBounds(props.position.x, props.position.y);\n      setOffsetX(-offset.x);\n      setOffsetY(-offset.y);\n      setEditModalLeft(calcOutOfBounds(props.position.x, props.position.y).left);\n      if (props.selectedShapeName) {\n        setContextMenuTitle();\n      }\n      return function () {\n        document.removeEventListener(\'click\', handleClickOutside);\n        document.removeEventListener(\'touchstart\', handleClickOutside);\n        document.removeEventListener(\'contextmenu\', handleRightClick);\n      };\n    }\n  }, [props.selectedShapeName, showDeck]);\n  var onSave = function onSave(cards) {\n    props.updateObjState({\n      deck: cards\n    });\n    setShowDeck(false);\n  };\n  var handleLock = function handleLock() {\n    props.lock();\n  };\n  var handleLayer = function handleLayer(layer) {\n    props.layerTo(props.selectedShapeName, layer);\n  };\n  var handleUtil = function handleUtil(util) {\n    if (util == "cut") props.cut();else if (util == "copy") props.copy();else if (util == "delete") props.delete();\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n    ref: menuRef,\n    key: props.position.x,\n    className: "cmenu ",\n    style: {\n      left: props.position.x + offsetX,\n      top: props.position.y + offsetY\n    }\n  }, /*#__PURE__*/react.createElement("ul", null, /*#__PURE__*/react.createElement("li", {\n    onClick: function onClick() {\n      return handleUtil(\'cut\');\n    }\n  }, t("common.cut")), /*#__PURE__*/react.createElement("li", {\n    onClick: function onClick() {\n      return handleUtil(\'copy\');\n    }\n  }, t("common.copy")), /*#__PURE__*/react.createElement("li", {\n    onClick: function onClick() {\n      return handleUtil(\'delete\');\n    }\n  }, t("common.delete")), /*#__PURE__*/react.createElement("li", {\n    onClick: handleLock\n  }, (_props$getObjState2 = props.getObjState()) !== null && _props$getObjState2 !== void 0 && _props$getObjState2.lock ? "Unlock" : "Lock"), !props.addGroup && !props.unGroup && /*#__PURE__*/react.createElement("li", {\n    onClick: handleConditionsVisible\n  }, t("edit.changeConditions")), !props.selectedShapeName.includes("richText") && /*#__PURE__*/react.createElement("li", {\n    onClick: handleEdit\n  }, props.addGroup || props.unGroup ? "Edit group" : "Edit " + ((_props$getObjState3 = props.getObjState()) === null || _props$getObjState3 === void 0 ? void 0 : _props$getObjState3.name)), props.addGroup && /*#__PURE__*/react.createElement("li", {\n    onClick: handleGrouping\n  }, t("edit.groupObjects")), props.unGroup && /*#__PURE__*/react.createElement("li", {\n    onClick: handleUngrouping\n  }, t("edit.ungroupObjects")), props.selectedShapeName.includes("decks") && /*#__PURE__*/react.createElement("li", {\n    onClick: handleDeck\n  }, "Edit Deck"), /*#__PURE__*/react.createElement("div", {\n    className: "layerBtns"\n  }, t("edit.layer"), /*#__PURE__*/react.createElement("li", {\n    onClick: function onClick() {\n      return handleLayer("up");\n    },\n    className: layerDisabled === \'up\' ? \'disabled\' : \'\'\n  }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_up/* default */.Z, {\n    className: "icon alert-icon"\n  }))), /*#__PURE__*/react.createElement("li", {\n    onClick: function onClick() {\n      return handleLayer("down");\n    },\n    className: layerDisabled === \'down\' ? \'disabled\' : \'\'\n  }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_down/* default */.Z, {\n    className: "icon alert-icon"\n  }))))), drop && /*#__PURE__*/react.createElement("div", {\n    className: "drop"\n  }, /*#__PURE__*/react.createElement(components_Dropdown_DropdownEditObject, {\n    setCustomObjData: props.setCustomObjData,\n    top: menuRef.current.offsetTop,\n    title: editTitle,\n    handleFillColor: props.handleFillColor,\n    handleStrokeColor: props.handleStrokeColor,\n    handleBackgroundColor: props.handleBackgroundColor,\n    handleWidth: props.handleWidth,\n    handleOpacity: props.handleOpacity,\n    handleSize: props.handleSize,\n    handleFont: props.handleFont,\n    font: props.selectedFont,\n    left: editModalLeft,\n    close: props.close,\n    selectedShapeName: props.selectedShapeName,\n    getObj: props.getObj,\n    getObjState: props.getObjState,\n    grouped: props.addGroup || props.unGroup,\n    getObjGroup: props.getObjGroup,\n    updateObjState: props.updateObjState,\n    globalVars: props.globalVars,\n    themes: props.themes\n  })), conditionsVisible && /*#__PURE__*/react.createElement("div", {\n    className: "drop"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "dropdownedit conditionsedit fixed-anim",\n    style: ContextMenu_objectSpread({}, editModalLeft ? {\n      right: "110px"\n    } : {\n      left: "180px"\n    })\n  }, /*#__PURE__*/react.createElement("p", null, t("edit.onlyDisplayThisIf")), /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: t("edit.variableName"),\n    value: (conditions === null || conditions === void 0 ? void 0 : conditions.varName) || "",\n    onChange: function onChange(e) {\n      return handleUpdateConditions("varName", e.target.value);\n    }\n  }), /*#__PURE__*/react.createElement("select", {\n    name: "inputtype",\n    value: conditions === null || conditions === void 0 ? void 0 : conditions.condition,\n    onChange: function onChange(e) {\n      return handleUpdateConditions("condition", e.target.value);\n    }\n  }, ["positive", "negative", "true", "false", "isgreater", "isless", "isequal", "between", "onchange"].map(function (val) {\n    return /*#__PURE__*/react.createElement("option", {\n      value: val,\n      key: val\n    }, t("edit.cond.".concat(val)));\n  })), (conditions === null || conditions === void 0 ? void 0 : (_conditions$condition = conditions.condition) === null || _conditions$condition === void 0 ? void 0 : _conditions$condition.startsWith(\'is\')) && /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: t("edit.valueToCheckAgainst"),\n    value: (conditions === null || conditions === void 0 ? void 0 : conditions.trueValue) || "",\n    onChange: function onChange(e) {\n      return handleUpdateConditions("trueValue", e.target.value);\n    }\n  }), (conditions === null || conditions === void 0 ? void 0 : conditions.condition) == \'between\' && /*#__PURE__*/react.createElement("div", {\n    className: "conditionsbetween"\n  }, /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: t("edit.minimum"),\n    value: (conditions === null || conditions === void 0 ? void 0 : conditions.trueValue) || "",\n    onChange: function onChange(e) {\n      return handleUpdateConditions("trueValue", e.target.value);\n    }\n  }), /*#__PURE__*/react.createElement("p", null, t("common.and")), /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: t("edit.maximum"),\n    value: (conditions === null || conditions === void 0 ? void 0 : conditions.trueValueAlt) || "",\n    onChange: function onChange(e) {\n      return handleUpdateConditions("trueValueAlt", e.target.value);\n    }\n  }))))), /*#__PURE__*/react.createElement((lib_default()), {\n    isOpen: showDeck,\n    onRequestClose: function onRequestClose() {\n      return setShowDeck(false);\n    },\n    className: "deckModal",\n    overlayClassName: "myoverlay",\n    ariaHideApp: false,\n    closeTimeoutMS: 250\n  }, /*#__PURE__*/react.createElement("div", {\n    onClick: function onClick(e) {\n      return e.stopPropagation();\n    }\n  }, /*#__PURE__*/react.createElement(DeckCreator, {\n    onSave: onSave,\n    getObj: props.getObjState()\n  }))));\n};\n/* harmony default export */ var components_ContextMenu_ContextMenu = (ContextMenu_ContextMenu_ContextMenu);\n// EXTERNAL MODULE: ./node_modules/react-switch/index.js\nvar react_switch = __webpack_require__(59936);\n// EXTERNAL MODULE: ./src/components/Modal/ConfirmationModal.jsx + 1 modules\nvar ConfirmationModal = __webpack_require__(5750);\n// EXTERNAL MODULE: ./src/components/Dropdown/Multilevel.jsx\nvar Multilevel = __webpack_require__(80979);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownOverlay.jsx\n\n\n\nfunction DropdownOverlay_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction DropdownOverlay_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? DropdownOverlay_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : DropdownOverlay_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\nvar DropdownOverlay = function DropdownOverlay(props) {\n  var _props$getOverlayStat, _props$getOverlayStat2;\n  var menuElem = (0,react.useRef)();\n  var _useState = (0,react.useState)(),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    selectedOption = _useState2[0],\n    setSelectedOption = _useState2[1];\n  var _useState3 = (0,react.useState)(((_props$getOverlayStat = props.getOverlayState(props.overlayIndex)) === null || _props$getOverlayStat === void 0 ? void 0 : (_props$getOverlayStat2 = _props$getOverlayStat.overlayCondition) === null || _props$getOverlayStat2 === void 0 ? void 0 : _props$getOverlayStat2.conditions) || {}),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    conditions = _useState4[0],\n    setConditions = _useState4[1];\n  var _useState5 = (0,react.useState)("images/ujjtehlwjgsfqngxesnd"),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    imageSelected = _useState6[0],\n    setImageSelected = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    confirmationVisible = _useState8[0],\n    setConfirmationVisible = _useState8[1];\n  var confirmationVisibleRef = (0,react.useRef)(confirmationVisible);\n  var setConfirmationModal = function setConfirmationModal(data) {\n    setConfirmationVisible(data);\n    setTimeout(function () {\n      confirmationVisibleRef.current = data;\n    }, 250);\n  };\n  var _useState9 = (0,react.useState)(),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    hideBtn = _useState10[0],\n    setHideBtn = _useState10[1];\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  var handleClickOutside = function handleClickOutside(e) {\n    if (menuElem.current && !menuElem.current.contains(e.target)) {\n      props.close();\n    }\n  };\n  var alertContext = (0,AlertContext/* useAlertContext */.oX)();\n  (0,react.useEffect)(function () {\n    var overlay = props.pages[props.level - 1].overlays[props.overlayIndex];\n    if (overlay) {\n      setSelectedOption(overlay.overlayOpenOption);\n      setHideBtn(overlay.hideBtn);\n    }\n  }, [props]);\n  var optionSelected = function optionSelected(e) {\n    var option = e.target.value;\n    var pages = (0,toConsumableArray/* default */.Z)(props.pages);\n    if (option === "pageEnter" || option === "pageExit") {\n      // Make sure this setting has not been used on another overlay on this page yet\n      var overlays = pages[props.level - 1].overlays;\n      for (var i = 0; i < overlays.length; i++) {\n        if (i !== props.overlayIndex && overlays[i].overlayOpenOption === option) {\n          alertContext.showAlert(t("alert.setOnlyOneOverlay", {\n            name: i + 1\n          }), "warning");\n          return;\n        }\n      }\n    }\n    setSelectedOption(option);\n    pages[props.level - 1].overlays[props.overlayIndex].overlayOpenOption = option;\n    props.changePages(pages);\n    if (option === "doNotAutoOpen") {\n      hideToggled(false);\n    }\n  };\n  var debounceObjState = (0,react.useCallback)(lodash_debounce_default()(function (state) {\n    return handleChangeCondition(state);\n  }, 100), [] // will be created only once initially\n  );\n\n  var handleUpdateConditions = function handleUpdateConditions(key, value) {\n    setConditions(function (old) {\n      return DropdownOverlay_objectSpread(DropdownOverlay_objectSpread({}, old), {}, (0,defineProperty/* default */.Z)({}, key, value ? value : undefined));\n    });\n    debounceObjState({\n      conditions: DropdownOverlay_objectSpread(DropdownOverlay_objectSpread({}, conditions), {}, (0,defineProperty/* default */.Z)({}, key, value ? value : undefined))\n    });\n  };\n  var handleChangeCondition = function handleChangeCondition(e) {\n    var pages = (0,toConsumableArray/* default */.Z)(props.pages);\n    pages[props.level - 1].overlays[props.overlayIndex].overlayCondition = e;\n    props.changePages(pages);\n  };\n  var hideToggled = function hideToggled(e) {\n    setHideBtn(e);\n    var pages = (0,toConsumableArray/* default */.Z)(props.pages);\n    pages[props.level - 1].overlays[props.overlayIndex].hideBtn = e;\n    props.changePages(pages);\n  };\n  (0,react.useEffect)(function () {\n    document.addEventListener(\'click\', handleClickOutside);\n    return function () {\n      return document.removeEventListener(\'click\', handleClickOutside);\n    };\n  }, []);\n  var openWidget = function openWidget(event) {\n    var myWidget = window.cloudinary.createUploadWidget({\n      cloudName: "uottawaedusim",\n      uploadPreset: "bb8lewrh"\n    }, function (error, result) {\n      if (!error && result && result.event === "success") {\n        props.handleOverlayIcon(result.info.public_id);\n        myWidget.close();\n      }\n    });\n    myWidget.open();\n  };\n  var handleChange = function handleChange(value) {\n    setConditions(function (old) {\n      return DropdownOverlay_objectSpread(DropdownOverlay_objectSpread({}, old), {}, {\n        varName: value.label[0] ? value.label[0] : undefined\n      });\n    });\n    debounceObjState({\n      conditions: DropdownOverlay_objectSpread(DropdownOverlay_objectSpread({}, conditions), {}, {\n        varName: value.label[0] ? value.label[0] : undefined\n      })\n    });\n  };\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n    className: "dropdown overlayOptionsDropdown",\n    ref: menuElem\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "menu"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "overlay-title-container"\n  }, /*#__PURE__*/react.createElement("h1", {\n    className: "overlay-title"\n  }, t("edit.overlayXSettings", {\n    name: props.overlayIndex + 1\n  })), /*#__PURE__*/react.createElement("button", {\n    type: "button",\n    className: "modal-overlay-button",\n    onClick: openWidget\n  }, t("modal.overlayImage"))), /*#__PURE__*/react.createElement("div", {\n    className: "overlayHideRow"\n  }, /*#__PURE__*/react.createElement("h2", {\n    className: "overlaySettingsSub"\n  }, t("edit.hideOverlayButton")), /*#__PURE__*/react.createElement(react_switch["default"], {\n    onChange: hideToggled,\n    checked: hideBtn ? hideBtn : false,\n    disabled: props.pages[props.level - 1].overlays[props.overlayIndex] ? props.pages[props.level - 1].overlays[props.overlayIndex].overlayOpenOption === "doNotAutoOpen" : false,\n    height: 25,\n    width: 50,\n    className: "react-switch"\n  })), /*#__PURE__*/react.createElement("h2", {\n    className: "overlaySettingsSub"\n  }, t("edit.openOverlayWhen")), /*#__PURE__*/react.createElement("div", {\n    className: "overlayOpenOptions"\n  }, /*#__PURE__*/react.createElement("input", {\n    id: "overlayOpenOnEnter",\n    type: "radio",\n    name: "overlayOpenOption",\n    value: "pageEnter",\n    onChange: optionSelected,\n    checked: selectedOption === "pageEnter"\n  }), /*#__PURE__*/react.createElement("label", {\n    htmlFor: "overlayOpenOnEnter"\n  }, t("edit.pageEntered")), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("input", {\n    id: "overlayOpenOnExit",\n    type: "radio",\n    name: "overlayOpenOption",\n    value: "pageExit",\n    onChange: optionSelected,\n    checked: selectedOption === "pageExit"\n  }), /*#__PURE__*/react.createElement("label", {\n    htmlFor: "overlayOpenOnExit"\n  }, t("edit.pageExited")), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("input", {\n    id: "overlayOpenNotAuto",\n    type: "radio",\n    name: "overlayOpenOption",\n    value: "doNotAutoOpen",\n    onChange: optionSelected,\n    checked: selectedOption === "doNotAutoOpen"\n  }), /*#__PURE__*/react.createElement("label", {\n    htmlFor: "overlayOpenNotAuto"\n  }, t("edit.dontOpenOverlay")), /*#__PURE__*/react.createElement("br", null), /*#__PURE__*/react.createElement("input", {\n    id: "overlayOpenOnCondition",\n    type: "radio",\n    name: "overlayOpenOption",\n    value: "condition",\n    onChange: optionSelected,\n    checked: selectedOption === "condition"\n  }), /*#__PURE__*/react.createElement("label", {\n    htmlFor: "overlayOpenOnCondition"\n  }, t("edit.conditionIsMet")), /*#__PURE__*/react.createElement("div", {\n    className: "overlayConditions ".concat(selectedOption !== "condition" ? "overlayConditionsDisabled" : "")\n  }, /*#__PURE__*/react.createElement(Multilevel/* default */.Z, {\n    data: props.variables,\n    handleChange: handleChange,\n    baseValue: conditions === null || conditions === void 0 ? void 0 : conditions.varName,\n    className: \'overlay-multilevel\'\n  }), /*#__PURE__*/react.createElement("select", {\n    name: "inputtype",\n    value: conditions === null || conditions === void 0 ? void 0 : conditions.condition,\n    onChange: function onChange(e) {\n      return handleUpdateConditions("condition", e.target.value);\n    }\n  }, /*#__PURE__*/react.createElement("option", {\n    value: "positive"\n  }, t("edit.cond.positive")), /*#__PURE__*/react.createElement("option", {\n    value: "negative"\n  }, t("edit.cond.negative")), /*#__PURE__*/react.createElement("option", {\n    value: "true"\n  }, t("edit.cond.istrue")), /*#__PURE__*/react.createElement("option", {\n    value: "false"\n  }, t("edit.cond.isfalse")), /*#__PURE__*/react.createElement("option", {\n    value: "isequal"\n  }, t("edit.cond.isequal")), /*#__PURE__*/react.createElement("option", {\n    value: "onchange"\n  }, t("edit.cond.onchange"))), (conditions === null || conditions === void 0 ? void 0 : conditions.condition) === "isequal" && /*#__PURE__*/react.createElement("input", {\n    type: "text",\n    placeholder: t("edit.valueToCheckAgainst"),\n    value: (conditions === null || conditions === void 0 ? void 0 : conditions.trueValue) || "",\n    onChange: function onChange(e) {\n      return handleUpdateConditions("trueValue", e.target.value);\n    }\n  }))), /*#__PURE__*/react.createElement("div", {\n    className: "overlayDeleteRow"\n  }, /*#__PURE__*/react.createElement("h2", {\n    className: "overlaySettingsSub"\n  }, t("edit.deleteOverlay")), /*#__PURE__*/react.createElement("i", {\n    onClick: function onClick() {\n      setConfirmationVisible(true);\n    }\n  }, /*#__PURE__*/react.createElement(trash_can_alt_2/* default */.Z, {\n    className: "icon"\n  }))))), /*#__PURE__*/react.createElement(ConfirmationModal/* default */.Z, {\n    visible: confirmationVisible,\n    hide: function hide() {\n      return setConfirmationModal(false);\n    },\n    confirmFunction: function confirmFunction() {\n      var newPages = (0,toConsumableArray/* default */.Z)(props.pages);\n      var page = newPages[props.level - 1];\n      page.overlays.splice(props.overlayIndex, 1);\n      props.changePages(newPages);\n    },\n    confirmMessage: t("edit.yesDeleteOverlay"),\n    message: t("edit.confirmDeleteOverlay", {\n      name: props.overlayIndex + 1\n    })\n  }));\n};\n/* harmony default export */ var Dropdown_DropdownOverlay = (DropdownOverlay);\n// EXTERNAL MODULE: ./public/icons/layers.svg\nvar icons_layers = __webpack_require__(18510);\n;// CONCATENATED MODULE: ./src/components/Stage/CanvasUtils.jsx\n\nvar CanvasUtils = function CanvasUtils(props) {\n  //\n  //        CONDITION UTILS \n  //\n\n  useEffect(function () {\n    var saved = props.savedObjects;\n    var state = props.state;\n    var allShapes = [];\n    saved.map(function (object) {\n      state[object].map(function (shape) {\n        allShapes.push(shape);\n      });\n    });\n  }, [props]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n/* harmony default export */ var Stage_CanvasUtils = ((/* unused pure expression or super */ null && (CanvasUtils)));\nvar handleArrowKeys = function handleArrowKeys(keyCode, canvas) {\n  var selected = canvas.state.selectedShapeName;\n  var saved = canvas.props.savedObjects;\n  var allShapes = [];\n  var type = \'\';\n  saved.map(function (object) {\n    canvas.state[object].map(function (shape) {\n      allShapes.push(shape);\n    });\n  });\n  var moveMargin = 5; // define the margin for moving the shape\n  allShapes.map(function (shape) {\n    if (shape.id === selected) {\n      selected = shape;\n      type = shape.type;\n    }\n  });\n  if (typeof selected === \'string\') {\n    return;\n  }\n  switch (keyCode) {\n    case 37:\n      // arrow left\n      selected.x -= moveMargin;\n      break;\n    case 38:\n      // arrow up\n      selected.y -= moveMargin;\n      break;\n    case 39:\n      // arrow right\n      selected.x += moveMargin;\n      break;\n    case 40:\n      // arrow down\n      selected.y += moveMargin;\n      break;\n    default:\n      console.log(\'Invalid key code\');\n      break;\n  }\n  var newState = canvas.state;\n  newState[type].map(function (shape) {\n    if (shape.name === selected.name) {\n      shape = selected;\n    }\n  });\n  canvas.setState(newState);\n};\n// EXTERNAL MODULE: ./node_modules/konva/lib/index.js + 37 modules\nvar konva_lib = __webpack_require__(82107);\n// EXTERNAL MODULE: ./node_modules/react-konva/es/ReactKonva.js + 5 modules\nvar ReactKonva = __webpack_require__(16904);\n// EXTERNAL MODULE: ./src/components/Stage/Stage.css\nvar Stage = __webpack_require__(3654);\n// EXTERNAL MODULE: ./src/components/Stage/Info.css\nvar Info = __webpack_require__(99187);\n;// CONCATENATED MODULE: ./src/components/Stage/Canvas.jsx\n\n\n\n\n\n\n\n\n\n\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction Canvas_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction Canvas_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? Canvas_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : Canvas_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction Canvas_createSuper(Derived) { var hasNativeReflectConstruct = Canvas_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\nfunction Canvas_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\n\n // Note: react-dom, not react\n\n\n\n\n// Dropdowns\n\n\n\n\n\n\n\n\n\n\n// Standard Konva Components\n\n\n\n\n\nvar Canvas_history = [];\nvar historyStep = 0;\nvar Graphics = /*#__PURE__*/function (_Component) {\n  (0,inherits/* default */.Z)(Graphics, _Component);\n  var _super = Canvas_createSuper(Graphics);\n  function Graphics(props) {\n    var _this;\n    (0,classCallCheck/* default */.Z)(this, Graphics);\n    _this = _super.call(this, props);\n    // Save State\n    // These are the names of the objects in state that are saved to the database\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "customObjects", (0,toConsumableArray/* default */.Z)(_this.props.customObjects));\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "customDeletes", (0,toConsumableArray/* default */.Z)(_this.props.customDeletes));\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "savedObjects", (0,toConsumableArray/* default */.Z)(_this.props.savedObjects));\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "deletionCounts", (0,toConsumableArray/* default */.Z)(_this.props.allDeletes));\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "savedState", [].concat((0,toConsumableArray/* default */.Z)(_this.savedObjects), (0,toConsumableArray/* default */.Z)(_this.deletionCounts), ["savedGroups", "overlayImage",\n    // Pages\n    "pages", "numberOfPages", "status"]));\n    // This is the boundary of the scene (for the play mode)\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "positionRect", {\n      x: 0,\n      y: 0,\n      w: 1920,\n      h: 1080,\n      scaleX: 1,\n      scaleY: 1\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "tryParseJSONObject", function (jsonString) {\n      try {\n        var o = JSON.parse(jsonString);\n\n        // Handle non-exception-throwing cases:\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n        // but... JSON.parse(null) returns null, and typeof null === "object",\n        // so we must check for that, too. Thankfully, null is falsey, so this suffices:\n        if (o && (0,esm_typeof/* default */.Z)(o) === "object") {\n          return o;\n        }\n      } catch (e) {}\n      return false;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "reloadFromSavedState", function (doNotRecalculateBounds) {\n      axios_default().get({"REACT_APP_API_ORIGIN":"http://206.12.91.254:8080","REACT_APP_AUTH0_DOMAIN":"dev-3-81kkgt.us.auth0.com","REACT_APP_AUTH0_CLIENT_ID":"DjTX4pPeCfDPKGNcG8AwMEcJjkTZyYp3","REACT_APP_GRAFANAAUTH_KEY":"eyJrIjoiT1BMTmdaNnh3ejl6Um8xMHgzakhnYzNWYUlzVXR1a20iLCJuIjoiRGVtbyIsImlkIjoxfQ==","REACT_APP_GOOGLEAPI_KEY":"AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU"}.REACT_APP_API_ORIGIN + \'/api/gameinstances/getGameInstance/:adminid/:gameid\', {\n        params: {\n          adminid: _this.state.adminid,\n          gameid: _this.state.gameinstanceid\n        }\n      }).then(function (res) {\n        if (res.data.game_parameters) {\n          // Load saved object data\n          var objects = JSON.parse(res.data.game_parameters);\n\n          // Parse the saved groups\n          var parsedSavedGroups = [];\n          for (var i = 0; i < objects.savedGroups.length; i++) {\n            var savedGroup = [];\n            for (var j = 0; j < objects.savedGroups[i].length; j++) {\n              var groupObj = objects.savedGroups[i][j];\n              var parsed = _this.tryParseJSONObject(groupObj);\n              var savedGroupData = parsed !== false ? parsed : groupObj;\n              savedGroup.push(savedGroupData);\n            }\n            parsedSavedGroups.push(savedGroup);\n          }\n          objects.savedGroups = parsedSavedGroups;\n          var currentMainShapes = [];\n          for (var _i = 0; _i < _this.savedObjects.length; _i++) {\n            var type = _this.savedObjects[_i];\n            currentMainShapes.push(objects[type]);\n          }\n          var uniqueShapesSet = [];\n          currentMainShapes.map(function (set, i) {\n            var uniqueArray = set.filter(function (shape, index, self) {\n              return index === self.findIndex(function (s) {\n                return s.id === shape.id;\n              });\n            });\n            uniqueShapesSet.push(uniqueArray);\n          });\n          if (_this.props.setRoles) {\n            _this.props.setRoles(objects.roles || []);\n          }\n          _this.props.setAllShapes(uniqueShapesSet);\n          if (_this.props.setTasks) {\n            _this.props.setTasks(objects.tasks || []);\n          }\n          if (_this.props.setGlobalVars) {\n            _this.props.setGlobalVars(objects.globalVars || []);\n          }\n          if (_this.props.setGlobalCons) {\n            _this.props.setGlobalCons(objects.globalCons || []);\n          }\n          if (_this.props.setGlobalInts) {\n            _this.props.setGlobalInts(objects.globalInts || []);\n          }\n          if (_this.props.setGlobalTrigs) {\n            _this.props.setGlobalTrigs(objects.globalTrigs || []);\n          }\n          if (_this.props.setLocalVars) {\n            _this.props.setLocalVars(objects.localVars || []);\n          }\n          if (_this.props.setLocalCons) {\n            _this.props.setLocalCons(objects.localCons || []);\n          }\n          if (_this.props.setLocalInts) {\n            _this.props.setLocalInts(objects.localInts || []);\n          }\n          if (_this.props.setLocalTrigs) {\n            _this.props.setLocalTrigs(objects.localTrigs || []);\n          }\n          if (_this.props.handleGroups) _this.props.handleGroups(objects.groups || {});\n          if (_this.props.setNotes) {\n            _this.props.setNotes(objects.notes || {});\n          }\n          if (_this.props.setThemes) {\n            _this.props.setThemes(objects.themes || []);\n          }\n          if (_this.props.setShapeThemes) _this.props.setShapeThemes(objects.shapeThemes || []);\n\n          // Put parsed saved data into state\n          _this.savedState.forEach(function (object, index, arr) {\n            var _this$setState;\n            // Add backwards compatability for the new centering system\n            if (object === "pages") {\n              for (var _i2 = 0; _i2 < objects[object].length; _i2++) {\n                var page = objects[object][_i2];\n                var overlays = page.overlays;\n                if (!page.groupPositionRect) {\n                  page.groupPositionRect = _this.positionRect;\n                }\n                if (!page.personalPositionRect) {\n                  page.personalPositionRect = null;\n                }\n                // Get the personal roles and give them default values (if none exist yet)\n\n                for (var _j = 0; _j < overlays.length; _j++) {\n                  var overlay = overlays[_j];\n                  if (!overlay.positionRect) {\n                    overlay.positionRect = _this.positionRect;\n                  }\n                }\n              }\n            }\n            _this.setState((_this$setState = {}, (0,defineProperty/* default */.Z)(_this$setState, object, objects[object]), (0,defineProperty/* default */.Z)(_this$setState, "savedStateLoaded", true), _this$setState), function () {\n              if (index === arr.length - 1) {\n                // Get full objects for saved groups\n                var fullObjSavedGroups = [];\n                for (var _i3 = 0; _i3 < _this.state.savedGroups.length; _i3++) {\n                  var _savedGroup = [];\n                  for (var _j2 = 0; _j2 < _this.state.savedGroups[_i3].length; _j2++) {\n                    var _groupObj = _this.state.savedGroups[_i3][_j2];\n                    _savedGroup.push(_groupObj);\n                  }\n                  fullObjSavedGroups.push(_savedGroup);\n                }\n                _this.setState({\n                  savedGroups: fullObjSavedGroups\n                }, function () {\n                  // Calculate positions on initial load\n                  if (!doNotRecalculateBounds) {\n                    _this.setState({\n                      canvasLoading: true\n                    }, function () {\n                      _this.props.setCanvasLoading(_this.state.canvasLoading);\n                      setTimeout(function () {\n                        _this.handleFixer();\n                        _this.props.reCenter("edit");\n                      }, 1000);\n                    });\n                  }\n                });\n                for (var _j3 = 0; _j3 < _this.customObjects.length; _j3++) {\n                  var _type = _this.customObjects[_j3];\n                  if (_this.state[_type] === undefined) {\n                    _this.setState((0,defineProperty/* default */.Z)({}, _type, []));\n                    continue;\n                  }\n                  for (var _i4 = 0; _i4 < _this.state[_type].length; _i4++) {\n                    var state = _this.state[_type][_i4];\n                    _this.setCustomGroupPos(state, "groupAreaLayer");\n                    _this.setCustomGroupPos(state, "personalAreaLayer");\n                    _this.setCustomGroupPos(state, "overlayAreaLayer");\n                  }\n                }\n              }\n            });\n          });\n        } else {\n          _this.setState({\n            canvasLoading: false,\n            savedStateLoaded: true\n          });\n        }\n      }).catch(function (error) {\n        console.error(error);\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setCustomGroupPos", function (state, layer) {\n      if (!_this.refs[layer]) return;\n      var groups = _this.refs["".concat(layer, ".objects")].find(\'Group\');\n      var group = null;\n      for (var i = 0; i < groups.length; i++) {\n        if (groups[i].attrs.id === state.id) {\n          group = groups[i];\n          break;\n        }\n      }\n      if (group) {\n        group.rotation(state.rotation);\n        group.scale({\n          x: state.scaleX,\n          y: state.scaleY\n        });\n        group.position({\n          x: state.x,\n          y: state.y\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "removeJSGIFS", function () {\n      // Remove all jsGif elements created by gifs on screen\n      var jsgifs = document.getElementsByClassName("jsgif");\n      while (jsgifs.length > 0) {\n        jsgifs[0].parentNode.removeChild(jsgifs[0]);\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "saveInterval", null);\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "drawInterval", null);\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "componentDidMount", /*#__PURE__*/(0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee() {\n      var MINUTE_MS, resizeTimeout;\n      return regenerator_default().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            MINUTE_MS = 1000 * 60;\n            _this.removeJSGIFS();\n\n            // Auto save the canvas every minute\n            _this.saveInterval = setInterval(function () {\n              _this.handleSave();\n              _this.props.showAlert(_this.props.t("alert.simAutosave"), "info");\n            }, MINUTE_MS);\n\n            // Redraw the canvas every 1 second\n            _this.drawInterval = setInterval(function () {\n              if (_this.state.savedStateLoaded) {\n                var stageType = _this.state.overlayOpen ? "overlayStage" : _this.personalAreaOpen ? "personalStage" : "groupStage";\n                _this.refs[stageType].draw();\n              }\n            }, 1000);\n\n            // Reposition / scale objects on screen resize\n\n            Canvas_history.push(_this.state);\n            _this.props.setPerformanceFunctions({\n              setCustomObjData: _this.setCustomObjData\n            });\n            _this.props.setGameEditProps({\n              setState: _this.setState,\n              state: _this.state,\n              refs: _this.refs,\n              // These are functions used for manipulating objects that are directly used in object props\n              customRect: function customRect(el) {\n                _this.refs.customRect = el;\n              },\n              onObjectClick: _this.onObjectClick,\n              onObjectTransformStart: _this.onObjectTransformStart,\n              onObjectDragMove: _this.onObjectDragMove,\n              onObjectContextMenu: _this.onObjectContextMenu,\n              onObjectTransformEnd: _this.onObjectTransformEnd,\n              handleDragEnd: _this.handleDragEnd,\n              handleTextTransform: _this.handleTextTransform,\n              handleTextDblClick: _this.handleTextDblClick,\n              onDragEndArrow: _this.onDragEndArrow,\n              onDocClick: _this.onDocClick,\n              handleMouseUp: _this.handleMouseUp,\n              handleMouseOver: _this.handleMouseOver,\n              objectSnapping: _this.objectSnapping,\n              onMouseDown: _this.onMouseDown,\n              getKonvaObj: _this.getKonvaObj,\n              getObjType: _this.getObjType,\n              setCustomObjData: _this.setCustomObjData,\n              getInteractiveProps: _this.getInteractiveProps,\n              getVariableProps: _this.getVariableProps,\n              getPageProps: _this.getPageProps,\n              getDragProps: _this.getDragProps,\n              dragLayer: _this.dragLayer,\n              getLayers: _this.getLayers\n            });\n            _this.setState({\n              canvasLoading: false\n            });\n          case 8:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    })));\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleFixer", function () {\n      var newState = JSON.parse(JSON.stringify(_this.state));\n      var removedLayers = [];\n      var roles = [];\n      console.log(\'Performing State Fix...\');\n      var layers = newState.pages.flatMap(function (page) {\n        return [].concat((0,toConsumableArray/* default */.Z)(page.groupLayers), (0,toConsumableArray/* default */.Z)(page.personalLayers), (0,toConsumableArray/* default */.Z)(page.overlays.flatMap(function (overlay) {\n          return overlay.layers;\n        })));\n      });\n      var groupLayers = newState.pages.flatMap(function (page) {\n        return page.groupLayers;\n      });\n      _this.savedObjects.forEach(function (type) {\n        var uniqueById = new Map();\n        var newObjectArray = [];\n        console.log(newState[type]);\n        newState[type] = newState[type].filter(function (item) {\n          if (!roles.includes(item.rolelevel) && item.rolelevel !== undefined && item.rolelevel !== "") roles.push(item.rolelevel);\n          if (layers.includes(item.id)) {\n            uniqueById.set(item.id, true);\n            newObjectArray.push(item);\n            return true;\n          }\n          removedLayers.push(item);\n          return false;\n        });\n        newState[type] = newObjectArray;\n      });\n      roles.map(function (role) {\n        var roleInfo = {\n          numOfSpots: 1,\n          roleDesc: "",\n          roleName: role\n        };\n        newState.roles.push(roleInfo);\n      });\n      _this.props.setRoles(newState.roles);\n      console.log(\'Removed Layers: \', removedLayers);\n      groupLayers.forEach(function (layer) {\n        var type = _this.getObjType(layer);\n        newState[type].forEach(function (item) {\n          if (item.id === layer) item.rolelevel = "";\n        });\n      });\n      _this.setState(newState);\n      _this.setState({\n        canvasLoading: false\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "componentWillUnmount", function () {\n      clearInterval(_this.saveInterval);\n      clearInterval(_this.drawInterval);\n    });\n    // Return current selectedShapeName if input is customRect or ContainerRect\n    // Return input otherwise\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "checkName", function (name) {\n      switch (name) {\n        case "customRect":\n        case "ContainerRect":\n          return _this.state.selectedShapeName;\n        default:\n          return name;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "componentDidUpdate", function (prevProps, prevState) {\n      if (_this.state.savedStateLoaded) {\n        // if (prevState.level !== this.state.level) {\n        //   this.handleFixer();\n        // }\n        var prevMainShapes = [];\n        var currentMainShapes = [];\n        var allShapes = [];\n        for (var i = 0; i < _this.savedObjects.length; i++) {\n          var type = _this.savedObjects[i];\n          prevMainShapes.push(prevState[type]);\n          currentMainShapes.push(_this.state[type]);\n          allShapes = allShapes.concat(_this.state[type]);\n        }\n        _this.props.handleSetPages(_this.state.pages.length);\n        if (_this.state.personalAreaOpen === 0 && _this.state.rolelevel !== \'\') {\n          _this.setState({\n            rolelevel: \'\'\n          });\n        }\n        if (!_this.state.isTransforming && !_this.state.redoing) {\n          if (JSON.stringify(_this.state) !== JSON.stringify(prevState)) {\n            if (JSON.stringify(prevMainShapes) !== JSON.stringify(currentMainShapes)) {\n              _this.props.setAllShapes(allShapes);\n              // If text shouldn\'t update, don\'t append to history\n              if (_this.state.shouldTextUpdate) {\n                var uh = Canvas_history;\n                Canvas_history = uh.slice(0, historyStep + 1);\n                var toAppend = _this.state;\n                Canvas_history = Canvas_history.concat(toAppend);\n                if (_this.state.groupSelection.length === 0) {\n                  historyStep++;\n                } else {\n                  historyStep = historyStep + 1 / _this.state.groupSelection[0].length;\n                }\n              }\n            }\n          }\n        }\n\n        // Delete temp image once image has loaded in\n\n        // Update the custom objects state in the parent component (if custom objs changed)\n        for (var _i5 = 0; _i5 < _this.customObjects.length; _i5++) {\n          if (_this.state[_this.customObjects[_i5]] !== prevState[_this.customObjects[_i5]]) {\n            var customObjs = {};\n            for (var j = 0; j < _this.customObjects.length; j++) {\n              customObjs[_this.customObjects[j]] = _this.state[_this.customObjects[j]];\n            }\n            _this.props.setCustomObjs(customObjs);\n            _this.props.setShapes(customObjs);\n            break;\n          }\n        }\n        if (prevState.canvasLoading !== _this.state.canvasLoading) {\n          _this.props.setCanvasLoading(_this.state.canvasLoading);\n        }\n\n        // This passes info all the way up to the App component so that it can be used in functions\n        // shared between Canvas (Simulation Edit Mode) and CanvasGame (Simulation Play Mode)\n        if (prevState !== _this.state) {\n          if (_this.state.personalAreaOpen !== prevState.personalAreaOpen || _this.state.overlayOpen !== prevState.overlayOpen || _this.state.level !== prevState.level) {\n            //this.refs.customRectCanvas.add(this.refs.customRect);\n            var layer = _this.state.personalAreaOpen ? "personal" : _this.state.overlayOpen ? "overlay" : "group";\n            _this.setState({\n              canvasLoading: true,\n              selectedShapeName: "",\n              groupSelection: [],\n              customRenderRequested: true\n            });\n            setTimeout(function () {\n              return _this.props.reCenter("edit", layer);\n            }, 300);\n          }\n        }\n        if (prevState.selectedShapeName !== _this.state.selectedShapeName) _this.setState({\n          contextDisabled: \'\'\n        });\n        var changeList = Object.keys(_this.state).filter(function (key) {\n          return _this.state[key] !== prevState[key];\n        });\n        if (changeList.some(function (change) {\n          return change.includes("LayerX") || change.includes("LayerY") || change.includes("LayerScale");\n        }) && !_this.state.movingCanvas) {\n          _this.setState({\n            movingCanvas: true\n          });\n        } else if (_this.state.movingCanvas) {\n          _this.setState({\n            movingCanvas: false\n          });\n        }\n        var pageDownNum = 1;\n        if (_this.state.level > _this.state.pages.length) {\n          _this.setState({\n            level: _this.state.level - 1\n          });\n          pageDownNum++;\n        }\n        document.querySelector(\':root\').style.setProperty(\'--primary\', _this.state.pages[_this.state.level - pageDownNum].primaryColor);\n        _this.props.setPageColor(_this.state.pages[_this.state.level - pageDownNum].groupColor);\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handlePageTitle", function (newPageTitles, pageCopied) {\n      _this.setState({\n        pages: newPageTitles\n      }, function () {\n        if (pageCopied !== undefined && pageCopied !== -1) {\n          _this.handleCopyPage(pageCopied);\n        }\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleNumOfPagesChange", function (e) {\n      _this.setState({\n        numberOfPages: parseInt(e)\n      });\n    });\n    // essentially just for testing\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getInteractiveProps", function (id) {\n      return {\n        updateStatus: function updateStatus(parameters) {\n          _this.setState({\n            gamepieceStatus: Canvas_objectSpread(Canvas_objectSpread({}, _this.state.gamepieceStatus), {}, (0,defineProperty/* default */.Z)({}, id, parameters))\n          });\n        },\n        status: _this.state.gamepieceStatus[id] || {}\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleSave", /*#__PURE__*/function () {\n      var _ref2 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee2(thenReload) {\n        var storedObj, i, newObj, body;\n        return regenerator_default().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              storedObj = {};\n              for (i = 0; i < _this.savedState.length; i++) {\n                newObj = _this.savedState[i];\n                storedObj = Canvas_objectSpread(Canvas_objectSpread({}, storedObj), {}, (0,defineProperty/* default */.Z)({}, newObj, _this.state[newObj]));\n              }\n              storedObj.tasks = _this.props.tasks;\n              storedObj.notes = _this.props.notes;\n              storedObj.globalVars = _this.props.globalVars;\n              storedObj.globalCons = _this.props.globalCons;\n              storedObj.globalInts = _this.props.globalInts;\n              storedObj.globalTrigs = _this.props.globalTrigs;\n              storedObj.localVars = _this.props.localVars;\n              storedObj.localCons = _this.props.localCons;\n              storedObj.localInts = _this.props.localInts;\n              storedObj.localTrigs = _this.props.localTrigs;\n              storedObj.groups = _this.props.groups;\n              storedObj.roles = _this.props.roles;\n              storedObj.themes = _this.props.themes;\n              storedObj.shapeThemes = _this.props.shapeThemes;\n              _this.setState({\n                saved: storedObj\n              });\n              body = {\n                id: _this.state.gameinstanceid,\n                game_parameters: JSON.stringify(storedObj),\n                createdby_adminid: localStorage.adminid,\n                invite_url: \'value\'\n              };\n              _this.props.showAlert("Saved", "info");\n\n              // Save the game_parameters\n              _context2.next = 21;\n              return axios_default().put({"REACT_APP_API_ORIGIN":"http://206.12.91.254:8080","REACT_APP_AUTH0_DOMAIN":"dev-3-81kkgt.us.auth0.com","REACT_APP_AUTH0_CLIENT_ID":"DjTX4pPeCfDPKGNcG8AwMEcJjkTZyYp3","REACT_APP_GRAFANAAUTH_KEY":"eyJrIjoiT1BMTmdaNnh3ejl6Um8xMHgzakhnYzNWYUlzVXR1a20iLCJuIjoiRGVtbyIsImlkIjoxfQ==","REACT_APP_GOOGLEAPI_KEY":"AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU"}.REACT_APP_API_ORIGIN + \'/api/gameinstances/update/:id\', body).then(function () {\n                if (thenReload) {\n                  _this.props.setGameEditProps(undefined);\n                  _this.props.reloadCanvasFull();\n                }\n              }).catch(function (error) {\n                console.error(error);\n              });\n            case 21:\n            case "end":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onObjectContextMenu", function (e) {\n      if ((_this.state.selectedShapeName || _this.state.groupSelection.length) && _this.state.selectedShapeName !== "pencils" && !_this.state.drawMode) {\n        var _event = e.evt ? e.evt : e;\n        _event.preventDefault(true);\n        var mouseX = 0;\n        var mouseY = 0;\n        if (_event.changedTouches) {\n          mouseX = _event.changedTouches[0].clientX;\n          mouseY = _event.changedTouches[0].clientY;\n        } else {\n          mouseX = _event.clientX;\n          mouseY = _event.clientY;\n        }\n        var mousePosition = {\n          x: mouseX,\n          y: mouseY\n        };\n        var singleGroupSelected = false;\n        if (_this.state.groupSelection.length === 1 && Array.isArray(_this.state.groupSelection[0])) {\n          singleGroupSelected = true;\n        }\n        _this.setState({\n          selectedContextMenu: {\n            unGroup: singleGroupSelected ? true : false,\n            addGroup: _this.state.groupSelection.length && !singleGroupSelected ? true : false,\n            type: "ObjectMenu",\n            position: mousePosition\n          }\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "updateSelectionRect", function (personalArea) {\n      var node = _this.refs.groupSelectionRect;\n      if (_this.state.overlayOpen) {\n        node = _this.refs.overlaySelectionRect;\n      } else if (personalArea) {\n        node = _this.refs.personalSelectionRect;\n      }\n      if (!node) return;\n      node.setAttrs({\n        visible: _this.state.selection.visible,\n        x: Math.min(_this.state.selection.x1, _this.state.selection.x2),\n        y: Math.min(_this.state.selection.y1, _this.state.selection.y2),\n        width: Math.abs(_this.state.selection.x1 - _this.state.selection.x2),\n        height: Math.abs(_this.state.selection.y1 - _this.state.selection.y2),\n        fill: "rgba(0, 161, 255, 0.3)"\n      });\n      node.getLayer().batchDraw();\n    });\n    // Return the ID of top most object at a given position on screen\n    // With some basic object info\n    // If no object is found return null\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getTopObjAtPos", function (pos) {\n      var _shape, _shape$attrs, _shape2, _shape2$attrs, _shape3;\n      // pos should be in the form of {x: #, y: #}\n      // where x and y are relative to the client (not the stage)\n      var layer = _this.state.overlayOpen ? "overlayAreaLayer" : _this.state.personalAreaOpen ? "personalAreaLayer" : "groupAreaLayer";\n      var stageElem = null;\n      if (layer === "overlayAreaLayer") {\n        stageElem = document.getElementById("overlayGameContainer").querySelector(".konvajs-content");\n      } else if (layer === "personalAreaLayer") {\n        stageElem = document.getElementById("personalMainContainer").querySelector(".konvajs-content");\n      } else {\n        stageElem = document.getElementById("editMainContainer").querySelector(".konvajs-content");\n      }\n      var stageBox = stageElem.getBoundingClientRect();\n      // This is the position relative to the stage (whereas pos is relative to the whole screen)\n      var relPos = {\n        x: pos.x - stageBox.left,\n        y: pos.y - stageBox.top\n      };\n      var layerIds = _this.getLayers();\n      var objs = (0,toConsumableArray/* default */.Z)(_this.state[\'rectangles\']);\n      // (objs.forEach(obj => console.log(obj.x, obj.y)))\n      // First check Konva component intersections\n      var shape = _this.refs["".concat(layer, ".objects")].getIntersection(relPos);\n      if (((_shape = shape) === null || _shape === void 0 ? void 0 : (_shape$attrs = _shape.attrs) === null || _shape$attrs === void 0 ? void 0 : _shape$attrs.id) === "customRect") {\n        // Only run this if a customRect gets in the way but the object is in the back\n        // because it is very inefficient\n        shape = _this.refs["".concat(layer, ".objects")].getAllIntersections(relPos).filter(function (obj) {\n          var _obj$attrs, _obj$attrs2;\n          return (obj === null || obj === void 0 ? void 0 : (_obj$attrs = obj.attrs) === null || _obj$attrs === void 0 ? void 0 : _obj$attrs.id) !== "customRect" && (obj === null || obj === void 0 ? void 0 : (_obj$attrs2 = obj.attrs) === null || _obj$attrs2 === void 0 ? void 0 : _obj$attrs2.id) !== "ContainerRect";\n        }).pop();\n      }\n      if (shape && (shape.attrs.id === "ContainerRect" || shape.attrs.id === undefined)) {\n        shape = null;\n      }\n\n      // Now check if a custom component is on top\n      var customObjs = Array.from(document.getElementsByClassName("customObj")).reverse();\n      var _loop = function _loop() {\n        var obj = customObjs[i];\n        var id = obj === null || obj === void 0 ? void 0 : obj.dataset.name;\n        var objType = _this.getObjType(id);\n        var objState = _this.state[objType].filter(function (obj) {\n          return obj.id === id;\n        })[0];\n        var objBox = obj.getBoundingClientRect();\n        if (layerIds.includes(id)) {\n          if (pos.x > objBox.x && pos.x < objBox.x + objBox.width && pos.y > objBox.y && pos.y < objBox.y + objBox.height && (!shape || objState.onTop)) {\n            shape = objState;\n            return "break";\n          }\n        } else {\n          console.error("ERROR: Custom object not in current layers being rendered.");\n        }\n      };\n      for (var i = 0; i < customObjs.length; i++) {\n        var _ret = _loop();\n        if (_ret === "break") break;\n      }\n      if ((_shape2 = shape) !== null && _shape2 !== void 0 && (_shape2$attrs = _shape2.attrs) !== null && _shape2$attrs !== void 0 && _shape2$attrs.id) {\n        return {\n          attrs: {\n            id: shape.attrs.id\n          },\n          id: shape.attrs.id,\n          custom: true\n        };\n      } else if ((_shape3 = shape) !== null && _shape3 !== void 0 && _shape3.id) {\n        return {\n          attrs: {\n            id: shape.id\n          },\n          id: shape.id,\n          custom: true\n        };\n      } else {\n        return null;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onMouseDown", function (e, personalArea) {\n      var event = e.evt ? e.evt : e;\n      var shape = _this.getTopObjAtPos({\n        x: event.clientX,\n        y: event.clientY\n      });\n      if (!event.ctrlKey) {\n        _this.setState({\n          layerDraggable: false\n        });\n      }\n      var pos = null;\n      if (event.layerX) {\n        pos = {\n          x: event.clientX - 70,\n          y: event.clientY - (personalArea ? 50 : _this.state.overlayOpen ? 20 : 0)\n        };\n      } else {\n        var sidebarPx = window.matchMedia("(orientation: portrait)").matches ? 0 : 100;\n        if (sidebarPx > 0 && personalArea) {\n          sidebarPx = 100;\n        }\n        pos = {\n          x: (event.clientX ? event.clientX : event.targetTouches ? event.targetTouches[0].clientX : _this.state.mouseX) - sidebarPx,\n          y: event.clientY ? event.clientY : event.targetTouches ? event.targetTouches[0].clientY : _this.state.mouseY\n        };\n      }\n      var scale = _this.state.groupLayerScale;\n      var xOffset = -_this.state.groupLayerX;\n      var yOffset = -_this.state.groupLayerY - 40;\n      if (personalArea) {\n        scale = _this.state.personalLayerScale;\n        xOffset = -_this.state.personalLayerX - 20;\n        yOffset = -_this.state.personalLayerY;\n      } else if (_this.state.overlayOpen) {\n        scale = _this.state.overlayLayerScale;\n        xOffset = -_this.state.overlayLayerX - 20;\n        yOffset = -_this.state.overlayLayerY;\n      }\n      if (_this.state.drawMode === true) {\n        _this.setState({\n          isDrawing: true\n        });\n        var tool = _this.state.tool;\n        var newPencil = {\n          tool: tool,\n          points: [(pos.x + xOffset) / scale, (pos.y + yOffset) / scale],\n          level: _this.state.level,\n          color: _this.state.color,\n          id: "pencils".concat(_this.state.pencils.length),\n          infolevel: personalArea,\n          rolelevel: _this.state.rolelevel,\n          strokeWidth: _this.state.drawStrokeWidth\n        };\n        _this.setState({\n          pencils: [].concat((0,toConsumableArray/* default */.Z)(_this.state.pencils), [newPencil])\n        });\n        _this.setLayers([].concat((0,toConsumableArray/* default */.Z)(_this.getLayers()), [newPencil.id]));\n      } else {\n        if (e.evt) {\n          var isElement = e.target.findAncestor(".elements-container");\n          var isTransformer = e.target.findAncestor("Transformer");\n          if (isElement || isTransformer) {\n            return;\n          }\n        }\n        _this.setState({\n          selection: {\n            isDraggingShape: shape ? shape.id : null,\n            visible: true,\n            x1: (pos.x + xOffset) / scale,\n            y1: (pos.y + yOffset) / scale,\n            x2: (pos.x + xOffset) / scale,\n            y2: (pos.y + yOffset) / scale\n          }\n        }, function () {\n          _this.updateSelectionRect(personalArea);\n        });\n      }\n    });\n    // Get list of object ids that are layers on the current canvas\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getLayers", function () {\n      var page = _this.state.pages[_this.state.level - 1];\n      if (_this.state.overlayOpen) {\n        var overlay = page.overlays.filter(function (overlay) {\n          return overlay.id === _this.state.overlayOpenIndex;\n        })[0];\n        return overlay.layers;\n      } else if (_this.state.personalAreaOpen) {\n        return page.personalLayers;\n      } else {\n        return page.groupLayers;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setLayers", function (newLayers) {\n      var page = _this.state.pages[_this.state.level - 1]; // deep copy\n      var out = new Set();\n      var newLay = new Set(newLayers);\n      _this.savedObjects.forEach(function (type) {\n        var objs = _this.state[type];\n        objs.forEach(function (obj) {\n          if (obj.id && obj.level === _this.state.level && newLay.has(obj.id)) {\n            out.add(obj.id);\n          }\n        });\n      });\n      newLay = new Set((0,toConsumableArray/* default */.Z)(newLay).filter(function (layer) {\n        return out.has(layer);\n      }));\n\n      // Logs\n      (0,toConsumableArray/* default */.Z)(newLay).forEach(function (layer) {\n        if (out.has(layer)) {}\n      });\n      newLayers = Array.from(newLay);\n      if (_this.state.overlayOpen) {\n        var overlayIndex = page.overlays.findIndex(function (overlay) {\n          return overlay.id === _this.state.overlayOpenIndex;\n        });\n        if (overlayIndex !== -1 && page.overlays[overlayIndex].layers) {\n          page.overlays[overlayIndex].layers = newLayers;\n        }\n      } else if (_this.state.personalAreaOpen && page.personalLayers) {\n        page.personalLayers = newLayers;\n      } else if (page.groupLayers) {\n        page.groupLayers = newLayers;\n      }\n      var newPages = (0,toConsumableArray/* default */.Z)(_this.state.pages);\n      newPages[_this.state.level - 1] = page;\n      _this.setState({\n        pages: newPages\n      }, function () {\n        return console.log(_this.state.pages);\n      }); // log after state update\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleMouseUp", function (e, personalArea) {\n      // console.log(this.state.pages)\n      _this.setState({\n        selection: Canvas_objectSpread(Canvas_objectSpread({}, _this.state.selection), {}, {\n          visible: false\n        })\n      });\n      var event = e.evt ? e.evt : e;\n      _this.setState({\n        redoing: false\n      });\n      var shape = _this.getTopObjAtPos({\n        x: event.clientX,\n        y: event.clientY\n      });\n      if (_this.state.lineTransformDragging) {\n        _this.setState({\n          lineTransformDragging: false\n        });\n        document.body.style.cursor = "auto";\n      }\n\n      // Determine how long screen has been clicked (if on mobile)\n      if (_this.state.touchTime && _this.state.touchEvent) {\n        var elapsedTimeMS = Date.now() - _this.state.touchTime;\n        if (elapsedTimeMS > 500) {\n          event.button = 2;\n        } else {\n          event.button = 0;\n        }\n        _this.setState({\n          touchTime: null,\n          touchEvent: null\n        });\n      }\n      if (_this.state.drawMode === true) {\n        _this.setState({\n          isDrawing: false\n        });\n      } else {\n        if (!_this.state.selection.visible && !event.changedTouches && !_this.props.customObjects.includes(_this.getObjType(_this.state.selectedShapeName))) {\n          return;\n        }\n        var clickShapeGroup = shape ? _this.getShapeGroup(shape.custom ? shape.id : _this.refs[shape.id]) : null;\n        if (event.button === 0) {\n          // LEFT CLICK\n          var layer = _this.state.overlayOpen ? "overlayAreaLayer" : _this.state.personalAreaOpen ? "personalAreaLayer" : "groupAreaLayer";\n          var selectionRect = _this.state.overlayOpen ? "overlaySelectionRect" : personalArea ? "personalSelectionRect" : "groupSelectionRect";\n          var selBox = _this.refs[selectionRect] ? _this.refs[selectionRect].getClientRect() : null;\n          if (!selBox) return;\n          if (selBox.width > 1 && selBox.height > 1) {\n            // This only runs if there has been a rectangle selection (click and drag selection)\n            var elements = [];\n            _this.refs["".concat(layer, ".objects")].find(".shape, .customObj").forEach(function (elementNode) {\n              var elBox = elementNode.getClientRect();\n              if (konva_lib/* default */.Z.Util.haveIntersection(selBox, elBox)) {\n                elements.push(elementNode);\n              }\n            });\n            // Handle if nothing, one thing, or a group has been selected\n            if (elements.length === 0) {\n              _this.setState({\n                selectedShapeName: "",\n                groupSelection: []\n              }, _this.handleObjectSelection);\n            } else {\n              // Get any selected groups\n              var elemIds = [];\n              for (var i = 0; i < elements.length; i++) {\n                elemIds.push(elements[i].attrs.id);\n              }\n              var selectedGroups = [];\n              for (var _i6 = 0; _i6 < _this.state.savedGroups.length; _i6++) {\n                var group = _this.state.savedGroups[_i6];\n                for (var j = 0; j < group.length; j++) {\n                  if (elemIds.includes(group[j])) {\n                    selectedGroups.push(group);\n                    break;\n                  }\n                }\n              }\n              var _loop2 = function _loop2() {\n                var group = selectedGroups[_i7];\n                var _loop3 = function _loop3(_j4) {\n                  elemIds = elemIds.filter(function (e) {\n                    return group[_j4] !== e;\n                  });\n                };\n                for (var _j4 = 0; _j4 < group.length; _j4++) {\n                  _loop3(_j4);\n                }\n              };\n              for (var _i7 = 0; _i7 < selectedGroups.length; _i7++) {\n                _loop2();\n              }\n              if (selectedGroups.length === 0 && elemIds.length === 1) {\n                _this.setState({\n                  selectedShapeName: _this.checkName(elements[0].id()),\n                  groupSelection: []\n                }, _this.handleObjectSelection);\n              } else {\n                var selection = [].concat(selectedGroups, (0,toConsumableArray/* default */.Z)(elemIds));\n                if (!_this.state.selection.isDraggingShape) {\n                  _this.setState({\n                    selectedShapeName: "",\n                    groupSelection: selection\n                  }, _this.handleObjectSelection);\n                }\n              }\n            }\n          } else {\n            // There has been a single left click\n            if (shape) {\n              if (event.shiftKey) {\n                // Shift selected -> create group selection\n\n                // The object that was just shift selected\n                var alreadySelectedCurrent = false;\n                // The object already selected while new shift selection was made\n                var alreadySelectedPrev = false;\n\n                // This determines if the object that was just selected or was previously selected\n                // is part of the groupSelection already so the logic will deal with it accordingly\n                // Current already selected -> deselect\n                // Prev already selected & different -> add to new group selection\n                var _loop4 = function _loop4() {\n                  var obj = _this.state.groupSelection[_i8];\n                  if (!Array.isArray(obj)) {\n                    if (obj.attrs ? obj.attrs.id === shape.id : obj === shape.id) {\n                      alreadySelectedCurrent = true;\n                    }\n                    if (obj.attrs ? _this.state.selectedShapeName && obj.attrs.id === _this.state.selectedShapeName : _this.state.selectedShapeName && obj === _this.selectedShapeName) {\n                      alreadySelectedPrev = true;\n                    }\n                  } else if (clickShapeGroup) {\n                    var clickedGroupIsObj = obj.every(function (item) {\n                      return clickShapeGroup.includes(item);\n                    }) && clickShapeGroup.every(function (item) {\n                      return obj.includes(item);\n                    });\n                    if (clickedGroupIsObj) {\n                      alreadySelectedCurrent = true;\n                      return "break";\n                    }\n                  }\n                  if (alreadySelectedCurrent && (alreadySelectedPrev || !_this.state.selectedShapeName)) {\n                    return "break";\n                  }\n                };\n                for (var _i8 = 0; _i8 < _this.state.groupSelection.length; _i8++) {\n                  var _ret2 = _loop4();\n                  if (_ret2 === "break") break;\n                }\n                if (_this.state.selectedShapeName !== shape.id || _this.state.groupSelection.length) {\n                  if (!alreadySelectedCurrent) {\n                    // ADD SELECTION\n                    var newSelection = (0,toConsumableArray/* default */.Z)(_this.state.groupSelection);\n                    if (!alreadySelectedPrev && _this.state.selectedShapeName !== shape.id && _this.state.selectedShapeName) {\n                      newSelection.push(_this.state.selectedShapeName);\n                    }\n                    if (newSelection.length === 0) {\n                      // Shift select with nothing else selected so set it as the selection\n                      if (!clickShapeGroup) {\n                        _this.setState({\n                          selectedShapeName: _this.checkName(shape.id),\n                          groupSelection: []\n                        }, _this.handleObjectSelection);\n                      } else {\n                        _this.setState({\n                          selectedShapeName: "",\n                          groupSelection: [clickShapeGroup]\n                        }, _this.handleObjectSelection);\n                      }\n                    } else {\n                      // Add the new selection to the shift select group\n                      if (!clickShapeGroup) {\n                        _this.setState({\n                          selectedShapeName: "",\n                          groupSelection: [].concat((0,toConsumableArray/* default */.Z)(newSelection), [shape.id])\n                        }, _this.handleObjectSelection);\n                      } else {\n                        _this.setState({\n                          selectedShapeName: "",\n                          groupSelection: [].concat((0,toConsumableArray/* default */.Z)(newSelection), [clickShapeGroup])\n                        }, _this.handleObjectSelection);\n                      }\n                    }\n                  } else {\n                    // REMOVE SELECTION\n\n                    var newGroupSelection = _this.state.groupSelection.filter(function (obj) {\n                      if (Array.isArray(obj)) {\n                        if (clickShapeGroup) {\n                          var clickedGroupIsObj = obj.every(function (item) {\n                            return clickShapeGroup.includes(item);\n                          }) && clickShapeGroup.every(function (item) {\n                            return obj.includes(item);\n                          });\n                          return !clickedGroupIsObj;\n                        } else {\n                          return true;\n                        }\n                      } else {\n                        return obj.attrs ? obj.attrs.id !== shape.id : obj !== shape.id;\n                      }\n                    });\n                    if (newGroupSelection.length === 1) {\n                      // Only one selection left\n\n                      if (Array.isArray(newGroupSelection[0])) {\n                        _this.setState({\n                          selectedShapeName: "",\n                          groupSelection: [newGroupSelection[0]]\n                        }, _this.handleObjectSelection);\n                      } else {\n                        _this.setState({\n                          selectedShapeName: _this.checkName(newGroupSelection[0]),\n                          groupSelection: []\n                        }, _this.handleObjectSelection);\n                      }\n                    } else {\n                      _this.setState({\n                        selectedShapeName: "",\n                        groupSelection: newGroupSelection\n                      }, _this.handleObjectSelection);\n                    }\n                  }\n                }\n              } else {\n                // Clicked on object -> put the selected object in state\n                if (clickShapeGroup) {\n                  _this.setState({\n                    selectedShapeName: "",\n                    groupSelection: [clickShapeGroup]\n                  }, _this.handleObjectSelection);\n                } else {\n                  if (shape !== null && shape !== void 0 && shape.custom) {\n                    _this.setState({\n                      selectedShapeName: shape.id,\n                      groupSelection: [],\n                      selection: Canvas_objectSpread(Canvas_objectSpread({}, _this.state.selection), {}, {\n                        isDraggingShape: "customObj",\n                        visible: false\n                      })\n                    }, function () {\n                      _this.handleObjectSelection();\n                      _this.updateSelectionRect(personalArea);\n                    });\n                    return;\n                  }\n                  _this.setState({\n                    selectedShapeName: _this.checkName(shape.id),\n                    groupSelection: []\n                  }, _this.handleObjectSelection);\n                }\n              }\n            } else {\n              // Clicked on nothing -> deselect all\n              if (!_this.state.selection.isDraggingShape) {\n                _this.setState({\n                  selectedShapeName: "",\n                  groupSelection: []\n                }, _this.handleObjectSelection);\n              }\n            }\n          }\n        } else if (event.button === 2) {\n          if (event.ctrlKey) {\n            _this.handleContextMenuHook(personalArea);\n            return;\n          }\n          // RIGHT CLICK\n          if (personalArea && !_this.state.rolelevel) {\n            _this.props.showAlert(_this.props.t("alert.personalEditAttemptNoRole"), "warning");\n            return;\n          }\n          if (shape && shape.id !== "pencils") {\n            if (clickShapeGroup) {\n              // Check if group already selected to avoid duplicates\n              var alreadySelected = false;\n              for (var _i9 = 0; _i9 < _this.state.groupSelection.length; _i9++) {\n                var obj = _this.state.groupSelection[_i9];\n                if (Array.isArray(obj) && obj.includes(clickShapeGroup[0])) {\n                  alreadySelected = true;\n                }\n              }\n              if (!alreadySelected) {\n                _this.setState({\n                  selectedShapeName: "",\n                  groupSelection: [].concat((0,toConsumableArray/* default */.Z)(_this.state.groupSelection), [clickShapeGroup])\n                }, _this.handleObjectSelection);\n              }\n            } else {\n              // Right click on a shape -> set it to the selection\n              var shapeIsInGroupSelection = false;\n              for (var _i10 = 0; _i10 < _this.state.groupSelection.length; _i10++) {\n                if (!Array.isArray(_this.state.groupSelection[_i10]) && (_this.state.groupSelection[_i10].attrs ? _this.state.groupSelection[_i10].attrs.id === shape.id : _this.state.groupSelection[_i10] === shape.id)) {\n                  shapeIsInGroupSelection = true;\n                  break;\n                }\n              }\n              if (!shapeIsInGroupSelection) {\n                _this.setState({\n                  selectedShapeName: _this.checkName(shape.id),\n                  groupSelection: []\n                }, _this.handleObjectSelection);\n              }\n            }\n            _this.onObjectContextMenu(event);\n          } else {\n            _this.handleContextMenuHook(personalArea);\n          }\n        }\n        (0,react_dom.flushSync)(function () {\n          _this.setState({\n            selection: Canvas_objectSpread(Canvas_objectSpread({}, _this.state.selection), {}, {\n              visible: false\n            })\n          });\n        });\n\n        // Disable click event\n        konva_lib/* default */.Z.listenClickTap = false;\n        _this.updateSelectionRect(personalArea);\n\n        // Update custom object transform\n        if (e.evt) {\n          _this.getKonvaObj(_this.state.selectedShapeName, true, true);\n        }\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleContextMenuHook", function (personalArea) {\n      var _this$setState3;\n      console.log("handleContextMenuHook");\n      var areaClicked = personalArea ? "personal" : _this.state.overlayOpen ? "overlay" : "group";\n      var type;\n      var notVisible;\n      var visible;\n      var contextMenuX;\n      var contextMenuY;\n      var layerX = event.clientX - (personalArea ? 100 : 70);\n      var layerY = event.clientY - (personalArea ? 60 : _this.state.overlayOpen ? 0 : 50);\n      if (areaClicked === "personal") {\n        type = "PersonalAddMenu";\n        notVisible = "groupAreaContextMenuVisible";\n        visible = "personalAreaContextMenuVisible";\n        contextMenuX = "personalAreaContextMenuX";\n        contextMenuY = "personalAreaContextMenuY";\n      } else if (areaClicked === "overlay") {\n        type = "OverlayAddMenu";\n        notVisible = "groupAreaContextMenuVisible";\n        visible = "overlayAreaContextMenuVisible";\n        contextMenuX = "overlayAreaContextMenuX";\n        contextMenuY = "overlayAreaContextMenuY";\n      } else {\n        type = "GroupAddMenu";\n        notVisible = "personalAreaContextMenuVisible";\n        visible = "groupAreaContextMenuVisible";\n        contextMenuX = "groupAreaContextMenuX";\n        contextMenuY = "groupAreaContextMenuY";\n      }\n      var rel = _this.refs["".concat(areaClicked, "AreaLayer.objects")].getRelativePointerPosition();\n      _this.setState((_this$setState3 = {\n        selectedContextMenu: {\n          type: type,\n          position: {\n            x: layerX,\n            y: layerY,\n            relX: rel.x,\n            relY: rel.y\n          }\n        }\n      }, (0,defineProperty/* default */.Z)(_this$setState3, notVisible, false), (0,defineProperty/* default */.Z)(_this$setState3, visible, true), (0,defineProperty/* default */.Z)(_this$setState3, contextMenuX, layerX), (0,defineProperty/* default */.Z)(_this$setState3, contextMenuY, layerY), _this$setState3));\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "simulateMouseEvent", function (el, event) {\n      if (window.MouseEvent && typeof window.MouseEvent === \'function\') {\n        event = new MouseEvent(event);\n      } else {\n        event = document.createEvent(\'MouseEvent\');\n        event.initMouseEvent(event);\n      }\n      el.dispatchEvent(event);\n    });\n    // Put the Transform around the selected object / group\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleObjectSelection", function () {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      var transformer = _this.state.personalAreaOpen ? "personalTransformer" : _this.state.overlayOpen ? "overlayTransformer" : "groupTransformer";\n      if (_this.refs[_this.state.selectedShapeName]) {\n        _this.refs[transformer].nodes([_this.getKonvaObj(_this.state.selectedShapeName, true, false)]);\n      } else if (type === "" && _this.state.groupSelection.length) {\n        var layer = _this.state.personalAreaOpen ? "personalAreaLayer" : _this.state.overlayOpen ? "overlayAreaLayer" : "groupAreaLayer";\n        var groups = _this.refs["".concat(layer, ".objects")].find(\'Group\');\n        var groupObjs = _this.state.groupSelection.flat().map(function (obj) {\n          if (_this.customObjects.includes(_this.getObjType(obj))) {\n            return groups.find(function (groupObj) {\n              return groupObj.attrs.id === obj;\n            });\n          } else {\n            return _this.refs[obj];\n          }\n        });\n        _this.refs[transformer].nodes(groupObjs);\n      } else if (_this.refs[transformer]) {\n        _this.refs[transformer].nodes([]);\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleMouseOver", function (e, personalArea) {\n      var event = e.evt ? e.evt : e;\n      var scale = _this.state.groupLayerScale;\n      var xOffset = -_this.state.groupLayerX;\n      var yOffset = -_this.state.groupLayerY;\n      if (_this.state.overlayOpen) {\n        scale = _this.state.overlayLayerScale;\n        xOffset = -_this.state.overlayLayerX;\n        yOffset = -_this.state.overlayLayerY;\n      } else if (personalArea) {\n        scale = _this.state.personalLayerScale;\n        xOffset = -_this.state.personalLayerX;\n        yOffset = -_this.state.personalLayerY;\n      }\n\n      // Get the current arrow ref and modify its position by filtering & pushing again\n      if (_this.state.drawMode === true) {\n        if (!_this.state.isDrawing || event.ctrlKey) {\n          return;\n        }\n        var stage = e.target.getStage();\n        var point = stage.getPointerPosition();\n        var lastLine = _this.state.pencils[_this.state.pencils.length - 1];\n        // Add point\n        lastLine.points = lastLine.points.concat([(point.x + xOffset) / scale, (point.y + yOffset) / scale]);\n\n        // Replace last\n        _this.state.pencils.splice(_this.state.pencils.length - 1, 1, lastLine);\n        _this.setState({\n          pencils: _this.state.pencils.concat()\n        });\n      } else {\n        if (!_this.state.selection.visible && !_this.state.layerDraggable) {\n          return;\n        }\n        var _stage = personalArea ? "personal" : _this.state.overlayOpen ? "overlay" : "group";\n        var pos = _this.refs[_stage + "Stage"].getPointerPosition();\n        var shape = _this.refs[_stage + "Stage"].getIntersection(pos);\n        if (_this.state.lineTransformDragging && _this.state.selectedShapeName) {\n          var newLines = (0,toConsumableArray/* default */.Z)(_this.state.lines).filter(function (line) {\n            return line.id !== _this.state.selectedShapeName;\n          });\n          var newLine = (0,toConsumableArray/* default */.Z)(_this.state.lines).filter(function (line) {\n            return line.id === _this.state.selectedShapeName;\n          })[0];\n          var xIndex = _this.state.lineTransformDragging === "top" ? 0 : 2;\n          var yIndex = _this.state.lineTransformDragging === "top" ? 1 : 3;\n          if (newLine) {\n            newLine.points[xIndex] = newLine.points[xIndex] + event.movementX / _this.state["".concat(_stage, "LayerScale")];\n            newLine.points[yIndex] = newLine.points[yIndex] + event.movementY / _this.state["".concat(_stage, "LayerScale")];\n            _this.setState({\n              lines: [].concat((0,toConsumableArray/* default */.Z)(newLines), [newLine])\n            });\n          }\n          return;\n        }\n        if (shape && shape.attrs.link) {\n          document.body.style.cursor = "pointer";\n        } else if (shape) {\n          // Only have drag select on left click and drag\n          if (event.buttons === 1 && !_this.state.layerDraggable) {\n            if (_this.state.selection.isDraggingShape && _this.state.selectedShapeName !== "pencils") {\n              // Select the shape being dragged (and don\'t create a selection)\n              var shapeGroup = _this.getShapeGroup(shape);\n              if (shapeGroup) {\n                _this.setState({\n                  selectedShapeName: "",\n                  groupSelection: [shapeGroup]\n                }, _this.handleObjectSelection);\n              } else {\n                var shapeId = "";\n                if (_this.state.selection.isDraggingShape === "customObj") {\n                  var customObjs = Array.from(document.getElementsByClassName("customObj"));\n                  customObjs.reverse();\n                  var _loop5 = function _loop5() {\n                    var _customObjs$i, _customObjs$i$dataset;\n                    var bounds = customObjs[i].getBoundingClientRect();\n                    var id = (_customObjs$i = customObjs[i]) === null || _customObjs$i === void 0 ? void 0 : (_customObjs$i$dataset = _customObjs$i.dataset) === null || _customObjs$i$dataset === void 0 ? void 0 : _customObjs$i$dataset.name;\n                    var onTop = _this.state[_this.getObjType(id)].filter(function (obj) {\n                      return obj.id === id;\n                    })[0].onTop;\n                    if ((!_this.state.selection.isDraggingShape || _this.state.selection.isDraggingShape === "customObj") && !(shape && !onTop) && pos.x > bounds.left && pos.x < bounds.right && pos.y > bounds.top && pos.y < bounds.bottom) {\n                      var _customObjs$i2, _customObjs$i2$datase;\n                      shapeId = (_customObjs$i2 = customObjs[i]) === null || _customObjs$i2 === void 0 ? void 0 : (_customObjs$i2$datase = _customObjs$i2.dataset) === null || _customObjs$i2$datase === void 0 ? void 0 : _customObjs$i2$datase.name;\n                      return "break";\n                    }\n                  };\n                  for (var i = 0; i < customObjs.length; i++) {\n                    var _ret3 = _loop5();\n                    if (_ret3 === "break") break;\n                  }\n                } else {\n                  shapeId = shape.id();\n                }\n                _this.setState({\n                  selectedShapeName: _this.checkName(shapeId),\n                  groupSelection: []\n                }, _this.handleObjectSelection);\n              }\n            } else {\n              // Create drag selection rectangle\n\n              _this.setState({\n                selection: Canvas_objectSpread(Canvas_objectSpread({}, _this.state.selection), {}, {\n                  x2: (pos.x + xOffset) / scale,\n                  y2: (pos.y + yOffset) / scale\n                })\n              }, function () {\n                _this.updateSelectionRect(personalArea);\n              });\n            }\n          }\n        }\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleDragEnd", function (e, objectsName, ref) {\n      var shape = null;\n      var layer = _this.state.personalAreaOpen ? "personalAreaLayer" : _this.state.overlayOpen ? "overlayAreaLayer" : "groupAreaLayer";\n      if (_this.customObjects.includes(objectsName)) {\n        var customObjs = _this.refs["".concat(layer, ".objects")].find(\'Group\');\n        for (var i = 0; i < customObjs.length; i++) {\n          var id = customObjs[i].attrs.id;\n          if (id === ref) {\n            shape = customObjs[i];\n          }\n        }\n      } else {\n        shape = _this.refs[ref];\n      }\n      var out = _this.state[objectsName].map(function (eachObj) {\n        var _shape4;\n        return eachObj.id === ((_shape4 = shape) === null || _shape4 === void 0 ? void 0 : _shape4.attrs.id) ? Canvas_objectSpread(Canvas_objectSpread({}, eachObj), {}, {\n          x: e.target.x(),\n          y: e.target.y()\n        }) : eachObj;\n      });\n      (0,react_dom.flushSync)(function () {\n        var _this$setState4;\n        _this.setState((_this$setState4 = {}, (0,defineProperty/* default */.Z)(_this$setState4, objectsName, out), (0,defineProperty/* default */.Z)(_this$setState4, "selectedShapeName", _this.state.groupSelection.length ? "" : _this.state.selectedShapeName), (0,defineProperty/* default */.Z)(_this$setState4, "guides", []), _this$setState4), _this.handleObjectSelection);\n      });\n      var stageType = _this.state.overlayOpen ? "overlayStage" : _this.personalAreaOpen ? "personalStage" : "groupStage";\n      _this.refs[stageType].draw();\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleWheel", function (e, personalArea) {\n      var scaleBy = 1.2;\n      var stage = _this.state.overlayOpen ? "overlay" : personalArea ? "personal" : "group";\n      var layer = _this.refs["".concat(stage, "AreaLayer.objects")];\n      var oldScale = layer.scaleX();\n      var newScale = e.evt.deltaY < 0 ? oldScale * scaleBy : oldScale / scaleBy;\n      var stageArea = layer.getStage();\n      var pointer = stageArea.getPointerPosition();\n      var mousePos = {\n        x: (pointer.x - _this.state["".concat(stage, "LayerX")]) / oldScale,\n        y: (pointer.y - _this.state["".concat(stage, "LayerY")]) / oldScale\n      };\n      var maxZoom = 250;\n      var maxUnZoom = 0.1;\n      if (newScale > maxZoom) {\n        _this.props.showAlert(_this.props.t("alert.maxZoomReached"), "info");\n        newScale = 250;\n      }\n      if (newScale < maxUnZoom) {\n        _this.props.showAlert(_this.props.t("alert.maxZoomReached"), "info");\n        newScale = 0.1;\n      }\n      var newPos = {\n        x: pointer.x - mousePos.x * newScale,\n        y: pointer.y - mousePos.y * newScale\n      };\n      layer.scale({\n        x: newScale,\n        y: newScale\n      });\n      var layerScale = "".concat(stage, "LayerScale");\n      (0,react_dom.flushSync)(function () {\n        var _this$setState5;\n        _this.setState((_this$setState5 = {}, (0,defineProperty/* default */.Z)(_this$setState5, layerScale, newScale), (0,defineProperty/* default */.Z)(_this$setState5, "".concat(stage, "LayerX"), newPos.x), (0,defineProperty/* default */.Z)(_this$setState5, "".concat(stage, "LayerY"), newPos.y), _this$setState5));\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "dragLayer", function (e) {\n      var type = _this.state.overlayOpen ? "overlay" : _this.state.personalAreaOpen ? "personal" : "group";\n      if (_this.state.layerDraggable) {\n        var _this$setState6;\n        _this.setState((_this$setState6 = {}, (0,defineProperty/* default */.Z)(_this$setState6, "".concat(type, "LayerX"), e.target.x()), (0,defineProperty/* default */.Z)(_this$setState6, "".concat(type, "LayerY"), e.target.y()), _this$setState6));\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleUndo", function () {\n      // this.handleSave();\n      var stageType = _this.state.overlayOpen ? "overlayLayers" : _this.personalAreaOpen ? "personalLayers" : "groupLayers";\n      if (!_this.state.isTransforming) {\n        if (!_this.state.textEditVisible) {\n          historyStep = Math.round(historyStep);\n          if (historyStep === 1) {\n            return;\n          }\n          historyStep--;\n          var previous = Canvas_history[historyStep];\n          for (var i = 0; i < _this.savedObjects.length; i++) {\n            _this.setState((0,defineProperty/* default */.Z)({}, _this.savedObjects[i], previous[_this.savedObjects[i]]), function () {\n              var stageType = _this.state.overlayOpen ? "overlayStage" : _this.personalAreaOpen ? "personalStage" : "groupStage";\n              _this.refs[stageType].draw();\n            });\n          }\n          _this.setState({\n            pages: previous.pages\n          });\n        }\n        _this.setState({\n          selectedContextMenu: null,\n          redoing: true,\n          selectedShapeName: _this.shapeIsGone(Canvas_history[historyStep]) ? "" : _this.state.selectedShapeName\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleRedo", function () {\n      // this.handleSave();\n      if (!_this.state.isTransforming) {\n        if (!_this.state.textEditVisible) {\n          if (historyStep === Canvas_history.length - 1) {\n            return;\n          }\n          historyStep++;\n          var next = Canvas_history[historyStep];\n          for (var i = 0; i < _this.savedObjects.length; i++) {\n            _this.setState((0,defineProperty/* default */.Z)({}, _this.savedObjects[i], next[_this.savedObjects[i]]), function () {\n              var stageType = _this.state.overlayOpen ? "overlayStage" : _this.personalAreaOpen ? "personalStage" : "groupStage";\n              _this.refs[stageType].draw();\n            });\n          }\n          _this.setState({\n            pages: next.pages\n          });\n        }\n        _this.setState({\n          selectedContextMenu: null,\n          redoing: true,\n          selectedShapeName: \'\'\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getObjType", function (name) {\n      // console.log(name)\n      if (typeof name !== \'string\') {\n        var _name, _name2, _name2$dataset, _name3, _name3$attrs;\n        name = (_name = name) !== null && _name !== void 0 && _name.dataset ? (_name2 = name) === null || _name2 === void 0 ? void 0 : (_name2$dataset = _name2.dataset) === null || _name2$dataset === void 0 ? void 0 : _name2$dataset.name : (_name3 = name) === null || _name3 === void 0 ? void 0 : (_name3$attrs = _name3.attrs) === null || _name3$attrs === void 0 ? void 0 : _name3$attrs.id;\n      }\n      try {\n        // console.log(\'meows\', name)\n        return name.replace(/\\d+$/, "");\n        ;\n      } catch (e) {\n        // console.log(\'meow\')\n        return null;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleCopy", function () {\n      var name = _this.state.selectedShapeName;\n      var state = _this.state[_this.getObjType(name)];\n      var toCopy = name ? [state ? state.filter(function (obj) {\n        return obj.id === name;\n      })[0] : null] : [];\n      _this.state.groupSelection.forEach(function (obj) {\n        if (Array.isArray(obj)) {\n          toCopy.push.apply(toCopy, (0,toConsumableArray/* default */.Z)(obj.map(function (o) {\n            return _this.state[_this.getObjType(o)].filter(function (obj) {\n              return obj.id === o;\n            })[0];\n          })));\n        } else {\n          var type = _this.getObjType(obj);\n          toCopy.push(_this.state[type].filter(function (o) {\n            return o.id === obj;\n          })[0]);\n        }\n      });\n      if (toCopy) {\n        _this.setState({\n          copied: toCopy,\n          selectedContextMenu: null\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleLock", function () {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      _this.setState(function (prevState) {\n        var _prevState$type;\n        return (0,defineProperty/* default */.Z)({}, type, (_prevState$type = prevState[type]) === null || _prevState$type === void 0 ? void 0 : _prevState$type.map(function (obj) {\n          return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n            lock: !obj.lock ? true : false\n          }) : obj;\n        }));\n      }, function () {\n        var _this$state$type;\n        var lockedObj = (_this$state$type = _this.state[type]) === null || _this$state$type === void 0 ? void 0 : _this$state$type.find(function (obj) {\n          return obj.id === _this.state.selectedShapeName;\n        });\n        _this.props.showAlert("Object is ".concat(lockedObj.lock ? "locked" : "unlocked"), "info");\n      });\n      _this.setState({\n        selectedContextMenu: null\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getStateObjectById", function (obj) {\n      if (obj.attrs) {\n        var id = obj.attrs.id;\n        var type = _this.getObjType(id);\n        var item = _this.state[type].filter(function (obj) {\n          return obj.id === id;\n        });\n        if (item.length) {\n          return item[0];\n        } else {\n          if (obj) {\n            return obj.attrs;\n          } else {\n            return null;\n          }\n        }\n      } else {\n        if (obj) return obj;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handlePaste", function (direction) {\n      if (_this.state.copied === null || _this.state.copied === undefined || document.activeElement.getAttribute("name") !== "pasteContainer") {\n        // Ignore paste if nothing is copied or if focus is not on canvas\n        return;\n      }\n\n      // Convert the copied items from konva objects to state objects\n      var stateItems = [];\n      for (var i = 0; i < _this.state.copied.length; i++) {\n        var copiedItem = _this.state.copied[i];\n        if (Array.isArray(copiedItem)) {\n          // Enter into group if item is a group\n          var stateGroup = [];\n          for (var j = 0; j < copiedItem.length; j++) {\n            var stateObj = _this.getStateObjectById(copiedItem[j]);\n            stateGroup.push(stateObj);\n          }\n          stateItems.push(stateGroup);\n        } else {\n          // Single item\n          var _stateObj = _this.getStateObjectById(copiedItem);\n          stateItems.push(_stateObj);\n        }\n      }\n\n      // Get group item ids\n      var groupCopiedIds = [];\n      for (var _i11 = 0; _i11 < stateItems.length; _i11++) {\n        if (Array.isArray(stateItems[_i11])) {\n          var group = stateItems[_i11].map(function (item) {\n            return item.id;\n          });\n          groupCopiedIds.push(group);\n        }\n      }\n\n      // Get the top left copied shape\'s x & y coords\n      var originX = null;\n      var originY = null;\n      var itemsFlat = stateItems.flat();\n      for (var _i12 = 0; _i12 < itemsFlat.length; _i12++) {\n        if (originX === null || itemsFlat[_i12].x < originX) {\n          originX = itemsFlat[_i12].x;\n        }\n        if (originY === null || itemsFlat[_i12].y < originY) {\n          originY = itemsFlat[_i12].y;\n        }\n      }\n\n      // Paste by type\n      var types = [];\n      for (var _i13 = 0; _i13 < itemsFlat.length; _i13++) {\n        types.push(_this.getObjType(itemsFlat[_i13].id));\n      }\n      types = (0,toConsumableArray/* default */.Z)(new Set(types));\n      for (var _i14 = 0; _i14 < types.length; _i14++) {\n        var objects = (0,toConsumableArray/* default */.Z)(_this.state[types[_i14]]);\n        var typeIndex = _this.savedObjects.indexOf(types[_i14]);\n        var delCount = _this.state[_this.deletionCounts[typeIndex]];\n        var _loop6 = function _loop6() {\n          var pasteX = _this.state.selection.x1 + (itemsFlat[_j5].x - originX);\n          var pasteY = _this.state.selection.y1 + (itemsFlat[_j5].y - originY);\n          if (direction === \'inPlace\') {\n            pasteX = itemsFlat[_j5].x;\n            pasteY = itemsFlat[_j5].y;\n          }\n          if (_this.getObjType(itemsFlat[_j5].id) === types[_i14]) {\n            var num = objects.length + delCount + 1;\n            var newX = pasteX;\n            var newY = pasteY;\n            var newId = types[_i14] + num;\n            var newObject = Canvas_objectSpread(Canvas_objectSpread({}, itemsFlat[_j5]), {}, {\n              id: newId,\n              ref: newId,\n              name: newId,\n              x: newX,\n              y: newY,\n              overlay: _this.state.overlayOpen,\n              overlayIndex: _this.state.overlayOpenIndex ? _this.state.overlayOpenIndex : -1,\n              infolevel: _this.state.overlayOpen ? false : _this.state.personalAreaOpen ? true : false,\n              rolelevel: _this.state.rolelevel,\n              level: _this.state.level\n            });\n            objects.push(newObject);\n\n            // Add to layers\n            var page = _this.state.pages[_this.state.level - 1];\n            var layers = [];\n            if (_this.state.overlayOpen) {\n              var overlayLayer = page.overlays.filter(function (obj, i) {\n                return obj.id === _this.state.overlayOpenIndex;\n              });\n              layers = overlayLayer[0].layers;\n              layers.push(newId);\n              page.overlays.map(function (obj, i) {\n                if (obj.id === _this.state.overlayOpenIndex) {\n                  obj.layers = layers;\n                }\n              });\n            } else if (_this.state.personalAreaOpen) {\n              layers = page.personalLayers;\n              layers.push(newId);\n              page.personalLayers = layers;\n            } else {\n              layers = page.groupLayers;\n              layers.push(newId);\n              page.groupLayers = layers;\n            }\n            var newPages = (0,toConsumableArray/* default */.Z)(_this.state.pages);\n            newPages[_this.state.level - 1] = page;\n            _this.setState({\n              pages: newPages\n            });\n\n            // Check if in group and replace with new id if so\n            for (var x = 0; x < groupCopiedIds.length; x++) {\n              for (var y = 0; y < groupCopiedIds[x].length; y++) {\n                if (groupCopiedIds[x][y] === itemsFlat[_j5].id) {\n                  groupCopiedIds[x][y] = newId;\n                }\n              }\n            }\n          }\n        };\n        for (var _j5 = 0; _j5 < itemsFlat.length; _j5++) {\n          _loop6();\n        }\n        _this.setState((0,defineProperty/* default */.Z)({}, types[_i14], objects));\n      }\n      _this.setState({\n        selectedContextMenu: null\n      }, function () {\n        // All pasting has been completed, time to create groups\n        for (var _i15 = 0; _i15 < groupCopiedIds.length; _i15++) {\n          var _group = groupCopiedIds[_i15].map(function (id) {\n            return _this.refs[id];\n          });\n          _this.handleGrouping(_group);\n        }\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleDelete", function () {\n      // Get list of each individual object being deleted\n      var toDelete = [];\n      if (_this.state.selectedShapeName) toDelete = [_this.state.selectedShapeName];else toDelete = _this.state.groupSelection.flat();\n      toDelete.map(function (id) {\n        var type = _this.getObjType(id);\n        var objs = _this.state[type];\n        objs.map(function (obj) {\n          if (obj.id === id) {\n            objs.splice(objs.indexOf(obj), 1);\n          }\n        });\n      });\n      var layers = (0,toConsumableArray/* default */.Z)(_this.getLayers());\n      //const delIds = toDelete.map(obj => obj.attrs ? obj.attrs.id : obj.dataset.name);\n      var newLayers = layers.filter(function (layer) {\n        return !toDelete.includes(layer);\n      });\n      _this.setLayers(newLayers);\n      _this.setState({\n        selectedShapeName: "",\n        groupSelection: [],\n        selectedContextMenu: null\n      }, _this.handleObjectSelection);\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleClearPage", function () {\n      _this.setState({\n        selectedShapeName: "",\n        groupSelection: [],\n        selectedContextMenu: null\n      }, _this.handleObjectSelection);\n      var page = _this.state.pages[_this.state.level - 1];\n      var newPages = (0,toConsumableArray/* default */.Z)(_this.state.pages);\n      newPages[_this.state.level - 1] = Canvas_objectSpread(Canvas_objectSpread({}, page), {}, {\n        groupLayers: []\n      });\n      _this.setState({\n        pages: newPages\n      }, _this.handleSave);\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleCut", function () {\n      _this.handleCopy();\n      _this.handleDelete();\n      _this.setState({\n        selectedContextMenu: null\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleCloseContextMenu", function (e) {\n      _this.setState({\n        selectedContextMenu: null\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handlePersonalAreaOpen", function (open) {\n      _this.setState({\n        personalAreaOpen: open ? 1 : 0,\n        groupSelection: [],\n        selectedShapeName: ""\n      }, _this.handleObjectSelection);\n      if (_this.state.drawMode) {\n        _this.setDrawMode(false);\n      }\n      if (open) {\n        document.getElementById("personalMainContainer").focus();\n      } else {\n        document.getElementById("editMainContainer").focus();\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "shapeIsGone", function (returnTo) {\n      if (_this.state.selectedShapeName) {\n        var exists = false;\n        var type = _this.getObjType(_this.state.selectedShapeName);\n        returnTo[type].map(function (obj) {\n          if (obj.id === _this.state.selectedShapeName) {\n            exists = true;\n          }\n        });\n        return !exists;\n      } else {\n        return true;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "IsJsonString", function (str) {\n      try {\n        JSON.parse(str);\n      } catch (e) {\n        return false;\n      }\n      return true;\n    });\n    // Fill Color\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleFillColor", function (e) {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              fill: e.hex\n            }) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                fill: e.hex\n              }) : obj;\n            }));\n          });\n        });\n      }\n    });\n    // Stroke Color\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleStrokeColor", function (e) {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              stroke: e.hex\n            }) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                stroke: e.hex\n              }) : obj;\n            }));\n          });\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleBackgroundColor", function (e) {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              backgroundColor: e.hex\n            }) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                backgroundColor: e.hex\n              }) : obj;\n            }));\n          });\n        });\n      }\n    });\n    // Font Family\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleFont", function (font) {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              fontFamily: font\n            }) : obj;\n          }));\n        }, function () {\n          setTimeout(function () {\n            var stageType = _this.state.overlayOpen ? "overlayStage" : _this.personalAreaOpen ? "personalStage" : "groupStage";\n            _this.refs[stageType].draw();\n          }, 300);\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                fontFamily: font\n              }) : obj;\n            }));\n          }, function () {\n            setTimeout(function () {\n              var stageType = _this.state.overlayOpen ? "overlayStage" : _this.personalAreaOpen ? "personalStage" : "groupStage";\n              _this.refs[stageType].draw();\n            }, 300);\n          });\n        });\n      }\n    });\n    // Font Size\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleSize", function (e) {\n      if (Number.isNaN(parseInt(e)) || parseInt(e) === 0) {\n        e = 50;\n      } else {\n        e = parseInt(e);\n      }\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              fontSize: e\n            }) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                fontSize: e\n              }) : obj;\n            }));\n          });\n        });\n      }\n    });\n    // Stroke Width\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleWidth", function (e) {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              strokeWidth: e\n            }) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                strokeWidth: e\n              }) : obj;\n            }));\n          });\n        });\n      }\n    });\n    // Object Opacity\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleOpacity", function (e) {\n      var type = _this.getObjType(_this.state.selectedShapeName);\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              opacity: e\n            }) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n                opacity: e\n              }) : obj;\n            }));\n          });\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleGrouping", function (inGroup) {\n      var groupSelection = inGroup ? inGroup : _this.state.groupSelection;\n      if (groupSelection.length > 1) {\n        // Remove any existing groups which are part of the new group\n        var newGroup = (0,toConsumableArray/* default */.Z)(groupSelection.flat());\n        var newSavedGroups = (0,toConsumableArray/* default */.Z)(_this.state.savedGroups);\n        var out = [];\n        newGroup.map(function (obj) {\n          out.includes(obj) ? null : out.push(obj);\n        });\n        newSavedGroups.push(out);\n        _this.setState({\n          selectedShape: "",\n          groupSelection: [out],\n          savedGroups: newSavedGroups\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleUngrouping", function () {\n      if (_this.state.groupSelection.length && _this.state.groupSelection.some(function (obj) {\n        return Array.isArray(obj);\n      })) {\n        for (var x = 0; x < _this.state.groupSelection.length; x++) {\n          var selection = _this.state.groupSelection[x];\n          // Item is a group (so ungroup it)\n          if (Array.isArray(selection)) {\n            var objId = selection[0].attrs ? selection[0].attrs.id : selection[0];\n            for (var i = 0; i < _this.state.savedGroups.length; i++) {\n              for (var j = 0; j < _this.state.savedGroups[i].length; j++) {\n                if (_this.state.savedGroups[i][j].attrs ? _this.state.savedGroups[i][j].attrs.id === objId : _this.state.savedGroups[i][j] === objId) {\n                  var newSavedGroups = [].concat((0,toConsumableArray/* default */.Z)(_this.state.savedGroups.slice(0, i)), (0,toConsumableArray/* default */.Z)(_this.state.savedGroups.slice(i + 1)));\n                  _this.setState({\n                    selectedShape: "",\n                    groupSelection: [],\n                    savedGroups: newSavedGroups\n                  }, _this.handleObjectSelection);\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getShapeGroup", function (shape) {\n      var shapeId;\n      if ((0,esm_typeof/* default */.Z)(shape) !== \'object\') {\n        shapeId = shape;\n      } else {\n        shapeId = shape.attrs.id;\n      }\n      var saved = _this.state.savedGroups;\n      var group = _this.state.groupSelection;\n      if (group.flat().includes(shapeId)) {\n        return group.flat();\n      }\n      for (var i = 0; i < saved.length; i++) {\n        if (saved[i].includes(shapeId)) {\n          return saved[i];\n        }\n      }\n      return null;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleLevel", function (e) {\n      _this.setState({\n        level: e\n      });\n      _this.props.handleLevel(e);\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleImage", function (e) {\n      _this.setState({\n        imgsrc: e\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleVideo", function (e) {\n      _this.setState({\n        vidsrc: e\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleAudio", function (e) {\n      _this.setState({\n        audsrc: e\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleDocument", function (e) {\n      _this.setState({\n        docsrc: e\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleDownload", function (url, filename) {\n      axios_default().get(url, {\n        responseType: \'blob\'\n      }).then(function (res) {\n        file_download_default()(res.data, filename);\n      });\n    });\n    // Turn <Text> into <textarea> for editing on double click\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleTextDblClick", function (text, layer) {\n      if (text) {\n        // Adjust location based on info or main\n        var sidebarPx = window.matchMedia("(orientation: portrait)").matches ? 0 : 70;\n        if (sidebarPx > 0 && layer === _this.refs["personalAreaLayer.objects"]) {\n          sidebarPx = 100;\n        } else if (sidebarPx > 0 && layer === _this.refs["overlayAreaLayer.objects"]) {\n          sidebarPx = 100;\n        }\n        var topPx = 57;\n        if (layer === _this.refs["personalAreaLayer.objects"]) {\n          topPx = 57;\n        } else if (layer === _this.refs["overlayAreaLayer.objects"]) {\n          topPx = 30;\n        }\n        var scaleVal = layer === _this.refs["personalAreaLayer.objects"] ? _this.state.personalLayerScale : _this.state.overlayOpen ? _this.state.overlayLayerScale : _this.state.groupLayerScale;\n        _this.setState({\n          textX: text.absolutePosition().x + sidebarPx,\n          textY: text.absolutePosition().y + topPx,\n          textEditVisible: !_this.state.textEditVisible,\n          text: text.attrs.text,\n          currentTextRef: text.attrs.id,\n          textareaWidth: text.attrs.width * scaleVal,\n          textareaHeight: text.textHeight * text.textArr.length * scaleVal,\n          textareaFill: text.attrs.fill,\n          textareaFontFamily: text.attrs.fontFamily,\n          textareaFontSize: text.attrs.fontSize * scaleVal,\n          textRotation: text.attrs.rotation\n        }, function () {\n          _this.setState({\n            textareaInlineStyle: {\n              display: _this.state.textEditVisible ? "block" : "none",\n              width: _this.state.textareaWidth,\n              height: _this.state.textareaHeight,\n              fontSize: _this.state.textareaFontSize + "px",\n              fontFamily: _this.state.textareaFontFamily,\n              color: _this.state.textareaFill,\n              top: _this.state.textY + "px",\n              left: _this.state.textX + "px",\n              transform: "rotate(".concat(_this.state.textRotation, "deg) translateY(2px)")\n            }\n          });\n        });\n        var textarea = _this.refs.textarea;\n        textarea.focus();\n        text.hide();\n        layer.draw();\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleTextTransform", function () {\n      var text = _this.refs[_this.state.selectedShapeName];\n      if (text) {\n        text.setAttr("width", text.width() * text.scaleX());\n        text.setAttr("scaleX", 1);\n        text.draw();\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setDrawMode", function (drawing) {\n      _this.setState({\n        drawMode: drawing,\n        color: drawing ? _this.state.color : "black",\n        tool: drawing ? _this.state.tool : "pen",\n        drawStrokeWidth: drawing ? _this.state.drawStrokeWidth : 5\n      }, function () {\n        if (!_this.state.drawMode) {\n          _this.props.showAlert("Draw mode deactivated", "info");\n        } else {\n          _this.props.showAlert("Draw mode activated", "info");\n        }\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setDrawStrokeWidth", function (newWidth) {\n      _this.setState({\n        drawStrokeWidth: newWidth\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setDrawTool", function (newTool) {\n      _this.setState({\n        tool: newTool\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "chooseColor", function (e) {\n      _this.setState({\n        color: e.hex\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleRoleLevel", function (e) {\n      _this.setState({\n        rolelevel: e,\n        canvasLoading: false\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "keyUp", function (e) {\n      if (e.key === "Control") {\n        document.body.style.cursor = "default";\n        var mainContainer = document.getElementById("editMainContainer");\n        mainContainer.classList.remove("grabCursor");\n        if (_this.state.drawMode) {\n          mainContainer.classList.add("noCursor");\n        }\n        _this.setState({\n          layerDraggable: false\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "contextMenuEventShortcuts", function (event) {\n      var x = 88,\n        deleteKey = 46,\n        copy = 67,\n        paste = 86,\n        z = 90,\n        y = 89,\n        r = 82,\n        s = 83,\n        left = 37,\n        up = 38,\n        right = 39,\n        down = 40;\n      if (event.keyCode === left || event.keyCode === up || event.keyCode === right || event.keyCode === down) {\n        handleArrowKeys(event.keyCode, (0,assertThisInitialized/* default */.Z)(_this));\n      }\n      if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === x && !_this.state.isPasteDisabled) {\n        _this.handleDelete();\n        _this.handleCopy();\n      } else if (event.shiftKey && event.keyCode === r) {\n        _this.props.reCenter("edit");\n      } else if (event.keyCode === deleteKey && !_this.state.isPasteDisabled) {\n        _this.handleDelete();\n      } else if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === z) {\n        _this.handleUndo();\n      } else if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === s) {\n        event.preventDefault();\n        _this.handleSave();\n      } else if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === y) {\n        _this.handleRedo();\n      } else if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === copy) {\n        _this.handleCopy();\n      } else if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === paste && event.shiftKey) {\n        _this.handlePaste(\'inPlace\');\n      } else if ((window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) && event.keyCode === paste && !_this.state.isPasteDisabled) {\n        _this.handlePaste();\n      } else if (window.navigator.platform.match("Mac") ? event.metaKey : event.ctrlKey) {\n        document.body.style.cursor = "grab";\n        var mainContainer = document.getElementById("editMainContainer");\n        mainContainer.classList.remove("noCursor");\n        mainContainer.classList.add("grabCursor");\n        if (!_this.state.layerDraggable) {\n          _this.setState({\n            layerDraggable: true\n          });\n        }\n      } else if (event.altKey && event.keyCode === r) {\n        // Print Info (FOR DEBUGGING)\n        console.log("Refs:");\n        console.log(Canvas_objectSpread({}, _this.refs));\n        console.log("State:");\n        console.log(Canvas_objectSpread({}, _this.state));\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "deltaTransformPoint", function (matrix, point) {\n      var dx = point.x * matrix.a + point.y * matrix.c + 0;\n      var dy = point.x * matrix.b + point.y * matrix.d + 0;\n      return {\n        x: dx,\n        y: dy\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "decomposeMatrix", function (matrix) {\n      // @See https://gist.github.com/2052247\n\n      // Calculate delta transform point\n      var px = _this.deltaTransformPoint(matrix, {\n        x: 0,\n        y: 1\n      });\n      var py = _this.deltaTransformPoint(matrix, {\n        x: 1,\n        y: 0\n      });\n\n      // Calculate skew\n      var skewX = 180 / Math.PI * Math.atan2(px.y, px.x) - 90;\n      var skewY = 180 / Math.PI * Math.atan2(py.y, py.x);\n      return {\n        translateX: matrix.e,\n        translateY: matrix.f,\n        scaleX: Math.sqrt(matrix.a * matrix.a + matrix.b * matrix.b),\n        scaleY: Math.sqrt(matrix.c * matrix.c + matrix.d * matrix.d),\n        skewX: skewX,\n        skewY: skewY,\n        rotation: skewX // Rotation is the same as skew x\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getOverlayState", function (index) {\n      return _this.state.pages[_this.state.level - 1].overlays[index];\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getSelectedObj", function () {\n      if (_this.state.selectedShapeName) {\n        var _iterator = _createForOfIteratorHelper(_this.savedObjects),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var name = _step.value;\n            if (_this.state.selectedShapeName.startsWith(name)) {\n              return _this.state[name].filter(function (_ref18) {\n                var id = _ref18.id;\n                return id === _this.state.selectedShapeName;\n              })[0];\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getSelectedGroup", function () {\n      var out = [];\n      var _iterator2 = _createForOfIteratorHelper(_this.savedObjects),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var name = _step2.value;\n          var _iterator3 = _createForOfIteratorHelper(_this.state.groupSelection.flat()),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var obj = _step3.value;\n              if (obj.toString().startsWith(name)) {\n                var _iterator4 = _createForOfIteratorHelper(_this.state[name]),\n                  _step4;\n                try {\n                  for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                    var obj2 = _step4.value;\n                    if (obj2.id === obj) {\n                      out.push(obj2);\n                    }\n                  }\n                } catch (err) {\n                  _iterator4.e(err);\n                } finally {\n                  _iterator4.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return out;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "updateSelectedObj", function (newState) {\n      var type;\n      if (_this.state.selectedShapeName) {\n        var _iterator5 = _createForOfIteratorHelper(_this.savedObjects),\n          _step5;\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var name = _step5.value;\n            if (_this.state.selectedShapeName.startsWith(name)) {\n              type = name;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      }\n      if (type) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), newState) : obj;\n          }));\n        });\n      } else {\n        _this.state.groupSelection.flat().forEach(function (objName) {\n          var type = _this.getObjType(objName);\n          if (!type) return;\n          _this.setState(function (prevState) {\n            return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (obj) {\n              return obj.id === objName.toString() ? Canvas_objectSpread(Canvas_objectSpread({}, obj), newState) : obj;\n            }));\n          });\n        });\n      }\n      // there\'s a timeout here since placing this func in the\n      // setState callback lags the transformer behind a little\n      setTimeout(function () {\n        return _this.handleObjectSelection();\n      }, 20);\n    });\n    // For Konva Objects:\n    // returns Konva object\n    // For Custom Objects:\n    // returns the Konva Group associated with the KonvaHtml of the object\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getKonvaObj", function (id, updateState, showTransformer) {\n      if (id && id !== "pencils") {\n        var _this$refs$id;\n        var layer = _this.state.personalAreaOpen ? "personalAreaLayer" : _this.state.overlayOpen ? "overlayAreaLayer" : "groupAreaLayer";\n        var groups = _this.refs["".concat(layer, ".objects")].find(\'Group\');\n        for (var i = 0; i < groups.length; i++) {\n          var group = groups[i];\n          if (group.attrs.id === id) {\n            if (updateState) {\n              if (showTransformer) {\n                _this.setState({\n                  selectedShapeName: id\n                }, _this.handleObjectSelection);\n              }\n            }\n            return group.children[0];\n          }\n        }\n        if ((_this$refs$id = _this.refs[id]) !== null && _this$refs$id !== void 0 && _this$refs$id.attrs) {\n          return _this.refs[id];\n        }\n        return null;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "objectSnapping", function (obj, e) {\n      if (e && e.evt.shiftKey) {\n        var objStage = obj.attrs ? obj.attrs : obj;\n        var stage = objStage.overlay ? "overlay" : objStage.infolevel ? "personal" : "group";\n        var objRef = obj.attrs ? obj : _this.refs[obj.id];\n        _this.getLineGuideStops(stage, objRef);\n        var stageRef = _this.refs["".concat(stage, "Stage")];\n        var objBox = objRef.getClientRect();\n        var guides = stageRef.find(\'.guide\');\n        var isTouchingX = false;\n        var isTouchingY = false;\n        var paddingW = objBox.width / 3;\n        var paddingH = objBox.height / 3;\n        var middleX = objBox.x + objBox.width / 2;\n        var middleY = objBox.y + objBox.height / 2;\n        var strokeWidth = objRef.attrs.strokeWidth;\n        for (var i = 0; i < guides.length; i++) {\n          var g = guides[i];\n          var gBox = g.getClientRect();\n          var newX = gBox.x;\n          var newY = gBox.y;\n          var newBoxX = objBox.x + objBox.width / 2;\n          var newBoxY = objBox.y + objBox.height / 2;\n          if (middleX > newX - paddingW && middleX < newX + paddingW) isTouchingX = true;\n          if (middleY > newY - paddingH && middleY < newY + paddingH) isTouchingY = true;\n          newX = gBox.x - objBox.width / 2 + strokeWidth / 3;\n          newY = gBox.y - objBox.height / 2 + strokeWidth / 3;\n          newBoxX = objBox.x;\n          newBoxY = objBox.y;\n          if (isTouchingX) {\n            objRef.absolutePosition({\n              x: newX,\n              y: newBoxY\n            });\n          }\n          if (isTouchingY) {\n            objRef.absolutePosition({\n              x: newBoxX,\n              y: newY\n            });\n          }\n          isTouchingX = false;\n          isTouchingY = false;\n        }\n\n        // if (isTouchingX && isTouchingY) {\n        //   objRef.absolutePosition({\n        //     x: newX,\n        //     y: newY\n        //   });\n        // }\n      } else {\n        _this.setState({\n          guides: []\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onObjectDragMove", function (obj, e) {\n      // if (this.customObjects.includes(this.getObjType(obj.id))) {\n      //   // Don\'t run this for custom objects\n      //   return;\n      // }\n      // const layer = this.state.personalAreaOpen ? "personalAreaLayer" :\n      //   (this.state.overlayOpen ? "overlayAreaLayer" : "groupAreaLayer");\n      // this.refs[obj.id].moveTo(this.refs[`${layer}.dragging`]);\n\n      _this.objectSnapping(obj, e);\n      _this.state.arrows.map(function (arrow) {\n        if (arrow.from !== undefined) {\n          if (obj.name === arrow.from.attrs.name) {\n            arrow.points = [obj.x, obj.y, arrow.points[2], arrow.points[3]];\n          }\n        }\n        if (arrow.to !== undefined) {\n          if (obj.name === arrow.to.attrs.name) {\n            arrow.points = [arrow.points[0], arrow.points[1], obj.x, obj.y];\n          }\n        }\n      }, _this.forceUpdate);\n    });\n    // Snapping functionality based on:\n    // https://konvajs.org/docs/sandbox/Objects_Snapping.html\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "collide", function (rect1, rect2, stage) {\n      var rect1MiddleY = rect1.y + rect1.height / 2;\n      var rect1MiddleX = rect1.x + rect1.width / 2;\n      var rect2Top = rect2.y;\n      var rect2Bottom = rect2.y + rect2.height;\n      var rect2Left = rect2.x;\n      var rect2Right = rect2.x + rect2.width;\n      var rect2MiddleY = rect2.y + rect2.height / 2;\n      var rect2MiddleX = rect2.x + rect2.width / 2;\n      var padding = rect1.width / 2;\n      var vertical = [];\n      var horizontal = [];\n      var layerX = _this.state["".concat(stage, "LayerX")];\n      var layerY = _this.state["".concat(stage, "LayerY")];\n      var layerScale = _this.state["".concat(stage, "LayerScale")];\n      var x = (rect2.x - layerX) / layerScale;\n      var width = rect2.width / layerScale;\n      var y = (rect2.y - layerY) / layerScale;\n      var height = rect2.height / layerScale;\n      if (rect1MiddleY > rect2MiddleY - padding && rect1MiddleY < rect2MiddleY + padding) {\n        horizontal.push([y + height / 2]);\n        vertical.push([null, null, null]);\n      }\n      if (rect1MiddleX > rect2MiddleX - padding && rect1MiddleX < rect2MiddleX + padding) {\n        horizontal.push([null, null, null]);\n        vertical.push([x + width / 2]);\n      }\n      if (rect1MiddleX > rect2Left - padding && rect1MiddleX < rect2Left + padding) {\n        horizontal.push([null, null, null]);\n        vertical.push([x]);\n      }\n      if (rect1MiddleX > rect2Right - padding && rect1MiddleX < rect2Right + padding) {\n        horizontal.push([null, null, null]);\n        vertical.push([x + width]);\n      }\n      if (rect1MiddleY > rect2Top - padding && rect1MiddleY < rect2Top + padding) {\n        horizontal.push([y]);\n        vertical.push([null, null, null]);\n      }\n      if (rect1MiddleY > rect2Bottom - padding && rect1MiddleY < rect2Bottom + padding) {\n        horizontal.push([y + height]);\n        vertical.push([null, null, null]);\n      }\n      if (rect1MiddleY > rect2Top && rect1MiddleY < rect2Bottom && rect1MiddleX > rect2Left && rect1MiddleX < rect2Right) {\n        vertical = [x, x + width, x + width / 2];\n        horizontal = [y, y + height, y + height / 2];\n      }\n      return [vertical, horizontal];\n    });\n    // Where can we snap our objects?\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getLineGuideStops", function (stage, skipShape) {\n      // The guide lines\n      var vertical = [];\n      var horizontal = [];\n      var stageRef = _this.refs["".concat(stage, "Stage")];\n      var layerX = _this.state["".concat(stage, "LayerX")];\n      var layerY = _this.state["".concat(stage, "LayerY")];\n      var layerScale = _this.state["".concat(stage, "LayerScale")];\n      var compBox = skipShape.getClientRect();\n      var foundGuideItem = false;\n      var distances = []; // Array to store distances\n      stageRef.find(\'.shape, .customObj\').forEach(function (guideItem) {\n        if (foundGuideItem) return;\n        if (guideItem === skipShape || guideItem.attrs.currentId && guideItem.attrs.currentId === skipShape.attrs.id) return;\n\n        // Check if shape is close by\n        if (guideItem.attrs.name === "customObj") _this.getKonvaObj(guideItem.attrs.id, true);\n        var box = guideItem.getClientRect();\n        var guideArray = _this.collide(compBox, box, stage);\n        if (guideArray) {\n          if (vertical.length < 6) vertical.push(guideArray[0][0]);\n          if (horizontal.length < 6) horizontal.push(guideArray[1][0]);\n        }\n      });\n      _this.getKonvaObj(skipShape.attrs.id, true);\n      vertical = vertical.flat();\n      horizontal = horizontal.flat();\n\n      // remove null and undefined from vertical and horizontal and limit them to 10 elements\n\n      vertical = vertical.filter(function (item) {\n        return item !== undefined;\n      });\n      horizontal = horizontal.filter(function (item) {\n        return item !== undefined;\n      });\n      var l = Math.max(window.innerWidth, window.innerHeight) / layerScale;\n      var guidesV = [];\n      for (var i = 0; i < vertical.length; i++) {\n        var x = vertical[i];\n        var r = i % 3 - 2;\n        var y = horizontal[i - r];\n        guidesV.push({\n          points: [x, -l + y, x, l + y],\n          pos: i % 3 === 2 ? "center" : "edge"\n        });\n      }\n      var guidesH = [];\n      for (var _i16 = 0; _i16 < horizontal.length; _i16++) {\n        var _r = _i16 % 3 - 2;\n        var _x2 = vertical[_i16 - _r];\n        var _y = horizontal[_i16];\n        guidesH.push({\n          points: [-l + _x2, _y, l + _x2, _y],\n          pos: _i16 % 3 === 2 ? "center" : "edge"\n        });\n      }\n      _this.setState({\n        guides: [].concat(guidesV, guidesH)\n      });\n      return {\n        vertical: vertical,\n        horizontal: horizontal\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onObjectClick", function (obj) {\n      if (obj.link !== undefined && obj.link !== "") {\n        _this.setState({\n          errMsg: "Links will not be opened in Edit Mode."\n        }, function () {\n          setTimeout(function () {\n            _this.setState({\n              errMsg: ""\n            });\n          }, 1000);\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onDocClick", function () {\n      fetch(_this.state.docsrc, {\n        method: \'GET\',\n        headers: {\n          \'Content-Type\': \'application/pdf\'\n        }\n      }).then(function (response) {\n        return response.blob();\n      }).then(function (blob) {\n        // Create a blob link to download\n        var url = window.URL.createObjectURL(new Blob([blob]));\n        var link = document.createElement(\'a\');\n        link.href = url;\n        link.setAttribute(\'download\', _this.state.docsrc);\n\n        // Append to html link element page\n        document.body.appendChild(link);\n\n        // Start download\n        link.click();\n\n        // Clean up and remove the link\n        link.parentNode.removeChild(link);\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setCustomObjData", function (customObj, type, data, id) {\n      _this.setState(function (prevState) {\n        return (0,defineProperty/* default */.Z)({}, customObj, prevState[customObj].map(function (obj) {\n          return obj.id === id ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, (0,defineProperty/* default */.Z)({}, type, data)) : obj;\n        }));\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onDragEndArrow", function (arrow) {\n      // Set new points to current position\n      var oldPoints = [arrow.points[0], arrow.points[1], arrow.points[2], arrow.points[3]];\n      var shiftX = _this.refs[arrow.ref].attrs.x;\n      var shiftY = _this.refs[arrow.ref].attrs.y;\n      var newPoints = [oldPoints[0] + shiftX, oldPoints[1] + shiftY, oldPoints[2] + shiftX, oldPoints[3] + shiftY];\n      _this.refs[arrow.ref].position({\n        x: 0,\n        y: 0\n      });\n      _this.setState(function (prevState) {\n        return {\n          arrows: prevState.arrows.map(function (a) {\n            return a.name === arrow.name ? Canvas_objectSpread(Canvas_objectSpread({}, a), {}, {\n              points: newPoints\n            }) : a;\n          })\n        };\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onObjectTransformStart", function () {\n      _this.setState({\n        isTransforming: true\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onObjectTransformEnd", function (obj) {\n      _this.setState({\n        isTransforming: false\n      });\n      var custom = _this.customObjects.includes(_this.getObjType(obj.id));\n      var type = _this.getObjType(obj.id);\n      var object = null;\n      if (!custom) {\n        object = _this.refs[obj.ref];\n      } else {\n        var layer = _this.state.personalAreaOpen ? "personalAreaLayer" : _this.state.overlayOpen ? "overlayAreaLayer" : "groupAreaLayer";\n        var customObjs = _this.refs["".concat(layer, ".objects")].find(\'Group\');\n        for (var i = 0; i < customObjs.length; i++) {\n          var id = customObjs[i].attrs.id;\n          if (id === obj.id) {\n            object = customObjs[i].children[0];\n            break;\n          }\n        }\n      }\n      var transformOptions = {};\n      switch (type) {\n        case "texts":\n          transformOptions = {\n            width: object.width(),\n            textWidth: object.textWidth,\n            textHeight: object.textHeight\n          };\n          break;\n        case "ellipses":\n          transformOptions = {\n            radiusX: object.radiusX() * object.scaleX(),\n            radiusY: object.radiusY() * object.scaleY()\n          };\n          break;\n        case "stars":\n          transformOptions = {\n            innerRadius: object.innerRadius() * object.scaleX(),\n            outerRadius: object.outerRadius() * object.scaleY()\n          };\n          break;\n        case "videos":\n        case "audios":\n          transformOptions = {\n            scaleX: object.scaleX(),\n            scaleY: object.scaleY()\n          };\n          break;\n        default:\n          transformOptions = {\n            width: object.width() * object.scaleX(),\n            height: object.height() * object.scaleY()\n          };\n          break;\n      }\n      if (custom) {\n        transformOptions = {\n          scaleX: object.scaleX(),\n          scaleY: object.scaleY()\n        };\n      }\n      _this.setState(function (prevState) {\n        return (0,defineProperty/* default */.Z)({}, type, prevState[type].map(function (o) {\n          return o.id === object.attrs.id ? Canvas_objectSpread(Canvas_objectSpread(Canvas_objectSpread({}, o), transformOptions), {}, {\n            rotation: object.rotation(),\n            x: object.x() + (custom ? obj.x : 0),\n            y: object.y() + (custom ? obj.y : 0)\n          }) : o;\n        }));\n      });\n      if (custom) {\n        object.x(0);\n        object.y(0);\n      }\n      if (!(type === "videos" || type === "audios" || _this.customObjects.includes(type))) {\n        object.setAttr("scaleX", 1);\n        object.setAttr("scaleY", 1);\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "updateText", function (e) {\n      var node = _this.refs[_this.state.currentTextRef];\n      if (!e) {\n        _this.setState({\n          textEditVisible: false,\n          shouldTextUpdate: true,\n          textareaInlineStyle: Canvas_objectSpread(Canvas_objectSpread({}, _this.state.textareaInlineStyle), {}, {\n            display: "none"\n          })\n        });\n        node.show();\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setOverlayOpen", function (val, index) {\n      //this.refs.customRectCanvas.add(this.refs.customRect);\n      _this.setState({\n        overlayOpen: val,\n        overlayOpenIndex: index\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "changeObjectPage", function (initIndex, newIndex) {\n      var _loop7 = function _loop7() {\n        var type = _this.savedObjects[i];\n        var objs = _this.state[type];\n        var _loop8 = function _loop8() {\n          var obj = objs[j];\n          if (obj.level === initIndex + 1) {\n            var newObj = Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              level: newIndex + 1\n            });\n\n            // Delete objects on this level\n            var newObjs = (0,toConsumableArray/* default */.Z)(objs);\n            newObjs.splice(j, 1);\n            _this.setState((0,defineProperty/* default */.Z)({}, type, newObjs), function () {\n              // Relocate objects to new level\n              if (newIndex !== -1) {\n                _this.setState((0,defineProperty/* default */.Z)({}, type, [].concat((0,toConsumableArray/* default */.Z)(_this.state[type]), [newObj])));\n              }\n            });\n          }\n        };\n        for (var j = 0; j < objs.length; j++) {\n          _loop8();\n        }\n      };\n      for (var i = 0; i < _this.savedObjects.length; i++) {\n        _loop7();\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleCopyPage", function (index) {\n      // Copy all objects from chosen level to new level\n      var groupLayers = Array(_this.state.pages[_this.state.level - 1].groupLayers.length);\n      var personalLayers = Array(_this.state.pages[_this.state.level - 1].personalLayers.length);\n      var overlayLayers = [];\n      var toBeSaved = {};\n      for (var i = 0; i < _this.savedObjects.length; i++) {\n        toBeSaved = Canvas_objectSpread(Canvas_objectSpread({}, toBeSaved), {}, (0,defineProperty/* default */.Z)({}, _this.savedObjects[i], []));\n      }\n      for (var _i17 = 0; _i17 < _this.savedObjects.length; _i17++) {\n        var type = _this.savedObjects[_i17];\n        var objs = _this.state[type];\n        var _loop9 = function _loop9() {\n          var obj = objs[j];\n          if (obj.level === index + 1) {\n            var objectsState = _this.state[type];\n            var objectsDeletedState = _this.state["".concat(type, "DeleteCount")];\n            var numOfObj = objectsState.length + (objectsDeletedState ? parseInt(objectsDeletedState) : 0) + toBeSaved[type].length + 1;\n            var id = type + numOfObj;\n            if (obj !== null && obj !== void 0 && obj.overlayIndex && obj.overlayIndex !== -1) {\n              var inListIndex = overlayLayers.findIndex(function (layer) {\n                return layer.id === obj.overlayIndex;\n              });\n              var pageOverlays = _this.state.pages[obj.level - 1].overlays;\n              var currLayers = pageOverlays[pageOverlays.map(function (overlay) {\n                return overlay.id;\n              }).indexOf(obj.overlayIndex)].layers;\n              if (inListIndex !== -1) {\n                var layersArr = (0,toConsumableArray/* default */.Z)(overlayLayers[inListIndex].layers);\n                layersArr[currLayers.indexOf(obj.id)] = id;\n                var newLayers = {\n                  id: overlayLayers[inListIndex].id,\n                  layers: layersArr\n                };\n                overlayLayers[inListIndex] = newLayers;\n              } else {\n                var _layersArr = Array(currLayers.length);\n                _layersArr[currLayers.indexOf(obj.id)] = id;\n                overlayLayers.push({\n                  id: obj.overlayIndex,\n                  layers: _layersArr\n                });\n              }\n            } else if (obj.infolevel) {\n              personalLayers[_this.state.pages[obj.level - 1].personalLayers.indexOf(obj.id)] = id;\n            } else {\n              groupLayers[_this.state.pages[obj.level - 1].groupLayers.indexOf(obj.id)] = id;\n            }\n            var newObj = Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              id: id,\n              ref: id,\n              name: id,\n              level: _this.state.pages.length\n            });\n            toBeSaved[type].push(newObj);\n          }\n        };\n        for (var j = 0; j < objs.length; j++) {\n          _loop9();\n        }\n      }\n      for (var _i18 = 0; _i18 < _this.savedObjects.length; _i18++) {\n        var _type2 = _this.savedObjects[_i18];\n        _this.setState((0,defineProperty/* default */.Z)({}, _type2, [].concat((0,toConsumableArray/* default */.Z)(_this.state[_type2]), (0,toConsumableArray/* default */.Z)(toBeSaved[_type2]))));\n      }\n      var newPages = (0,toConsumableArray/* default */.Z)(_this.state.pages);\n      var newPage = Canvas_objectSpread({}, _this.state.pages[_this.state.pages.length - 1]);\n      newPage.groupLayers = groupLayers;\n      newPage.personalLayers = personalLayers;\n      var overlays = (0,toConsumableArray/* default */.Z)(newPage.overlays);\n      for (var _i19 = 0; _i19 < overlayLayers.length; _i19++) {\n        var overlayLayer = overlayLayers[_i19];\n        var overlayIndex = overlays.map(function (overlay) {\n          return overlay.id;\n        }).indexOf(overlayLayer.id);\n        var overlay = Canvas_objectSpread({}, overlays[overlayIndex]);\n        overlay.layers = overlayLayer.layers;\n        overlays[overlayIndex] = overlay;\n      }\n      newPage.overlays = overlays;\n      newPages[_this.state.pages.length - 1] = newPage;\n      _this.setState({\n        pages: newPages\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "isTouching", function (obj1, obj2) {\n      return !(obj1.x + obj1.width < obj2.x || obj1.y + obj1.height < obj2.y || obj1.x > obj2.x + obj2.width || obj1.y > obj2.y + obj2.height);\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getLocalLayer", function (id, layers, isCustom) {\n      var name = _this.state.selectedShapeName;\n      var state = _this.state[_this.getObjType(name)];\n      var mainObj = name ? state ? state.filter(function (obj) {\n        return obj.id === name;\n      })[0] : null : [];\n      var objRef = mainObj.attrs ? mainObj : _this.refs[mainObj.id];\n      var objBox = isCustom ? objRef.getBoundingClientRect() : objRef.getClientRect();\n      var layer = [];\n      layers.map(function (id) {\n        if (_this.refs[id] === undefined) return;\n        var tempRef = _this.refs[id];\n        var tempBox = isCustom ? tempRef.getBoundingClientRect() : tempRef.getClientRect();\n        if (_this.isTouching(objBox, tempBox)) {\n          layer.push(id);\n        }\n      });\n      return layer;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "layerTo", function (id, dir) {\n      var _newLayers, _newLayers2;\n      if (_this.state.groupSelection.length > 0) return;\n      var isCustom = _this.customObjects.includes(_this.getObjType(id));\n      var newLayers = _this.getLayers();\n      var i;\n      var inputIds = [];\n      var newObject = [];\n      var tempInputs = [];\n      var tempObject = [];\n      var editTitleOptions = ["polls", "connect4s", "tics", "htmls", "inputs", "timers"];\n      for (var _i20 = 0; _i20 < newLayers.length; _i20++) {\n        if (editTitleOptions.includes(newLayers[_i20].replace(/\\d+/g, \'\'))) {\n          inputIds.push(newLayers[_i20]);\n        } else {\n          newObject.push(newLayers[_i20]);\n        }\n      }\n      if (isCustom) {\n        tempInputs = _this.getLocalLayer(id, inputIds, isCustom);\n        newLayers = newLayers.filter(function (item) {\n          return !tempInputs.includes(item);\n        });\n      } else {\n        tempObject = _this.getLocalLayer(id, newObject, isCustom);\n        newLayers = newLayers.filter(function (item) {\n          return !tempObject.includes(item);\n        });\n      }\n      if (isCustom) {\n        var customChild = Array.from(document.getElementsByClassName("customObj")).filter(function (obj) {\n          return obj.dataset.name === id;\n        })[0].parentNode;\n        var parentElement = customChild.parentNode;\n        i = tempInputs.indexOf(id);\n        if (dir === \'up\') {\n          if (i < tempInputs.length - 1) {\n            var nextChild = customChild.nextSibling;\n            var obj = tempInputs[i];\n            tempInputs[i] = tempInputs[i + 1];\n            tempInputs[i + 1] = obj;\n            parentElement.insertBefore(nextChild, customChild);\n          }\n          if (i + 1 >= tempObject.length - 1) {\n            // this.setState({ contextDisabled: \'up\' })\n          }\n        } else {\n          if (i > 0) {\n            var previousChild = customChild.previousSibling;\n            var _obj = tempInputs[i];\n            tempInputs[i] = tempInputs[i - 1];\n            tempInputs[i - 1] = _obj;\n            parentElement.insertBefore(customChild, previousChild);\n          }\n          if (i <= 1) {\n            // this.setState({ contextDisabled: \'down\' })\n          }\n        }\n      } else {\n        i = tempObject.indexOf(id);\n        if (dir === \'up\') {\n          if (i < tempObject.length - 1) {\n            var _obj2 = tempObject[i];\n            tempObject[i] = tempObject[i + 1];\n            tempObject[i + 1] = _obj2;\n          }\n          if (i + 1 >= tempObject.length - 1) {\n            // this.setState({ contextDisabled: \'up\' })\n          }\n        } else {\n          if (i > 0) {\n            var _obj3 = tempObject[i];\n            tempObject[i] = tempObject[i - 1];\n            tempObject[i - 1] = _obj3;\n          }\n          if (i <= 1) {\n            // this.setState({ contextDisabled: \'down\' })\n          }\n        }\n      }\n      (_newLayers = newLayers).unshift.apply(_newLayers, (0,toConsumableArray/* default */.Z)(tempObject));\n      (_newLayers2 = newLayers).unshift.apply(_newLayers2, (0,toConsumableArray/* default */.Z)(tempInputs));\n      newLayers = (0,toConsumableArray/* default */.Z)(newLayers);\n      _this.setLayers(newLayers);\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "layerToBottom", function (id) {\n      var isCustom = _this.customObjects.includes(_this.getObjType(id));\n      if (isCustom) {\n        _this.setState(function (prevState) {\n          return (0,defineProperty/* default */.Z)({}, _this.getObjType(id), prevState[_this.getObjType(id)].map(function (obj) {\n            return obj.id === _this.state.selectedShapeName ? Canvas_objectSpread(Canvas_objectSpread({}, obj), {}, {\n              onTop: false\n            }) : obj;\n          }));\n        });\n        _this.setState({\n          customRenderRequested: true\n        });\n      } else {\n        var newLayers = (0,toConsumableArray/* default */.Z)(_this.getLayers());\n        var i = newLayers.indexOf(id);\n        if (i > 0) {\n          var obj = newLayers.splice(i, 1)[0];\n          newLayers.unshift(obj);\n        }\n        _this.setLayers(newLayers);\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleOverlayIcon", function (img) {\n      var _this$state = _this.state,\n        pages = _this$state.pages,\n        level = _this$state.level,\n        overlayOptionsOpen = _this$state.overlayOptionsOpen;\n      var updatedPages = (0,toConsumableArray/* default */.Z)(pages); // Create a shallow copy of the pages array\n      var currentOverlay = Canvas_objectSpread({}, updatedPages[level - 1].overlays[overlayOptionsOpen]); // Create a shallow copy of the current overlay object\n      currentOverlay.image = img; // Update the overlay object with the new image\n\n      updatedPages[level - 1].overlays[overlayOptionsOpen] = currentOverlay; // Replace the updated overlay object in the pages array\n\n      _this.setState({\n        pages: updatedPages\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getDragProps", function () {});\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getPageProps", function () {});\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getVariableProps", function () {});\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleSetRoles", function (role) {\n      _this.props.setRoles(role);\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleEditShapes", function (prevRoleName, roleName) {\n      for (var i = 0; i < _this.savedObjects.length; i++) {\n        var type = _this.savedObjects[i];\n        _this.state[type].forEach(function (obj) {\n          if (obj.rolelevel === prevRoleName) {\n            obj.rolelevel = roleName;\n          }\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleCopyRole", /*#__PURE__*/function () {\n      var _ref24 = (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee3(role, level) {\n        var roleName, toLevel, newState, currLevel, toLayer, currLayer, newLayers;\n        return regenerator_default().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              roleName = role.roleName;\n              toLevel = level - 1;\n              newState = JSON.parse(JSON.stringify(_this.state)); // Copy the state\n              currLevel = _this.state.level - 1;\n              toLayer = newState.pages[toLevel].personalLayers;\n              currLayer = newState.pages[currLevel].personalLayers;\n              newLayers = [];\n              newState.pages[toLevel].personalLayers = [];\n\n              // toLayer.forEach((layer) => {\n              //   const type = this.getObjType(layer);  \n              //   newState[type] = newState[type].filter(item => item.id !== layer);\n              // });\n\n              currLayer.forEach(function (layer, i) {\n                var type = _this.getObjType(layer);\n                var num = newState[type].length + 1;\n\n                // Retrieve the object from newState instead of this.state\n                var oldObj = newState[type].find(function (item) {\n                  return item.id === layer;\n                });\n\n                // Make sure oldObj exists and it matches the correct role level before processing\n                if (oldObj && oldObj.rolelevel === roleName && oldObj.level === currLevel + 1) {\n                  var newObj = Canvas_objectSpread({}, oldObj); // Create a new copy of oldObj\n                  newObj.id = type + num;\n                  newObj.ref = type + num;\n                  newObj.name = type + num;\n                  newObj.level = level;\n                  num++;\n                  newLayers.push(newObj.id);\n                  newState[type].push(newObj);\n                }\n              });\n              newState.pages[toLevel].personalLayers = newLayers;\n              _context3.next = 12;\n              return _this.setState(newState);\n            case 12:\n            case "end":\n              return _context3.stop();\n          }\n        }, _callee3);\n      }));\n      return function (_x3, _x4) {\n        return _ref24.apply(this, arguments);\n      };\n    }());\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleDeleteRole", function (role) {\n      var roleName = role.roleName;\n      var _loop10 = function _loop10() {\n        var type = _this.savedObjects[i];\n        var newObj = [];\n        _this.state[type].forEach(function (obj) {\n          if (obj.rolelevel !== roleName) {\n            newObj.push(obj);\n          }\n        });\n        _this.setState((0,defineProperty/* default */.Z)({}, type, newObj));\n      };\n      for (var i = 0; i < _this.savedObjects.length; i++) {\n        _loop10();\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleAddOverlay", function () {\n      var _this$state2 = _this.state,\n        pages = _this$state2.pages,\n        level = _this$state2.level;\n      var newOverlay = {\n        id: (0,v4/* default */.Z)(),\n        overlayOpenOption: "doNotAutoOpen",\n        positionRect: _this.positionRect,\n        hideBtn: false,\n        layers: []\n      };\n      var updatedPages = (0,toConsumableArray/* default */.Z)(pages); // Create a shallow copy of the pages array\n\n      updatedPages[level - 1].overlays.push(newOverlay); // Replace the updated overlay object in the pages array\n\n      _this.setState({\n        pages: updatedPages\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "renderAllObjects", function () {\n      return _this.props.loadObjects("group", "edit", _this.state.movingCanvas, (0,assertThisInitialized/* default */.Z)(_this));\n    });\n    _this.setState = _this.setState.bind((0,assertThisInitialized/* default */.Z)(_this));\n    _this.handleSetRoles = _this.handleSetRoles.bind((0,assertThisInitialized/* default */.Z)(_this));\n    var objectState = {};\n    var objectDeleteState = {};\n    for (var i = 0; i < _this.props.savedObjects.length; i++) {\n      objectState = Canvas_objectSpread(Canvas_objectSpread({}, objectState), {}, (0,defineProperty/* default */.Z)({}, _this.props.savedObjects[i], []));\n      objectDeleteState = Canvas_objectSpread(Canvas_objectSpread({}, objectDeleteState), {}, (0,defineProperty/* default */.Z)({}, "".concat(_this.props.savedObjects[i], "DeleteCount"), 0));\n    }\n    var defaultPagesTemp = new Array(6);\n    defaultPagesTemp.fill({\n      primaryColor: "#8f001a",\n      groupColor: "#FFF",\n      personalColor: "#FFF",\n      groupPositionRect: _this.positionRect,\n      personalPositionRect: _this.positionRect,\n      overlayColor: "#FFF",\n      overlays: [],\n      groupLayers: [],\n      personalLayers: []\n    });\n    var defaultPages = defaultPagesTemp.map(function (page, index) {\n      return Canvas_objectSpread(Canvas_objectSpread({}, page), {}, {\n        name: _this.props.t("admin.pageX", {\n          page: index + 1\n        })\n      });\n    });\n    _this.renderCounter = 11;\n    _this.state = Canvas_objectSpread(Canvas_objectSpread(Canvas_objectSpread({}, objectState), objectDeleteState), {}, {\n      customRenderRequested: false,\n      arrows: [],\n      // Arrows are used for transformations\n      guides: [],\n      // These are the lines used for snapping\n\n      // Right click menus\n      groupAreaContextMenuVisible: false,\n      groupAreaContextMenuX: 0,\n      groupAreaContextMenuY: 0,\n      personalAreaContextMenuVisible: false,\n      personalAreaContextMenuX: 0,\n      personalAreaContextMenuY: 0,\n      overlayAreaContextMenuVisible: false,\n      overlayAreaContextMenuX: 0,\n      overlayAreaContextMenuY: 0,\n      // An array of arrays containing grouped items\n      savedGroups: [],\n      // Transformer for custom objects\n      // This manually gets updated to simulate a normal Konva transformer\n      customRect: [{\n        x: 0,\n        y: 0\n      }],\n      // Page Controls\n      pages: defaultPages,\n      numberOfPages: 6,\n      level: 1,\n      // Current page\n      overlayOpen: false,\n      overlayOptionsOpen: -1,\n      overlayOpenIndex: -1,\n      overlayImage: -1,\n      customObjs: [],\n      // Context Menu\n      selectedContextMenu: null,\n      objectContext: 0,\n      contextDisabled: \'\',\n      // The Text Editor (<textarea/>) & other text properties\n      textInput: "",\n      textX: 0,\n      textY: 0,\n      textEditVisible: false,\n      text: "",\n      currentTextRef: "",\n      textareaWidth: 0,\n      textareaHeight: 0,\n      textareaInlineStyle: {\n        display: "none"\n      },\n      textareaFill: null,\n      textareaFontFamily: null,\n      textareaFontSize: 10,\n      textRotation: 0,\n      shouldTextUpdate: true,\n      selectedFont: null,\n      // Image, Video, Audio, Document sources\n      vidsrc: "https://upload.wikimedia.org/wikipedia/commons/transcoded/c/c4/Physicsworks.ogv/Physicsworks.ogv.240p.vp9.webm",\n      imgsrc: \'https://cdn.hackernoon.com/hn-images/0*xMaFF2hSXpf_kIfG.jpg\',\n      audsrc: "https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/shoptalk-clip.mp3",\n      docsrc: "https://res.cloudinary.com/uottawaedusim/image/upload/v1643788961/pdfs/xzgxf449ecdymapdaukb.pdf",\n      docimage: "",\n      // Draw\n      tool: \'pen\',\n      // eraser or pen\n      isDrawing: false,\n      drawMode: false,\n      color: "black",\n      drawStrokeWidth: 5,\n      // Variables for calculating responsive sizing\n      // (for different screen sizes)\n      groupLayerX: 0,\n      groupLayerY: 0,\n      groupLayerScale: 1,\n      personalLayerX: 0,\n      personalLayerY: 0,\n      personalLayerScale: 1,\n      overlayLayerX: 0,\n      overlayLayerY: 0,\n      overlayLayerScale: 1,\n      layerDraggable: false,\n      movingCanvas: false,\n      // Fill and Stroke\n      colorf: "black",\n      colors: "black",\n      strokeWidth: 3.75,\n      opacity: 1,\n      lastFill: null,\n      lock: false,\n      // The blue selection rectangle / click location\n      // And info about the selection\n      selection: {\n        isDraggingShape: false,\n        visible: false,\n        x1: -100,\n        y1: -100,\n        x2: 0,\n        y2: 0\n      },\n      selectedShapeName: "",\n      groupSelection: [],\n      // Metadata\n      title: "",\n      category: "",\n      description: "",\n      thumbnail: "",\n      // This is used to time the touch click on mobile devices to see if it was a right click\n      touchTime: null,\n      touchEvent: null,\n      gamepieceStatus: {},\n      lineTransformDragging: false,\n      groups: {},\n      connectors: [],\n      errMsg: "",\n      arrowDraggable: false,\n      newArrowRef: "",\n      count: 0,\n      newArrowDropped: false,\n      newConnectorDropped: false,\n      arrowEndX: 0,\n      arrowEndY: 0,\n      isTransforming: false,\n      infolevel: false,\n      rolelevel: "",\n      tic: false,\n      personalAreaOpen: 0,\n      // 0 = closed, 1 = open\n      state: false,\n      saving: null,\n      saved: [],\n      roadmapId: null,\n      alreadyCreated: false,\n      publishing: false,\n      isPasteDisabled: false,\n      gameinstanceid: _this.props.gameinstance,\n      adminid: _this.props.adminid,\n      savedstates: [],\n      savedStateLoaded: false,\n      canvasLoading: false\n    });\n    _this.reloadFromSavedState(props.doNotRecalculateBounds);\n    return _this;\n  }\n  (0,createClass/* default */.Z)(Graphics, [{\n    key: "render",\n    value: function render() {\n      var _this2 = this;\n      if (!this.state.savedStateLoaded) return null;\n      return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Level/* default */.Z, {\n        positionRect: this.positionRect,\n        refreshCanvas: function refreshCanvas() {\n          // Refresh canvas\n          var layer = _this2.state.personalAreaOpen ? "personal" : _this2.state.overlayOpen ? "overlay" : "group";\n          _this2.setState({\n            canvasLoading: true\n          });\n          setTimeout(function () {\n            return _this2.props.reCenter("edit", layer);\n          }, 0);\n        },\n        updateObjState: this.updateSelectedObj,\n        getObjState: this.getSelectedObj,\n        changeObjectPage: this.changeObjectPage,\n        handleCopyPage: this.handleCopyPage,\n        number: this.state.numberOfPages,\n        clearCanvasData: function clearCanvasData() {\n          return _this2.props.setGameEditProps(undefined);\n        },\n        removeJSGIFS: function removeJSGIFS() {\n          return _this2.removeJSGIFS();\n        },\n        saveGame: this.handleSave,\n        pages: this.state.pages,\n        handleLevel: this.handleLevel,\n        handlePageTitle: this.handlePageTitle,\n        handlePageNum: this.handleNumOfPagesChange,\n        numOfPages: this.state.numberOfPages,\n        loadObjects: this.props.loadObjects\n      }), /*#__PURE__*/react.createElement("textarea", {\n        ref: "textarea",\n        id: "textEditArea",\n        value: this.state.text,\n        onChange: function onChange(e) {\n          _this2.setState({\n            text: e.target.value,\n            shouldTextUpdate: false\n          }, function () {\n            // Get the current textNode we are editing, get the name from there\n            // Match name with elements in this.state.texts,\n            var node = _this2.refs[_this2.state.currentTextRef];\n            var name = node.attrs.id;\n            _this2.setState(function (prevState) {\n              return {\n                selectedShapeName: name,\n                texts: prevState.texts.map(function (eachText) {\n                  return eachText.id === name ? Canvas_objectSpread(Canvas_objectSpread({}, eachText), {}, {\n                    text: _this2.state.text\n                  }) : eachText;\n                })\n              };\n            }, function () {\n              _this2.setState(function (prevState) {\n                return {\n                  texts: prevState.texts.map(function (eachText) {\n                    return eachText.name === name ? Canvas_objectSpread(Canvas_objectSpread({}, eachText), {}, {\n                      textWidth: node.textWidth,\n                      textHeight: node.textHeight\n                    }) : eachText;\n                  })\n                };\n              });\n              var stage = _this2.state.overlayOpen ? "overlay" : _this2.state.personalAreaOpen ? "personal" : "group";\n              var scale = _this2.state["".concat(stage, "LayerScale")];\n              _this2.setState({\n                textareaInlineStyle: Canvas_objectSpread(Canvas_objectSpread({}, _this2.state.textareaInlineStyle), {}, {\n                  height: node.textHeight * (node.textArr.length + 1) * scale\n                })\n              });\n              var stageType = _this2.state.overlayOpen ? "overlayStage" : _this2.state.personalAreaOpen ? "personalStage" : "groupStage";\n              _this2.refs[stageType].findOne(".transformer").show();\n              _this2.refs[stageType].draw();\n            });\n          });\n        },\n        onKeyDown: function onKeyDown(e) {\n          return _this2.updateText(e);\n        },\n        onBlur: function onBlur() {\n          return _this2.updateText();\n        },\n        style: this.state.textareaInlineStyle\n      }), this.state.pages[this.state.level - 1] && /*#__PURE__*/react.createElement("div", {\n        className: "overlay-button-container"\n      }, /*#__PURE__*/react.createElement(Tooltip_Tooltip_Tooltip, {\n        tooltipText: "Add new overlay",\n        direction: "left"\n      }, /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          return _this2.handleAddOverlay();\n        }\n      }, /*#__PURE__*/react.createElement(plus/* default */.Z, null))), this.state.pages[this.state.level - 1].overlays.map(function (overlay, i) {\n        return /*#__PURE__*/react.createElement("div", {\n          key: i,\n          className: "overlayButton",\n          onContextMenu: function onContextMenu(e) {\n            if (_this2.state.personalAreaOpen) return;\n            e.preventDefault();\n            _this2.setState({\n              overlayOptionsOpen: i\n            });\n          },\n          style: {\n            top: window.matchMedia("(orientation: portrait)").matches ? 100 : "".concat(70 * (i + 1), "px")\n          },\n          onClick: function onClick() {\n            if (_this2.state.personalAreaOpen) return;\n            _this2.setOverlayOpen(true, overlay.id);\n          }\n        }, _this2.state.pages[_this2.state.level - 1].overlays.map(function (image, i) {\n          if (image.id === overlay.id && image.image) {\n            return /*#__PURE__*/react.createElement(cloudinary_react_esm/* Image */.Ee, {\n              key: i,\n              className: "overlayIcons",\n              cloudName: "uottawaedusim",\n              publicId: "https://res.cloudinary.com/uottawaedusim/image/upload/" + image.image\n            });\n          } else if (overlay.id === image.id) {\n            return /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_layers/* default */.Z, {\n              className: "icon overlay-icon"\n            }));\n          }\n        }));\n      })), this.state.overlayOptionsOpen !== -1 && /*#__PURE__*/react.createElement(Dropdown_DropdownOverlay, {\n        close: function close() {\n          return _this2.setState({\n            overlayOptionsOpen: -1\n          });\n        },\n        changePages: this.handlePageTitle,\n        overlayIndex: this.state.overlayOptionsOpen,\n        pages: this.state.pages,\n        getOverlayState: this.getOverlayState,\n        level: this.state.level,\n        updateObjState: this.updateSelectedObj,\n        handleOverlayIcon: this.handleOverlayIcon,\n        variables: this.props.globalVars\n      }), this.state.overlayOpen && /*#__PURE__*/react.createElement(react.Fragment, null, this.state.overlayAreaContextMenuVisible && this.state.selectedContextMenu && this.state.selectedContextMenu.type === "OverlayAddMenu" && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(Dropdown_DropdownAddObjects, {\n        title: this.props.t("edit.editOverlaySpace"),\n        type: "overlay",\n        xPos: this.state.overlayAreaContextMenuX,\n        yPos: this.state.overlayAreaContextMenuY,\n        state: this.state,\n        layer: this.refs[\'overlayAreaLayer.objects\'],\n        objectLabels: this.savedObjects,\n        deleteLabels: this.deletionCounts,\n        setState: function setState(obj) {\n          return _this2.setState(obj);\n        },\n        setDrawMode: this.setDrawMode,\n        handleImage: this.handleImage,\n        handleVideo: this.handleVideo,\n        handleAudio: this.handleAudio,\n        handleDocument: this.handleDocument,\n        choosecolor: this.chooseColor,\n        close: function close() {\n          return _this2.setState({\n            overlayAreaContextMenuVisible: false\n          });\n        },\n        customObjects: this.customObjects,\n        shapeThemes: this.props.shapeThemes\n      })), /*#__PURE__*/react.createElement(Overlay/* default */.Z, {\n        playMode: false,\n        closeOverlay: function closeOverlay() {\n          return _this2.setOverlayOpen(false, -1);\n        },\n        state: this.state,\n        propsIn: this.props,\n        onMouseDown: this.onMouseDown,\n        onMouseUp: this.handleMouseUp,\n        onMouseMove: this.handleMouseOver,\n        onWheel: this.handleWheel,\n        onDragMove: this.dragLayer,\n        onKeyDown: function onKeyDown(e) {\n          return _this2.contextMenuEventShortcuts(e, false);\n        },\n        onKeyUp: this.keyUp,\n        canvasState: this,\n        setRefs: function setRefs(type, ref) {\n          _this2.refs[type] = ref;\n        }\n      })), /*#__PURE__*/react.createElement("div", {\n        onKeyDown: function onKeyDown(e) {\n          return _this2.contextMenuEventShortcuts(e, false);\n        },\n        onKeyUp: this.keyUp,\n        name: "pasteContainer",\n        tabIndex: "0",\n        id: "editMainContainer"\n      }, /*#__PURE__*/react.createElement("input", {\n        value: this.state.textInput,\n        onChange: function onChange(event) {\n          return _this2.setState({\n            textInput: event.target.value\n          });\n        }\n      }), this.state.groupAreaContextMenuVisible && this.state.selectedContextMenu && this.state.selectedContextMenu.type === "GroupAddMenu" && /*#__PURE__*/react.createElement(Dropdown_DropdownAddObjects, {\n        title: this.props.t("edit.editGroupSpace"),\n        type: "group",\n        xPos: this.state.groupAreaContextMenuX,\n        yPos: this.state.groupAreaContextMenuY,\n        state: this.state,\n        layer: this.refs["groupAreaLayer.objects"],\n        objectLabels: this.savedObjects,\n        deleteLabels: this.deletionCounts,\n        setState: function setState(obj) {\n          return _this2.setState(obj);\n        },\n        setDrawMode: this.setDrawMode,\n        handleImage: this.handleImage,\n        handleVideo: this.handleVideo,\n        handleAudio: this.handleAudio,\n        handleDocument: this.handleDocument,\n        choosecolor: this.chooseColor,\n        customObjects: this.customObjects,\n        close: function close() {\n          return _this2.setState({\n            groupAreaContextMenuVisible: false\n          });\n        },\n        shapeThemes: this.props.shapeThemes\n      }), this.state.drawMode && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement("div", {\n        className: "cursor",\n        id: "cursor"\n      }), /*#__PURE__*/react.createElement(components_DrawModal_DrawModal, {\n        xPos: this.state.personalAreaOpen ? this.state.personalAreaContextMenuX : this.state.groupAreaContextMenuX,\n        yPos: this.state.personalAreaOpen ? this.state.personalAreaContextMenuY : this.state.groupAreaContextMenuY,\n        scale: this.state.personalAreaOpen ? this.state.personalLayerScale : this.state.groupLayerScale,\n        chooseColor: this.chooseColor,\n        setDrawMode: this.setDrawMode,\n        setDrawStrokeWidth: this.setDrawStrokeWidth,\n        setDrawTool: this.setDrawTool\n      })), /*#__PURE__*/react.createElement(ReactKonva/* Stage */.Hf, {\n        height: document.getElementById("editMainContainer") ? document.getElementById("editMainContainer").clientHeight : 0,\n        width: document.getElementById("editMainContainer") ? document.getElementById("editMainContainer").clientWidth : 0,\n        ref: "groupStage",\n        onMouseDown: function onMouseDown(e) {\n          return _this2.onMouseDown(e, false);\n        },\n        onMouseUp: function onMouseUp(e) {\n          return _this2.handleMouseUp(e, false);\n        },\n        onMouseMove: function onMouseMove(e) {\n          return _this2.handleMouseOver(e, false);\n        },\n        onWheel: function onWheel(e) {\n          return _this2.handleWheel(e, false);\n        },\n        onContextMenu: function onContextMenu(e) {\n          return e.evt.preventDefault();\n        }\n        // Mobile Event Listeners\n        ,\n        onTouchStart: function onTouchStart(e) {\n          return _this2.onMouseDown(e, false);\n        },\n        onTouchEnd: function onTouchEnd(e) {\n          return _this2.handleMouseUp(e, false);\n        }\n      }, !this.state.personalAreaOpen && !this.state.overlayOpen && /*#__PURE__*/react.createElement(react.Fragment, null, this.renderAllObjects()))), /*#__PURE__*/react.createElement("div", {\n        id: "editPersonalContainer",\n        style: {\n          backgroundColor: this.state.personalAreaOpen ? this.state.pages[this.state.level - 1].personalColor : "transparent"\n        },\n        className: "info" + this.state.personalAreaOpen + " personalAreaAnimOn"\n      }, /*#__PURE__*/react.createElement("div", {\n        id: "personalMainContainer",\n        name: "pasteContainer",\n        tabIndex: "0",\n        className: "personalAreaStageContainer",\n        onKeyDown: function onKeyDown(e) {\n          return _this2.contextMenuEventShortcuts(e, true);\n        },\n        onKeyUp: this.keyUp\n      }, this.state.personalAreaContextMenuVisible && this.state.selectedContextMenu && this.state.selectedContextMenu.type === "PersonalAddMenu" && /*#__PURE__*/react.createElement(Dropdown_DropdownAddObjects, {\n        title: this.props.t("edit.editPersonalSpace"),\n        type: "personal",\n        xPos: this.state.personalAreaContextMenuX,\n        yPos: this.state.personalAreaContextMenuY,\n        state: this.state,\n        layer: this.refs[\'personalAreaLayer.objects\'],\n        objectLabels: this.savedObjects,\n        deleteLabels: this.deletionCounts,\n        setState: function setState(obj) {\n          return _this2.setState(obj);\n        },\n        setDrawMode: this.setDrawMode,\n        handleImage: this.handleImage,\n        handleVideo: this.handleVideo,\n        handleAudio: this.handleAudio,\n        handleDocument: this.handleDocument,\n        choosecolor: this.chooseColor,\n        customObjects: this.customObjects,\n        close: function close() {\n          return _this2.setState({\n            personalAreaContextMenuVisible: false\n          });\n        },\n        shapeThemes: this.props.shapeThemes\n      }), this.state.selectedContextMenu && this.state.selectedContextMenu.type === "ObjectMenu" && /*#__PURE__*/react.createElement(Portal, null, /*#__PURE__*/react.createElement(components_ContextMenu_ContextMenu, (0,esm_extends/* default */.Z)({}, this.state.selectedContextMenu, {\n        selectedShapeName: this.state.selectedShapeName,\n        getObj: this.getKonvaObj,\n        getObjState: this.getSelectedObj,\n        getObjGroup: this.getSelectedGroup,\n        updateObjState: this.updateSelectedObj,\n        selectedFont: this.state.selectedFont,\n        handleUngrouping: this.handleUngrouping,\n        handleGrouping: this.handleGrouping,\n        handleStrokeColor: this.handleStrokeColor,\n        handleBackgroundColor: this.handleBackgroundColor,\n        handleFillColor: this.handleFillColor,\n        handleWidth: this.handleWidth,\n        handleOpacity: this.handleOpacity,\n        handleFont: this.handleFont,\n        handleSize: this.handleSize,\n        close: this.handleCloseContextMenu,\n        copy: this.handleCopy,\n        cut: this.handleCut,\n        paste: this.handlePaste,\n        lock: this.handleLock,\n        level: this.state.level,\n        handleLevel: this.handleLevel,\n        delete: this.handleDelete,\n        onDocClick: this.onDocClick,\n        globalVars: this.props.globalVars,\n        setCustomObjData: this.setCustomObjData,\n        layerTo: this.layerTo,\n        pages: this.state.pages,\n        themes: this.props.themes,\n        layerToBottom: this.layerToBottom,\n        layers: this.getLayers(),\n        contextDisabled: this.state.contextDisabled,\n        customCount: function customCount() {\n          var layers = _this2.getLayers();\n          var count = 0;\n          for (var i = 0; i < layers.length; i++) {\n            if (_this2.customObjects.includes(_this2.getObjType(layers[i]))) {\n              count++;\n            }\n          }\n          return count;\n        }\n      }))), /*#__PURE__*/react.createElement(ReactKonva/* Stage */.Hf, {\n        style: {\n          position: "relative",\n          overflow: "hidden"\n        },\n        height: document.getElementById("editPersonalContainer") ? document.getElementById("editPersonalContainer").clientHeight : 0,\n        width: document.getElementById("editPersonalContainer") ? document.getElementById("editPersonalContainer").clientWidth : 0,\n        ref: "personalStage",\n        onMouseMove: function onMouseMove(e) {\n          return _this2.handleMouseOver(e, true);\n        },\n        onMouseDown: function onMouseDown(e) {\n          return _this2.onMouseDown(e, true);\n        },\n        onMouseUp: function onMouseUp(e) {\n          return _this2.handleMouseUp(e, true);\n        },\n        onWheel: function onWheel(e) {\n          return _this2.handleWheel(e, true);\n        },\n        onContextMenu: function onContextMenu(e) {\n          return e.evt.preventDefault();\n        }\n        // Mobile Event Listeners\n        ,\n        onTouchStart: function onTouchStart(e) {\n          return _this2.onMouseDown(e, true);\n        },\n        onTouchEnd: function onTouchEnd(e) {\n          return _this2.handleMouseUp(e, true);\n        }\n      }, this.state.personalAreaOpen === 1 && !this.state.overlayOpen && /*#__PURE__*/react.createElement(react.Fragment, null, this.props.loadObjects("personal", "edit", this.state.movingCanvas, this)))), this.state.personalAreaOpen !== 1 ? /*#__PURE__*/react.createElement("button", {\n        className: "personalAreaToggle",\n        onClick: function onClick() {\n          //this.refs.customRectCanvas.add(this.refs.customRect);\n          document.getElementById("editPersonalContainer").classList.add("personalAreaAnimOn");\n          _this2.handlePersonalAreaOpen(true);\n          setTimeout(function () {\n            document.getElementById("editPersonalContainer").classList.remove("personalAreaAnimOn");\n          }, 500);\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_up/* default */.Z, {\n        className: "icon chevrons"\n      }))) : /*#__PURE__*/react.createElement("button", {\n        className: "personalAreaToggle",\n        onClick: function onClick() {\n          //this.refs.customRectCanvas.add(this.refs.customRect);\n          document.getElementById("editPersonalContainer").classList.add("personalAreaAnimOn");\n          _this2.handlePersonalAreaOpen(false);\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_down/* default */.Z, {\n        className: "icon chevrons"\n      }))), /*#__PURE__*/react.createElement("div", {\n        id: "rolesdrop"\n      }, /*#__PURE__*/react.createElement(DropdownRoles/* default */.Z, {\n        roles: this.props.roles,\n        refreshPersonalCanvas: function refreshPersonalCanvas() {\n          _this2.setState({\n            canvasLoading: true,\n            selectedShapeName: "",\n            groupSelection: []\n          });\n          setTimeout(function () {\n            return _this2.props.reCenter("edit", "personal");\n          }, 0);\n        },\n        personalAreaOpen: this.state.personalAreaOpen,\n        openInfoSection: function openInfoSection() {\n          //this.refs.customRectCanvas.add(this.refs.customRect);\n          _this2.setState(function () {\n            return _this2.handlePersonalAreaOpen(true);\n          });\n        },\n        level: this.state.level,\n        pages: this.state.pages,\n        roleLevel: this.handleRoleLevel,\n        gameid: this.state.gameinstanceid,\n        handleCopyRole: this.handleCopyRole,\n        handleEditRole: this.handleEditRole,\n        handleSetRoles: this.handleSetRoles,\n        handleDeleteRole: this.handleDeleteRole,\n        handleEditShapes: this.handleEditShapes,\n        roleRef: "rolesdrop",\n        editMode: true,\n        addNewRoleRect: function addNewRoleRect(name) {\n          var pages = JSON.parse(JSON.stringify(_this2.state.pages));\n          for (var i = 0; i < _this2.state.pages.length; i++) {\n            var page = pages[i];\n            page.personalPositionRect[name] = _this2.positionRect;\n            pages[i] = page;\n          }\n          _this2.setState({\n            pages: pages\n          });\n        },\n        deleteRoleRect: function deleteRoleRect(name) {\n          var pages = JSON.parse(JSON.stringify(_this2.state.pages));\n          for (var i = 0; i < _this2.state.pages.length; i++) {\n            var page = pages[i];\n            delete page.personalPositionRect[name];\n            pages[i] = page;\n          }\n          _this2.setState({\n            pages: pages\n          });\n        },\n        renameRoleRect: function renameRoleRect(oldName, newName) {\n          var pages = JSON.parse(JSON.stringify(_this2.state.pages));\n          for (var i = 0; i < _this2.state.pages.length; i++) {\n            var page = pages[i];\n            page.personalPositionRect[newName] = page.personalPositionRect[oldName];\n            delete page.personalPositionRect[oldName];\n            pages[i] = page;\n          }\n          _this2.setState({\n            pages: pages\n          });\n        }\n      }))));\n    }\n  }]);\n  return Graphics;\n}(react.Component);\n/* harmony default export */ var Canvas = ((0,withTranslation/* withTranslation */.Z)()(Graphics));\n;// CONCATENATED MODULE: ./src/components/Stage/CanvasFunctional.jsx\n\n\n\nfunction CanvasFunctional_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction CanvasFunctional_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? CanvasFunctional_ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : CanvasFunctional_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n // Note: react-dom, not react\n\n// Dropdowns\n\n\n\n\n\n\n\n\n// Standard Konva Components\n\n\n\n\nvar CanvasFunctional_Graphics = function Graphics(props) {\n  // Hooks and state initialization\n  var _useState = useState({\n      customRenderRequested: false,\n      arrows: [],\n      guides: [],\n      groupAreaContextMenuVisible: false,\n      groupAreaContextMenuX: 0,\n      groupAreaContextMenuY: 0,\n      personalAreaContextMenuVisible: false,\n      personalAreaContextMenuX: 0,\n      personalAreaContextMenuY: 0,\n      overlayAreaContextMenuVisible: false,\n      overlayAreaContextMenuX: 0,\n      overlayAreaContextMenuY: 0,\n      savedGroups: [],\n      customRect: [{\n        x: 0,\n        y: 0\n      }],\n      pages: [],\n      numberOfPages: 6,\n      level: 1,\n      overlayOpen: false,\n      overlayOptionsOpen: -1,\n      overlayOpenIndex: -1,\n      overlayImage: -1,\n      selectedContextMenu: null,\n      objectContext: 0,\n      textInput: "",\n      textX: 0,\n      textY: 0,\n      textEditVisible: false,\n      text: "",\n      currentTextRef: "",\n      textareaWidth: 0,\n      textareaHeight: 0,\n      textareaInlineStyle: {\n        display: "none"\n      },\n      textareaFill: null,\n      textareaFontFamily: null,\n      textareaFontSize: 10,\n      textRotation: 0,\n      shouldTextUpdate: true,\n      selectedFont: null,\n      vidsrc: "https://upload.wikimedia.org/wikipedia/commons/transcoded/c/c4/Physicsworks.ogv/Physicsworks.ogv.240p.vp9.webm",\n      imgsrc: \'https://cdn.hackernoon.com/hn-images/0*xMaFF2hSXpf_kIfG.jpg\',\n      audsrc: "https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/shoptalk-clip.mp3",\n      docsrc: "https://res.cloudinary.com/uottawaedusim/image/upload/v1643788961/pdfs/xzgxf449ecdymapdaukb.pdf",\n      docimage: "",\n      tool: \'pen\',\n      isDrawing: false,\n      drawMode: false,\n      color: "black",\n      drawStrokeWidth: 5,\n      groupLayerX: 0,\n      groupLayerY: 0,\n      groupLayerScale: 1,\n      personalLayerX: 0,\n      personalLayerY: 0,\n      personalLayerScale: 1,\n      overlayLayerX: 0,\n      overlayLayerY: 0,\n      overlayLayerScale: 1,\n      layerDraggable: false,\n      movingCanvas: false,\n      colorf: "black",\n      colors: "black",\n      strokeWidth: 3.75,\n      opacity: 1,\n      lastFill: null,\n      lock: false,\n      selection: {\n        isDraggingShape: false,\n        visible: false,\n        x1: -100,\n        y1: -100,\n        x2: 0,\n        y2: 0\n      },\n      selectedShapeName: "",\n      groupSelection: [],\n      title: "",\n      category: "",\n      description: "",\n      thumbnail: "",\n      touchTime: null,\n      touchEvent: null,\n      gamepieceStatus: {},\n      lineTransformDragging: false,\n      connectors: [],\n      gameroles: [],\n      errMsg: "",\n      arrowDraggable: false,\n      newArrowRef: "",\n      count: 0,\n      newArrowDropped: false,\n      newConnectorDropped: false,\n      arrowEndX: 0,\n      arrowEndY: 0,\n      isTransforming: false,\n      infolevel: false,\n      rolelevel: "",\n      tic: false,\n      personalAreaOpen: 0,\n      state: false,\n      saving: null,\n      saved: [],\n      roadmapId: null,\n      alreadyCreated: false,\n      publishing: false,\n      isPasteDisabled: false,\n      gameinstanceid: props.gameinstance,\n      adminid: props.adminid,\n      savedstates: [],\n      savedStateLoaded: false,\n      canvasLoading: false\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    state = _useState2[0],\n    setState = _useState2[1];\n  useEffect(function () {\n    // Component initialization logic\n    var objectState = {};\n    var objectDeleteState = {};\n    for (var i = 0; i < props.savedObjects.length; i++) {\n      objectState = CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, objectState), {}, _defineProperty({}, props.savedObjects[i], []));\n      objectDeleteState = CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, objectDeleteState), {}, _defineProperty({}, "".concat(props.savedObjects[i], "DeleteCount"), 0));\n    }\n    var defaultPagesTemp = new Array(6);\n    defaultPagesTemp.fill({\n      primaryColor: "#8f001a",\n      groupColor: "#FFF",\n      personalColor: "#FFF",\n      groupPositionRect: {\n        x: 0,\n        y: 0,\n        w: 1920,\n        h: 1080,\n        scaleX: 1,\n        scaleY: 1\n      },\n      personalPositionRect: {\n        x: 0,\n        y: 0,\n        w: 1920,\n        h: 1080,\n        scaleX: 1,\n        scaleY: 1\n      },\n      overlayColor: "#FFF",\n      overlays: [],\n      groupLayers: [],\n      personalLayers: []\n    });\n    var defaultPages = defaultPagesTemp.map(function (page, index) {\n      return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, page), {}, {\n        name: props.t("admin.pageX", {\n          page: index + 1\n        })\n      });\n    });\n    setState(function (prevState) {\n      return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread(CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, prevState), objectState), objectDeleteState), {}, {\n        pages: defaultPages\n      });\n    });\n    reloadFromSavedState(props.doNotRecalculateBounds);\n  }, []);\n\n  // Function declarations and other code goes here...\n  var tryParseJSONObject = function tryParseJSONObject(jsonString) {\n    try {\n      var o = JSON.parse(jsonString);\n      if (o && _typeof(o) === "object") {\n        return o;\n      }\n    } catch (e) {}\n    return false;\n  };\n  var reloadFromSavedState = function reloadFromSavedState(doNotRecalculateBounds) {\n    axios.get({"REACT_APP_API_ORIGIN":"http://206.12.91.254:8080","REACT_APP_AUTH0_DOMAIN":"dev-3-81kkgt.us.auth0.com","REACT_APP_AUTH0_CLIENT_ID":"DjTX4pPeCfDPKGNcG8AwMEcJjkTZyYp3","REACT_APP_GRAFANAAUTH_KEY":"eyJrIjoiT1BMTmdaNnh3ejl6Um8xMHgzakhnYzNWYUlzVXR1a20iLCJuIjoiRGVtbyIsImlkIjoxfQ==","REACT_APP_GOOGLEAPI_KEY":"AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU"}.REACT_APP_API_ORIGIN + \'/api/gameinstances/getGameInstance/:adminid/:gameid\', {\n      params: {\n        adminid: state.adminid,\n        gameid: state.gameinstanceid\n      }\n    }).then(function (res) {\n      if (res.data.game_parameters) {\n        // Load saved object data\n        var objects = JSON.parse(res.data.game_parameters);\n        // Parse the saved groups\n        var parsedSavedGroups = [];\n        for (var i = 0; i < objects.savedGroups.length; i++) {\n          var savedGroup = [];\n          for (var j = 0; j < objects.savedGroups[i].length; j++) {\n            var groupObj = objects.savedGroups[i][j];\n            var parsed = tryParseJSONObject(groupObj);\n            var savedGroupData = parsed !== false ? parsed : groupObj;\n            savedGroup.push(savedGroupData);\n          }\n          parsedSavedGroups.push(savedGroup);\n        }\n        objects.savedGroups = parsedSavedGroups;\n        if (props.setTasks) {\n          props.setTasks(objects.tasks || {});\n        }\n        if (props.setVars) {\n          props.setVars(objects.variables || {});\n        }\n        if (props.setCons) {\n          props.setCons(objects.cons || {});\n        }\n        if (props.setInts) {\n          props.setInts(objects.ints || {});\n        }\n        if (props.setTrigs) {\n          props.setTrigs(objects.trigs || {});\n        }\n        if (props.setNotes) {\n          props.setNotes(objects.notes || {});\n        }\n\n        // Put parsed saved data into state\n        savedState.forEach(function (object, index, arr) {\n          // Add backwards compatability for the new centering system\n          if (object === "pages") {\n            for (var _i = 0; _i < objects[object].length; _i++) {\n              var page = objects[object][_i];\n              var overlays = page.overlays;\n              if (!page.groupPositionRect) {\n                page.groupPositionRect = positionRect;\n              }\n              if (!page.personalPositionRect) {\n                page.personalPositionRect = null;\n              }\n              for (var _j = 0; _j < overlays.length; _j++) {\n                var overlay = overlays[_j];\n                if (!overlay.positionRect) {\n                  overlay.positionRect = positionRect;\n                }\n              }\n            }\n          }\n          setState(function (prevState) {\n            var _objectSpread4;\n            return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, prevState), {}, (_objectSpread4 = {}, _defineProperty(_objectSpread4, object, objects[object]), _defineProperty(_objectSpread4, "savedStateLoaded", true), _objectSpread4));\n          }, function () {\n            if (index === arr.length - 1) {\n              // Get full objects for saved groups\n              var fullObjSavedGroups = [];\n              for (var _i2 = 0; _i2 < state.savedGroups.length; _i2++) {\n                var _savedGroup = [];\n                for (var _j2 = 0; _j2 < state.savedGroups[_i2].length; _j2++) {\n                  var _groupObj = state.savedGroups[_i2][_j2];\n                  var id = _groupObj.attrs ? _groupObj.attrs.id : _groupObj;\n                  _savedGroup.push(_groupObj.attrs ? refs[id] : id);\n                }\n                fullObjSavedGroups.push(_savedGroup);\n              }\n              setState(function (prevState) {\n                return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, prevState), {}, {\n                  savedGroups: fullObjSavedGroups\n                });\n              }, function () {\n                // Calculate positions on initial load\n                if (!doNotRecalculateBounds) {\n                  setState(function (prevState) {\n                    return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, prevState), {}, {\n                      canvasLoading: true\n                    });\n                  }, function () {\n                    props.setCanvasLoading(state.canvasLoading);\n                    setTimeout(function () {\n                      return props.reCenter("edit");\n                    }, 1000);\n                  });\n                }\n              });\n              var _loop = function _loop() {\n                var type = customObjects[_j3];\n                if (state[type] === undefined) {\n                  setState(function (prevState) {\n                    return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, prevState), {}, _defineProperty({}, type, []));\n                  });\n                  return "continue";\n                }\n                for (var _i3 = 0; _i3 < state[type].length; _i3++) {\n                  var stateItem = state[type][_i3];\n                  setCustomGroupPos(stateItem, "groupAreaLayer");\n                  setCustomGroupPos(stateItem, "personalAreaLayer");\n                  setCustomGroupPos(stateItem, "overlayAreaLayer");\n                }\n              };\n              for (var _j3 = 0; _j3 < customObjects.length; _j3++) {\n                var _ret = _loop();\n                if (_ret === "continue") continue;\n              }\n            }\n          });\n        });\n      } else {\n        setState(function (prevState) {\n          return CanvasFunctional_objectSpread(CanvasFunctional_objectSpread({}, prevState), {}, {\n            canvasLoading: false,\n            savedStateLoaded: true\n          });\n        });\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n};\n/* harmony default export */ var CanvasFunctional = ((/* unused pure expression or super */ null && (CanvasFunctional_Graphics)));\n// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js + 3 modules\nvar styled_components_browser_esm = __webpack_require__(51117);\n;// CONCATENATED MODULE: ./src/components/Dropdown/DropdownReactContext.jsx\n\n\nvar DropdownReactContext = /*#__PURE__*/(0,react.createContext)({\n  test: "hello"\n});\nvar DropdownContextProvider = function DropdownContextProvider(props) {\n  var _useState = useState("NONE"),\n    _useState2 = _slicedToArray(_useState, 2),\n    type = _useState2[0],\n    setType = _useState2[1];\n  return /*#__PURE__*/React.createElement(DropdownReactContext.Provider, {\n    value: {\n      type: type,\n      setType: setType\n    }\n  }, props.children);\n};\n/* harmony default export */ var Dropdown_DropdownReactContext = ((/* unused pure expression or super */ null && (DropdownContextProvider)));\nvar useDropdownContext = function useDropdownContext() {\n  return (0,react.useContext)(DropdownReactContext);\n};\n;// CONCATENATED MODULE: ./src/components/Loading/ErrorBoundary.jsx\n\n\n\n\n\nfunction ErrorBoundary_createSuper(Derived) { var hasNativeReflectConstruct = ErrorBoundary_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\nfunction ErrorBoundary_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  (0,inherits/* default */.Z)(ErrorBoundary, _React$Component);\n  var _super = ErrorBoundary_createSuper(ErrorBoundary);\n  function ErrorBoundary(props) {\n    var _this;\n    (0,classCallCheck/* default */.Z)(this, ErrorBoundary);\n    _this = _super.call(this, props);\n    _this.state = {\n      hasError: false\n    };\n    return _this;\n  }\n  (0,createClass/* default */.Z)(ErrorBoundary, [{\n    key: "componentDidCatch",\n    value: function componentDidCatch(error, errorInfo) {\n      // You can also log the error to an error reporting service\n      console.error("Caught an error:", error, errorInfo);\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      if (this.state.hasError) {\n        // You can render any custom fallback UI\n        return /*#__PURE__*/react.createElement("h1", null, "Something went wrong.");\n      }\n      return this.props.children;\n    }\n  }], [{\n    key: "getDerivedStateFromError",\n    value: function getDerivedStateFromError(error) {\n      // Update state so the next render will show the fallback UI.\n      return {\n        hasError: true\n      };\n    }\n  }]);\n  return ErrorBoundary;\n}(react.Component);\n/* harmony default export */ var Loading_ErrorBoundary = ((/* unused pure expression or super */ null && (ErrorBoundary)));\n;// CONCATENATED MODULE: ./src/views/EditPage.jsx\n\n\nvar _templateObject, _templateObject2, _templateObject3;\n\n\n\n\n\n\n\n\n\n\n\n\nvar Grid = styled_components_browser_esm/* default */.ZP.div(_templateObject || (_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  display: grid;\\n  grid:\\n    \\"nav header\\" min-content\\n    \\"nav main\\" 1fr / min-content 1fr;\\n  min-height: 100vh;\\n  overflow: hidden;\\n"])));\nvar GridNav = styled_components_browser_esm/* default */.ZP.div(_templateObject2 || (_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  grid-area: nav;\\n  z-index: 2000;\\n"])));\nvar GridMain = styled_components_browser_esm/* default */.ZP.main(_templateObject3 || (_templateObject3 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  grid-area: main;\\n  margin-left: 70px;\\n  /*background-color: #e5e5e5;*/\\n  ", "\\n  background-size: 40px 40px;\\n  /*background-image:\\n  linear-gradient(to right, grey 1px, transparent 1px),\\n  linear-gradient(to bottom, grey 1px, transparent 1px);*/\\n  @media screen and (orientation: portrait) {\\n    margin-left: 0px;\\n  }\\n"])), function (p) {\n  return "background-color: ".concat(p.color, ";");\n});\nvar EditPage = function EditPage(props) {\n  var _useState = (0,react.useState)({}),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    customObjs = _useState2[0],\n    setCustomObjs = _useState2[1];\n  var _useState3 = (0,react.useState)("#FFF"),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    pageColor = _useState4[0],\n    setPageColor = _useState4[1];\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    performanceFunctions = _useState6[0],\n    setPerformanceFunctions = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    showNav = _useState8[0],\n    setShowNav = _useState8[1];\n  var _useState9 = (0,react.useState)(0),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    updater = _useState10[0],\n    setUpdater = _useState10[1];\n  var _useState11 = (0,react.useState)(false),\n    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n    canvasLoading = _useState12[0],\n    setCanvasLoading = _useState12[1];\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  var alertContext = (0,AlertContext/* useAlertContext */.oX)();\n  var dropdownContext = useDropdownContext();\n  var _useState13 = (0,react.useState)([]),\n    _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n    tasks = _useState14[0],\n    setTasks = _useState14[1];\n  var _useState15 = (0,react.useState)([]),\n    _useState16 = (0,slicedToArray/* default */.Z)(_useState15, 2),\n    globalVars = _useState16[0],\n    setGlobalVars = _useState16[1];\n  var _useState17 = (0,react.useState)([]),\n    _useState18 = (0,slicedToArray/* default */.Z)(_useState17, 2),\n    globalCons = _useState18[0],\n    setGlobalCons = _useState18[1];\n  var _useState19 = (0,react.useState)([]),\n    _useState20 = (0,slicedToArray/* default */.Z)(_useState19, 2),\n    globalInts = _useState20[0],\n    setGlobalInts = _useState20[1];\n  var _useState21 = (0,react.useState)([]),\n    _useState22 = (0,slicedToArray/* default */.Z)(_useState21, 2),\n    globalTrigs = _useState22[0],\n    setGlobalTrigs = _useState22[1];\n  var _useState23 = (0,react.useState)([]),\n    _useState24 = (0,slicedToArray/* default */.Z)(_useState23, 2),\n    localVars = _useState24[0],\n    setLocalVars = _useState24[1];\n  var _useState25 = (0,react.useState)([]),\n    _useState26 = (0,slicedToArray/* default */.Z)(_useState25, 2),\n    localCons = _useState26[0],\n    setLocalCons = _useState26[1];\n  var _useState27 = (0,react.useState)([]),\n    _useState28 = (0,slicedToArray/* default */.Z)(_useState27, 2),\n    localInts = _useState28[0],\n    setLocalInts = _useState28[1];\n  var _useState29 = (0,react.useState)([]),\n    _useState30 = (0,slicedToArray/* default */.Z)(_useState29, 2),\n    localTrigs = _useState30[0],\n    setLocalTrigs = _useState30[1];\n  var _useState31 = (0,react.useState)(1),\n    _useState32 = (0,slicedToArray/* default */.Z)(_useState31, 2),\n    page = _useState32[0],\n    setPage = _useState32[1];\n  var _useState33 = (0,react.useState)({}),\n    _useState34 = (0,slicedToArray/* default */.Z)(_useState33, 2),\n    groups = _useState34[0],\n    setGroups = _useState34[1];\n  var _useState35 = (0,react.useState)([]),\n    _useState36 = (0,slicedToArray/* default */.Z)(_useState35, 2),\n    roles = _useState36[0],\n    setRoles = _useState36[1];\n  var _useState37 = (0,react.useState)([]),\n    _useState38 = (0,slicedToArray/* default */.Z)(_useState37, 2),\n    themes = _useState38[0],\n    setThemes = _useState38[1];\n  var _useState39 = (0,react.useState)([]),\n    _useState40 = (0,slicedToArray/* default */.Z)(_useState39, 2),\n    shapeThemes = _useState40[0],\n    setShapeThemes = _useState40[1];\n  var _useState41 = (0,react.useState)(6),\n    _useState42 = (0,slicedToArray/* default */.Z)(_useState41, 2),\n    pages = _useState42[0],\n    setPages = _useState42[1];\n  var _useState43 = (0,react.useState)([]),\n    _useState44 = (0,slicedToArray/* default */.Z)(_useState43, 2),\n    shapes = _useState44[0],\n    setShapes = _useState44[1];\n  var _useState45 = (0,react.useState)([]),\n    _useState46 = (0,slicedToArray/* default */.Z)(_useState45, 2),\n    allShapes = _useState46[0],\n    setAllShapes = _useState46[1];\n  if (props.location.img) {\n    localStorage.setItem(\'gameinstance\', props.location.gameinstance);\n    localStorage.setItem(\'adminid\', props.location.adminid);\n    localStorage.setItem(\'simimg\', props.location.img);\n    localStorage.setItem(\'simtitle\', props.location.title);\n  }\n  var toggle = function toggle() {\n    return setShowNav(!showNav);\n  };\n  (0,react.useEffect)(function () {\n    if (updater % 2 !== 0) {\n      setUpdater(updater + 1);\n    }\n    document.body.style.zoom = "100%";\n  }, [updater]);\n  (0,react.useEffect)(function () {\n    document.title = \'eduSIM - Editing \' + localStorage.getItem(\'simtitle\');\n    // Clean up the title when the component unmounts\n    return function () {\n      document.title = \'eduSIM\';\n    };\n  }, []);\n  var handleSetRoles = function handleSetRoles(roles) {\n    setRoles(roles);\n  };\n  var handlePage = function handlePage(level) {\n    setPage(level);\n  };\n  var handleSetTasks = function handleSetTasks(data) {\n    setTasks(data);\n  };\n  var handleGlobalsVars = function handleGlobalsVars(data) {\n    setGlobalVars(data);\n  };\n  var handleGlobalsCons = function handleGlobalsCons(data) {\n    setGlobalCons(data);\n  };\n  var handleGlobalsInts = function handleGlobalsInts(data) {\n    setGlobalInts(data);\n  };\n  var handleGlobalsTrigs = function handleGlobalsTrigs(data) {\n    setGlobalTrigs(data);\n  };\n  var handleLocalVars = function handleLocalVars(data) {\n    setLocalVars(data);\n  };\n  var handleLocalCons = function handleLocalCons(data) {\n    setLocalCons(data);\n  };\n  var handleLocalInts = function handleLocalInts(data) {\n    setLocalInts(data);\n  };\n  var handleLocalTrigs = function handleLocalTrigs(data) {\n    setLocalTrigs(data);\n  };\n  var handleSetShapes = function handleSetShapes(data) {\n    setShapes(data.inputs);\n  };\n  var handleSetAllShapes = function handleSetAllShapes(data) {\n    setAllShapes(data);\n  };\n  var handleSetPages = function handleSetPages(data) {\n    setPages(data);\n  };\n  var handleGroups = function handleGroups(data) {\n    setGroups(data);\n  };\n  var handleSetThemes = function handleSetThemes(data) {\n    setThemes(data);\n  };\n  var handleSetShapeThemes = function handleSetShapeThemes(data) {\n    setShapeThemes(data);\n  };\n  return /*#__PURE__*/react.createElement("div", {\n    className: "editpage"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "editpage-container"\n  }, /*#__PURE__*/react.createElement(Grid, null, /*#__PURE__*/react.createElement(GridNav, null, /*#__PURE__*/react.createElement(Sidebar/* default */.Z, {\n    performanceFunctions: performanceFunctions,\n    customObjs: customObjs,\n    className: "grid-sidebar",\n    visible: showNav,\n    close: toggle,\n    globalVars: globalVars,\n    globalCons: globalCons,\n    globalInts: globalInts,\n    globalTrigs: globalTrigs,\n    localVars: localVars,\n    localCons: localCons,\n    localInts: localInts,\n    localTrigs: localTrigs,\n    shapes: shapes || {},\n    allShapes: allShapes || {},\n    img: localStorage.simimg,\n    title: localStorage.simtitle,\n    setGlobalVars: handleGlobalsVars,\n    setGlobalCons: handleGlobalsCons,\n    setGlobalInts: handleGlobalsInts,\n    setGlobalTrigs: handleGlobalsTrigs,\n    setLocalVars: handleLocalVars,\n    setLocalCons: handleLocalCons,\n    setLocalInts: handleLocalInts,\n    setLocalTrigs: handleLocalTrigs,\n    handleLevel: handlePage,\n    handleGroups: handleGroups,\n    random: props.random,\n    customObjects: props.customObjects,\n    savedObjects: props.savedObjects,\n    loadObjects: props.loadObjects,\n    page: page,\n    pages: pages,\n    setAlerts: handleSetTasks,\n    alerts: tasks || [],\n    groups: groups,\n    themes: themes,\n    setThemes: handleSetThemes,\n    shapeThemes: shapeThemes,\n    setShapeThemes: handleSetShapeThemes\n  })), /*#__PURE__*/react.createElement(GridMain, {\n    color: pageColor\n  }, /*#__PURE__*/react.createElement(Canvas, {\n    setPageColor: setPageColor,\n    setCanvasLoading: setCanvasLoading,\n    loadObjects: props.loadObjects,\n    customDeletes: props.customDeletes,\n    allDeletes: props.allDeletes,\n    customObjects: props.customObjects,\n    savedObjects: props.savedObjects,\n    reCenter: props.reCenter,\n    setGameEditProps: props.setGameEditProps,\n    setPerformanceFunctions: setPerformanceFunctions,\n    setCustomObjs: setCustomObjs,\n    doNotRecalculateBounds: updater > 0,\n    reloadCanvasFull: function reloadCanvasFull() {\n      return setUpdater(updater + 1);\n    },\n    setDropdownType: dropdownContext.setType,\n    showAlert: alertContext.showAlert,\n    adminid: localStorage.adminid,\n    gameinstance: localStorage.gameinstance,\n    globalVars: globalVars,\n    globalCons: globalCons,\n    globalInts: globalInts,\n    globalTrigs: globalTrigs,\n    localVars: localVars,\n    localCons: localCons,\n    localInts: localInts,\n    localTrigs: localTrigs,\n    tasks: tasks,\n    page: page,\n    themes: themes,\n    setThemes: handleSetThemes,\n    shapeThemes: shapeThemes,\n    setShapeThemes: handleSetShapeThemes,\n    setTasks: handleSetTasks,\n    setShapes: handleSetShapes,\n    setAllShapes: handleSetAllShapes,\n    setGlobalVars: handleGlobalsVars,\n    setGlobalCons: handleGlobalsCons,\n    setGlobalInts: handleGlobalsInts,\n    setGlobalTrigs: handleGlobalsTrigs,\n    setLocalVars: handleLocalVars,\n    setLocalCons: handleLocalCons,\n    setLocalInts: handleLocalInts,\n    setLocalTrigs: handleLocalTrigs,\n    handleGroups: handleGroups,\n    setEditState: props.setEditState,\n    handleLevel: handlePage,\n    handleSetPages: handleSetPages,\n    groups: groups,\n    roles: roles,\n    setRoles: handleSetRoles\n  })))), canvasLoading && /*#__PURE__*/react.createElement("div", {\n    className: "gameLoadingOverlay"\n  }, /*#__PURE__*/react.createElement(Loading/* default */.Z, null)));\n};\n/* harmony default export */ var views_EditPage = (EditPage);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///53935\n')},47930:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".cmenu {\\r\\n  background-color: white;\\r\\n  font-size: 1.2rem;\\r\\n  border: 1px solid var(--primary);\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 10px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  position: absolute;\\r\\n  z-index: 20000;\\r\\n  width: 150px;\\r\\n  animation-duration: 0.3s;\\r\\n  animation-name: slidein;\\r\\n\\r\\n}\\r\\n\\r\\n@keyframes slidein {\\r\\n  from {\\r\\n    margin-top: 20%;\\r\\n    opacity: 0;\\r\\n  }\\r\\n  to {\\r\\n    margin-bottom: 0%;\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n.invisible {\\r\\n  visibility: hidden;\\r\\n  opacity: 0;\\r\\n  transition: visibility 0.3s, opacity 0.3s;\\r\\n}\\r\\n\\r\\n.cmenu ul, li {\\r\\n  overflow-x: hidden;\\r\\n  padding: 0;\\r\\n  margin: 0;\\r\\n  padding: 5px;\\r\\n  list-style-type: none;\\r\\n  animation-duration: 0.6s;\\r\\n}\\r\\n\\r\\n.layerLbl {\\r\\n  padding: 0px 5px;\\r\\n  width: 50%;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.layerBtns {\\r\\n  padding: 0px 5px;\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  flex-direction: row;\\r\\n}\\r\\n\\r\\n.layerBtns > li {\\r\\n  font-size: 0.7em;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.layerBtns > li.disabled {\\r\\n  color: grey;\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.cmenu li:hover {\\r\\n  background-color: grey;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drop {\\r\\n  opacity: 1;\\r\\n  position: relative;\\r\\n  width: 100px;\\r\\n  height: max-content\\r\\n}\\r\\n\\r\\n.conditionsedit {\\r\\n  width: 320px;\\r\\n}\\r\\n.conditionsedit select {\\r\\n  font-size: .7em;\\r\\n  padding: 4px 0;\\r\\n  margin-top: 3px;\\r\\n  border-width: 1px;\\r\\n  border-radius: 2px;\\r\\n}\\r\\n.conditionsedit p {\\r\\n  font-size: .8em;\\r\\n  margin-bottom: 4px;\\r\\n}\\r\\n.conditionsedit input {\\r\\n  font-family: inherit;\\r\\n  padding: 4px;\\r\\n  font-size: .7em;\\r\\n  width: 100%;\\r\\n  margin-top: 3px;\\r\\n}\\r\\n.conditionsedit input::placeholder {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n.conditionsbetween {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n.conditionsbetween > p {\\r\\n  margin: 0 10px;\\r\\n}\\r\\n.smaller{\\r\\n  font-size: .75em !important;\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.deckModal {\\r\\n  min-width: 300px;\\r\\n  max-width: 500px;\\r\\n  background-color: white;\\r\\n  margin: 0 auto;\\r\\n  margin-top: 15vh;\\r\\n  border: 2px solid rgb(145, 145, 145);\\r\\n  border-radius: var(--border-radius);\\r\\n  padding: 15px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  font-size: 1.2rem;\\r\\n  z-index: 220000;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.custom-deck-modal-card-preview{\\r\\n  display: flex;\\r\\n  position: relative;\\r\\n  text-align: center !important;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-cards{\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-cards-text{\\r\\n  position: absolute;\\r\\n  top: 0%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, 40%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: black;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-warning{\\r\\n  position: absolute;\\r\\n  top: 10%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, 40%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: red;\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-card-image button{\\r\\n  margin-top: 30px;\\r\\n  position: relative;\\r\\n  width: 30%;\\r\\n  top: 0%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, -10%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: black;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  border: None;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-card-text input {\\r\\n  position: relative;\\r\\n  top: 0%;\\r\\n  left: 50%;\\r\\n  width: 30%;\\r\\n  transform: translate(-50%, 0%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: black;\\r\\n  border: 1px solid black;\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-footer{\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-add-card{\\r\\n  width: 30%;\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: black;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  border: None;\\r\\n  background-color: var(--green);\\r\\n}\\r\\n\\r\\n.custom-deck-modal-save{\\r\\n  width: 30%;\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: var(--red);\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  border: None;\\r\\n}\\r\\n\\r\\n#deck-preview{\\r\\n  width: 150px !important;\\r\\n  height: 170px !important;\\r\\n  margin: 0 auto;\\r\\n  background-color: aqua !important;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n.custom-alert {\\r\\n  z-index: 1000000;\\r\\n  position: absolute;\\r\\n  right: 2%;\\r\\n  top: 2%;\\r\\n  border: 2px solid;\\r\\n  border-radius: 5px;\\r\\n  padding: 10px;\\r\\n  box-shadow: rgba(0, 0, 0, 0.25) 4px 4px 4px 0px;\\r\\n  font-weight: bold;\\r\\n  min-width: 150px;\\r\\n  max-width: 30%;\\r\\n  text-align: start;\\r\\n  visibility: hidden;\\r\\n  background-color: rgb(189, 230, 176);\\r\\n  border-color: rgb(16, 133, 22);\\r\\n  transition: opacity 0.3s ease, visibility 0.3s ease;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.custom-alert.visible {\\r\\n  opacity: 1;\\r\\n  visibility: visible;\\r\\n}", "",{"version":3,"sources":["webpack://./src/components/ContextMenu/ContextMenu.css"],"names":[],"mappings":"AAAA;EACE,uBAAuB;EACvB,iBAAiB;EACjB,gCAAgC;EAChC,qCAAqC;EACrC,mBAAmB;EACnB,6BAA6B;EAC7B,kBAAkB;EAClB,cAAc;EACd,YAAY;EACZ,wBAAwB;EACxB,uBAAuB;;AAEzB;;AAEA;EACE;IACE,eAAe;IACf,UAAU;EACZ;EACA;IACE,iBAAiB;IACjB,UAAU;EACZ;AACF;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,yCAAyC;AAC3C;;AAEA;EACE,kBAAkB;EAClB,UAAU;EACV,SAAS;EACT,YAAY;EACZ,qBAAqB;EACrB,wBAAwB;AAC1B;;AAEA;EACE,gBAAgB;EAChB,UAAU;EACV,qBAAqB;AACvB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;EACtB,eAAe;AACjB;;AAEA;EACE,UAAU;EACV,kBAAkB;EAClB,YAAY;EACZ;AACF;;AAEA;EACE,YAAY;AACd;AACA;EACE,eAAe;EACf,cAAc;EACd,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AACpB;AACA;EACE,eAAe;EACf,kBAAkB;AACpB;AACA;EACE,oBAAoB;EACpB,YAAY;EACZ,eAAe;EACf,WAAW;EACX,eAAe;AACjB;AACA;EACE,YAAY;AACd;AACA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,cAAc;AAChB;AACA;EACE,2BAA2B;EAC3B,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,uBAAuB;EACvB,cAAc;EACd,gBAAgB;EAChB,oCAAoC;EACpC,mCAAmC;EACnC,aAAa;EACb,6BAA6B;EAC7B,qCAAqC;EACrC,iBAAiB;EACjB,eAAe;AACjB;;;;AAIA;EACE,aAAa;EACb,kBAAkB;EAClB,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,SAAS;EACT,+BAA+B;EAC/B,iBAAiB;EACjB,iBAAiB;EACjB,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,+BAA+B;EAC/B,iBAAiB;EACjB,iBAAiB;EACjB,UAAU;EACV,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,UAAU;EACV,OAAO;EACP,SAAS;EACT,gCAAgC;EAChC,iBAAiB;EACjB,iBAAiB;EACjB,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,OAAO;EACP,SAAS;EACT,UAAU;EACV,8BAA8B;EAC9B,iBAAiB;EACjB,iBAAiB;EACjB,YAAY;EACZ,uBAAuB;EACvB,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,iBAAiB;EACjB,YAAY;EACZ,uBAAuB;EACvB,kBAAkB;EAClB,YAAY;EACZ,YAAY;EACZ,8BAA8B;AAChC;;AAEA;EACE,UAAU;EACV,iBAAiB;EACjB,iBAAiB;EACjB,YAAY;EACZ,4BAA4B;EAC5B,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,wBAAwB;EACxB,cAAc;EACd,iCAAiC;EACjC,UAAU;AACZ;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;EAClB,SAAS;EACT,OAAO;EACP,iBAAiB;EACjB,kBAAkB;EAClB,aAAa;EACb,+CAA+C;EAC/C,iBAAiB;EACjB,gBAAgB;EAChB,cAAc;EACd,iBAAiB;EACjB,kBAAkB;EAClB,oCAAoC;EACpC,8BAA8B;EAC9B,mDAAmD;EACnD,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,mBAAmB;AACrB","sourcesContent":[".cmenu {\\r\\n  background-color: white;\\r\\n  font-size: 1.2rem;\\r\\n  border: 1px solid var(--primary);\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 10px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  position: absolute;\\r\\n  z-index: 20000;\\r\\n  width: 150px;\\r\\n  animation-duration: 0.3s;\\r\\n  animation-name: slidein;\\r\\n\\r\\n}\\r\\n\\r\\n@keyframes slidein {\\r\\n  from {\\r\\n    margin-top: 20%;\\r\\n    opacity: 0;\\r\\n  }\\r\\n  to {\\r\\n    margin-bottom: 0%;\\r\\n    opacity: 1;\\r\\n  }\\r\\n}\\r\\n\\r\\n.invisible {\\r\\n  visibility: hidden;\\r\\n  opacity: 0;\\r\\n  transition: visibility 0.3s, opacity 0.3s;\\r\\n}\\r\\n\\r\\n.cmenu ul, li {\\r\\n  overflow-x: hidden;\\r\\n  padding: 0;\\r\\n  margin: 0;\\r\\n  padding: 5px;\\r\\n  list-style-type: none;\\r\\n  animation-duration: 0.6s;\\r\\n}\\r\\n\\r\\n.layerLbl {\\r\\n  padding: 0px 5px;\\r\\n  width: 50%;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.layerBtns {\\r\\n  padding: 0px 5px;\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  flex-direction: row;\\r\\n}\\r\\n\\r\\n.layerBtns > li {\\r\\n  font-size: 0.7em;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.layerBtns > li.disabled {\\r\\n  color: grey;\\r\\n  pointer-events: none;\\r\\n}\\r\\n\\r\\n.cmenu li:hover {\\r\\n  background-color: grey;\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drop {\\r\\n  opacity: 1;\\r\\n  position: relative;\\r\\n  width: 100px;\\r\\n  height: max-content\\r\\n}\\r\\n\\r\\n.conditionsedit {\\r\\n  width: 320px;\\r\\n}\\r\\n.conditionsedit select {\\r\\n  font-size: .7em;\\r\\n  padding: 4px 0;\\r\\n  margin-top: 3px;\\r\\n  border-width: 1px;\\r\\n  border-radius: 2px;\\r\\n}\\r\\n.conditionsedit p {\\r\\n  font-size: .8em;\\r\\n  margin-bottom: 4px;\\r\\n}\\r\\n.conditionsedit input {\\r\\n  font-family: inherit;\\r\\n  padding: 4px;\\r\\n  font-size: .7em;\\r\\n  width: 100%;\\r\\n  margin-top: 3px;\\r\\n}\\r\\n.conditionsedit input::placeholder {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n.conditionsbetween {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n.conditionsbetween > p {\\r\\n  margin: 0 10px;\\r\\n}\\r\\n.smaller{\\r\\n  font-size: .75em !important;\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.deckModal {\\r\\n  min-width: 300px;\\r\\n  max-width: 500px;\\r\\n  background-color: white;\\r\\n  margin: 0 auto;\\r\\n  margin-top: 15vh;\\r\\n  border: 2px solid rgb(145, 145, 145);\\r\\n  border-radius: var(--border-radius);\\r\\n  padding: 15px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  font-size: 1.2rem;\\r\\n  z-index: 220000;\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\n.custom-deck-modal-card-preview{\\r\\n  display: flex;\\r\\n  position: relative;\\r\\n  text-align: center !important;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-cards{\\r\\n  position: relative;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-cards-text{\\r\\n  position: absolute;\\r\\n  top: 0%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, 40%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: black;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-warning{\\r\\n  position: absolute;\\r\\n  top: 10%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, 40%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: red;\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-card-image button{\\r\\n  margin-top: 30px;\\r\\n  position: relative;\\r\\n  width: 30%;\\r\\n  top: 0%;\\r\\n  left: 50%;\\r\\n  transform: translate(-50%, -10%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: black;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  border: None;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-card-text input {\\r\\n  position: relative;\\r\\n  top: 0%;\\r\\n  left: 50%;\\r\\n  width: 30%;\\r\\n  transform: translate(-50%, 0%);\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: black;\\r\\n  border: 1px solid black;\\r\\n  background-color: white;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-footer{\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n}\\r\\n\\r\\n.custom-deck-modal-add-card{\\r\\n  width: 30%;\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: black;\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  border: None;\\r\\n  background-color: var(--green);\\r\\n}\\r\\n\\r\\n.custom-deck-modal-save{\\r\\n  width: 30%;\\r\\n  font-size: 1.0rem;\\r\\n  font-weight: bold;\\r\\n  color: white;\\r\\n  background-color: var(--red);\\r\\n  border-radius: 5px;\\r\\n  padding: 5px;\\r\\n  border: None;\\r\\n}\\r\\n\\r\\n#deck-preview{\\r\\n  width: 150px !important;\\r\\n  height: 170px !important;\\r\\n  margin: 0 auto;\\r\\n  background-color: aqua !important;\\r\\n  z-index: 1;\\r\\n}\\r\\n\\r\\n.custom-alert {\\r\\n  z-index: 1000000;\\r\\n  position: absolute;\\r\\n  right: 2%;\\r\\n  top: 2%;\\r\\n  border: 2px solid;\\r\\n  border-radius: 5px;\\r\\n  padding: 10px;\\r\\n  box-shadow: rgba(0, 0, 0, 0.25) 4px 4px 4px 0px;\\r\\n  font-weight: bold;\\r\\n  min-width: 150px;\\r\\n  max-width: 30%;\\r\\n  text-align: start;\\r\\n  visibility: hidden;\\r\\n  background-color: rgb(189, 230, 176);\\r\\n  border-color: rgb(16, 133, 22);\\r\\n  transition: opacity 0.3s ease, visibility 0.3s ease;\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.custom-alert.visible {\\r\\n  opacity: 1;\\r\\n  visibility: visible;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.Z = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///47930\n')},34149:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".drawModalContainer {\\r\\n  border: 2px solid rgb(59, 59, 59);\\r\\n  border-radius: 5px;\\r\\n  z-index: 1000;\\r\\n  position: absolute;\\r\\n  top: 50px;\\r\\n  left: 70px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  border-top: none;\\r\\n  background-color: white;\\r\\n}\\r\\n\\r\\n.drawModalContainer:hover {\\r\\n  cursor: default;\\r\\n}\\r\\n\\r\\n@media screen and (orientation: portrait) {\\r\\n  .drawModalContainer {\\r\\n    left: 0px;\\r\\n    top: 120px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.drawModalExitButton {\\r\\n  border: none;\\r\\n  background-color: transparent;\\r\\n  float: right;\\r\\n  padding-right: 5px;\\r\\n}\\r\\n\\r\\n.drawModalExitButton>i {\\r\\n  color: #ff0000;\\r\\n  font-size: 26px;\\r\\n}\\r\\n\\r\\n.drawModalExitButton:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drawModalExitButton:hover>i {\\r\\n  color: #e60d0d;\\r\\n}\\r\\n\\r\\n.drawModalDragBar {\\r\\n  width: 100%;\\r\\n  height: 28px;\\r\\n  background-image: linear-gradient(rgb(59, 59, 59), rgb(0, 0, 0));\\r\\n}\\r\\n\\r\\n.drawModalBottomControls {\\r\\n  padding: 10px;\\r\\n  padding-top: 0px;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>h4 {\\r\\n  padding: 5px 0px;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>label {\\r\\n  padding-right: 5px;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>label:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>input[type=radio]:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drawModalStrokeSlider {\\r\\n  width: 100%;\\r\\n}", "",{"version":3,"sources":["webpack://./src/components/DrawModal/DrawModal.css"],"names":[],"mappings":"AAAA;EACE,iCAAiC;EACjC,kBAAkB;EAClB,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,UAAU;EACV,6BAA6B;EAC7B,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE;IACE,SAAS;IACT,UAAU;EACZ;AACF;;AAEA;EACE,YAAY;EACZ,6BAA6B;EAC7B,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,cAAc;EACd,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,gEAAgE;AAClE;;AAEA;EACE,aAAa;EACb,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb","sourcesContent":[".drawModalContainer {\\r\\n  border: 2px solid rgb(59, 59, 59);\\r\\n  border-radius: 5px;\\r\\n  z-index: 1000;\\r\\n  position: absolute;\\r\\n  top: 50px;\\r\\n  left: 70px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  border-top: none;\\r\\n  background-color: white;\\r\\n}\\r\\n\\r\\n.drawModalContainer:hover {\\r\\n  cursor: default;\\r\\n}\\r\\n\\r\\n@media screen and (orientation: portrait) {\\r\\n  .drawModalContainer {\\r\\n    left: 0px;\\r\\n    top: 120px;\\r\\n  }\\r\\n}\\r\\n\\r\\n.drawModalExitButton {\\r\\n  border: none;\\r\\n  background-color: transparent;\\r\\n  float: right;\\r\\n  padding-right: 5px;\\r\\n}\\r\\n\\r\\n.drawModalExitButton>i {\\r\\n  color: #ff0000;\\r\\n  font-size: 26px;\\r\\n}\\r\\n\\r\\n.drawModalExitButton:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drawModalExitButton:hover>i {\\r\\n  color: #e60d0d;\\r\\n}\\r\\n\\r\\n.drawModalDragBar {\\r\\n  width: 100%;\\r\\n  height: 28px;\\r\\n  background-image: linear-gradient(rgb(59, 59, 59), rgb(0, 0, 0));\\r\\n}\\r\\n\\r\\n.drawModalBottomControls {\\r\\n  padding: 10px;\\r\\n  padding-top: 0px;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>h4 {\\r\\n  padding: 5px 0px;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>label {\\r\\n  padding-right: 5px;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>label:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drawModalBottomControls>input[type=radio]:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.drawModalStrokeSlider {\\r\\n  width: 100%;\\r\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.Z = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQxNDkuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ2dIO0FBQ2pCO0FBQy9GLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQSwrREFBK0Qsd0NBQXdDLHlCQUF5QixvQkFBb0IseUJBQXlCLGdCQUFnQixpQkFBaUIsb0NBQW9DLHVCQUF1Qiw4QkFBOEIsS0FBSyxtQ0FBbUMsc0JBQXNCLEtBQUssbURBQW1ELDJCQUEyQixrQkFBa0IsbUJBQW1CLE9BQU8sS0FBSyw4QkFBOEIsbUJBQW1CLG9DQUFvQyxtQkFBbUIseUJBQXlCLEtBQUssZ0NBQWdDLHFCQUFxQixzQkFBc0IsS0FBSyxvQ0FBb0Msc0JBQXNCLEtBQUssc0NBQXNDLHFCQUFxQixLQUFLLDJCQUEyQixrQkFBa0IsbUJBQW1CLHVFQUF1RSxLQUFLLGtDQUFrQyxvQkFBb0IsdUJBQXVCLEtBQUsscUNBQXFDLHVCQUF1QixLQUFLLHdDQUF3Qyx5QkFBeUIsS0FBSyw4Q0FBOEMsc0JBQXNCLEtBQUssMERBQTBELHNCQUFzQixLQUFLLGdDQUFnQyxrQkFBa0IsS0FBSyxPQUFPLHlHQUF5RyxZQUFZLGFBQWEsV0FBVyxZQUFZLFdBQVcsVUFBVSxZQUFZLGFBQWEsYUFBYSxPQUFPLEtBQUssVUFBVSxPQUFPLEtBQUssS0FBSyxVQUFVLFVBQVUsS0FBSyxNQUFNLEtBQUssVUFBVSxZQUFZLFdBQVcsWUFBWSxPQUFPLEtBQUssVUFBVSxVQUFVLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLFVBQVUsWUFBWSxPQUFPLEtBQUssVUFBVSxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxZQUFZLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLE9BQU8sS0FBSyxVQUFVLDhDQUE4Qyx3Q0FBd0MseUJBQXlCLG9CQUFvQix5QkFBeUIsZ0JBQWdCLGlCQUFpQixvQ0FBb0MsdUJBQXVCLDhCQUE4QixLQUFLLG1DQUFtQyxzQkFBc0IsS0FBSyxtREFBbUQsMkJBQTJCLGtCQUFrQixtQkFBbUIsT0FBTyxLQUFLLDhCQUE4QixtQkFBbUIsb0NBQW9DLG1CQUFtQix5QkFBeUIsS0FBSyxnQ0FBZ0MscUJBQXFCLHNCQUFzQixLQUFLLG9DQUFvQyxzQkFBc0IsS0FBSyxzQ0FBc0MscUJBQXFCLEtBQUssMkJBQTJCLGtCQUFrQixtQkFBbUIsdUVBQXVFLEtBQUssa0NBQWtDLG9CQUFvQix1QkFBdUIsS0FBSyxxQ0FBcUMsdUJBQXVCLEtBQUssd0NBQXdDLHlCQUF5QixLQUFLLDhDQUE4QyxzQkFBc0IsS0FBSywwREFBMEQsc0JBQXNCLEtBQUssZ0NBQWdDLGtCQUFrQixLQUFLLG1CQUFtQjtBQUNqMUc7QUFDQSxzREFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL3NyYy9jb21wb25lbnRzL0RyYXdNb2RhbC9EcmF3TW9kYWwuY3NzPzg0ZWQiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuZHJhd01vZGFsQ29udGFpbmVyIHtcXHJcXG4gIGJvcmRlcjogMnB4IHNvbGlkIHJnYig1OSwgNTksIDU5KTtcXHJcXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcXHJcXG4gIHotaW5kZXg6IDEwMDA7XFxyXFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICB0b3A6IDUwcHg7XFxyXFxuICBsZWZ0OiA3MHB4O1xcclxcbiAgYm94LXNoYWRvdzogdmFyKC0tYm94LXNoYWRvdyk7XFxyXFxuICBib3JkZXItdG9wOiBub25lO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxDb250YWluZXI6aG92ZXIge1xcclxcbiAgY3Vyc29yOiBkZWZhdWx0O1xcclxcbn1cXHJcXG5cXHJcXG5AbWVkaWEgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IHBvcnRyYWl0KSB7XFxyXFxuICAuZHJhd01vZGFsQ29udGFpbmVyIHtcXHJcXG4gICAgbGVmdDogMHB4O1xcclxcbiAgICB0b3A6IDEyMHB4O1xcclxcbiAgfVxcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsRXhpdEJ1dHRvbiB7XFxyXFxuICBib3JkZXI6IG5vbmU7XFxyXFxuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXHJcXG4gIGZsb2F0OiByaWdodDtcXHJcXG4gIHBhZGRpbmctcmlnaHQ6IDVweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRyYXdNb2RhbEV4aXRCdXR0b24+aSB7XFxyXFxuICBjb2xvcjogI2ZmMDAwMDtcXHJcXG4gIGZvbnQtc2l6ZTogMjZweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRyYXdNb2RhbEV4aXRCdXR0b246aG92ZXIge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsRXhpdEJ1dHRvbjpob3Zlcj5pIHtcXHJcXG4gIGNvbG9yOiAjZTYwZDBkO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsRHJhZ0JhciB7XFxyXFxuICB3aWR0aDogMTAwJTtcXHJcXG4gIGhlaWdodDogMjhweDtcXHJcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudChyZ2IoNTksIDU5LCA1OSksIHJnYigwLCAwLCAwKSk7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxCb3R0b21Db250cm9scyB7XFxyXFxuICBwYWRkaW5nOiAxMHB4O1xcclxcbiAgcGFkZGluZy10b3A6IDBweDtcXHJcXG59XFxyXFxuXFxyXFxuLmRyYXdNb2RhbEJvdHRvbUNvbnRyb2xzPmg0IHtcXHJcXG4gIHBhZGRpbmc6IDVweCAwcHg7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxCb3R0b21Db250cm9scz5sYWJlbCB7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxCb3R0b21Db250cm9scz5sYWJlbDpob3ZlciB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxCb3R0b21Db250cm9scz5pbnB1dFt0eXBlPXJhZGlvXTpob3ZlciB7XFxyXFxuICBjdXJzb3I6IHBvaW50ZXI7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxTdHJva2VTbGlkZXIge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL0RyYXdNb2RhbC9EcmF3TW9kYWwuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0VBQ0UsaUNBQWlDO0VBQ2pDLGtCQUFrQjtFQUNsQixhQUFhO0VBQ2Isa0JBQWtCO0VBQ2xCLFNBQVM7RUFDVCxVQUFVO0VBQ1YsNkJBQTZCO0VBQzdCLGdCQUFnQjtFQUNoQix1QkFBdUI7QUFDekI7O0FBRUE7RUFDRSxlQUFlO0FBQ2pCOztBQUVBO0VBQ0U7SUFDRSxTQUFTO0lBQ1QsVUFBVTtFQUNaO0FBQ0Y7O0FBRUE7RUFDRSxZQUFZO0VBQ1osNkJBQTZCO0VBQzdCLFlBQVk7RUFDWixrQkFBa0I7QUFDcEI7O0FBRUE7RUFDRSxjQUFjO0VBQ2QsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UsV0FBVztFQUNYLFlBQVk7RUFDWixnRUFBZ0U7QUFDbEU7O0FBRUE7RUFDRSxhQUFhO0VBQ2IsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0Usa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsZUFBZTtBQUNqQjs7QUFFQTtFQUNFLGVBQWU7QUFDakI7O0FBRUE7RUFDRSxXQUFXO0FBQ2JcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmRyYXdNb2RhbENvbnRhaW5lciB7XFxyXFxuICBib3JkZXI6IDJweCBzb2xpZCByZ2IoNTksIDU5LCA1OSk7XFxyXFxuICBib3JkZXItcmFkaXVzOiA1cHg7XFxyXFxuICB6LWluZGV4OiAxMDAwO1xcclxcbiAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgdG9wOiA1MHB4O1xcclxcbiAgbGVmdDogNzBweDtcXHJcXG4gIGJveC1zaGFkb3c6IHZhcigtLWJveC1zaGFkb3cpO1xcclxcbiAgYm9yZGVyLXRvcDogbm9uZTtcXHJcXG4gIGJhY2tncm91bmQtY29sb3I6IHdoaXRlO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsQ29udGFpbmVyOmhvdmVyIHtcXHJcXG4gIGN1cnNvcjogZGVmYXVsdDtcXHJcXG59XFxyXFxuXFxyXFxuQG1lZGlhIHNjcmVlbiBhbmQgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkge1xcclxcbiAgLmRyYXdNb2RhbENvbnRhaW5lciB7XFxyXFxuICAgIGxlZnQ6IDBweDtcXHJcXG4gICAgdG9wOiAxMjBweDtcXHJcXG4gIH1cXHJcXG59XFxyXFxuXFxyXFxuLmRyYXdNb2RhbEV4aXRCdXR0b24ge1xcclxcbiAgYm9yZGVyOiBub25lO1xcclxcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxyXFxuICBmbG9hdDogcmlnaHQ7XFxyXFxuICBwYWRkaW5nLXJpZ2h0OiA1cHg7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxFeGl0QnV0dG9uPmkge1xcclxcbiAgY29sb3I6ICNmZjAwMDA7XFxyXFxuICBmb250LXNpemU6IDI2cHg7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxFeGl0QnV0dG9uOmhvdmVyIHtcXHJcXG4gIGN1cnNvcjogcG9pbnRlcjtcXHJcXG59XFxyXFxuXFxyXFxuLmRyYXdNb2RhbEV4aXRCdXR0b246aG92ZXI+aSB7XFxyXFxuICBjb2xvcjogI2U2MGQwZDtcXHJcXG59XFxyXFxuXFxyXFxuLmRyYXdNb2RhbERyYWdCYXIge1xcclxcbiAgd2lkdGg6IDEwMCU7XFxyXFxuICBoZWlnaHQ6IDI4cHg7XFxyXFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQocmdiKDU5LCA1OSwgNTkpLCByZ2IoMCwgMCwgMCkpO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsQm90dG9tQ29udHJvbHMge1xcclxcbiAgcGFkZGluZzogMTBweDtcXHJcXG4gIHBhZGRpbmctdG9wOiAwcHg7XFxyXFxufVxcclxcblxcclxcbi5kcmF3TW9kYWxCb3R0b21Db250cm9scz5oNCB7XFxyXFxuICBwYWRkaW5nOiA1cHggMHB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsQm90dG9tQ29udHJvbHM+bGFiZWwge1xcclxcbiAgcGFkZGluZy1yaWdodDogNXB4O1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsQm90dG9tQ29udHJvbHM+bGFiZWw6aG92ZXIge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsQm90dG9tQ29udHJvbHM+aW5wdXRbdHlwZT1yYWRpb106aG92ZXIge1xcclxcbiAgY3Vyc29yOiBwb2ludGVyO1xcclxcbn1cXHJcXG5cXHJcXG4uZHJhd01vZGFsU3Ryb2tlU2xpZGVyIHtcXHJcXG4gIHdpZHRoOiAxMDAlO1xcclxcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34149\n')},32134:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "ul {\\r\\n  list-style: none;\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n@keyframes timer {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 214px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes html {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 528px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes input {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 424px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes checkbox {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 279px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n/* Icon Button */\\r\\n.htmledit>span {\\r\\n  font-size: 0.8em;\\r\\n}\\r\\n\\r\\n.htmledit>p {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.htmledit>span {\\r\\n  font-size: 0.8em;\\r\\n}\\r\\n\\r\\n.htmledit>p {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n/* Dropdown Menu */\\r\\n.fixed-anim {\\r\\n  animation-duration: 1.0s;\\r\\n  animation-name: fadeIn !important;\\r\\n}\\r\\n\\r\\n\\r\\n.fixed-anim-2 {\\r\\n  animation-duration: 1.0s;\\r\\n  animation-name: fadeIn !important;\\r\\n  white-space: nowrap;\\r\\n}\\r\\n\\r\\n.fixed-anim select {\\r\\n  text-align: left;\\r\\n  height: auto !important;\\r\\n}\\r\\n\\r\\n.dropdownedit {\\r\\n  position: absolute;\\r\\n  bottom: -2px;\\r\\n  background-color: rgba(255, 255, 255, 1);\\r\\n  border: 1px solid var(--primary);\\r\\n  border-radius: 30px;\\r\\n  padding: 10px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  animation-duration: 0.5s;\\r\\n  width: 272px;\\r\\n}\\r\\n\\r\\n.timer {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.html {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.input {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.checkbox {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.dropdowncheckbox {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.dropdowncheckbox>input {\\r\\n  width: 24px;\\r\\n  height: 24px;\\r\\n  margin-right: 6px !important;\\r\\n}\\r\\n\\r\\n.menuedit {\\r\\n  width: 100% !important;\\r\\n  font-size: 1.3rem;\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n#menuedit-name {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  border-radius: 10px;\\r\\n  font-size: 25px;\\r\\n  border: 3px solid var(--primary);\\r\\n  background-color: var(--white);\\r\\n  color: var(--primary);\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.menuedit select {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  top: 0 !important;\\r\\n  left: 0 !important;\\r\\n}\\r\\n\\r\\n.menuedit-title {\\r\\n  font-size: 1.5rem;\\r\\n  width: 100% !important;\\r\\n  display: flex;\\r\\n  border-radius: 9px;\\r\\n  padding: 2px;\\r\\n  border: 1px solid var(--primary);\\r\\n}\\r\\n\\r\\n.menuedit-color-container {\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  margin-top: 10px;\\r\\n  flex-direction: column;\\r\\n  background-color: #f6f5f5 !important;\\r\\n  padding: 10px;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.color-button-container {\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n}\\r\\n.color-button-container.text  {\\r\\n  /* flex-wrap: wrap; */\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  display: flex;\\r\\n  border: 4px solid var(--primary);\\r\\n  border-radius: 11px;\\r\\n  overflow: hidden;\\r\\n}\\r\\n.color-button-container.text button {\\r\\n  width: 45% !important;\\r\\n  border: 0px !important;\\r\\n  border-radius: 0px !important;\\r\\n  font-size: 0.50em;\\r\\n}\\r\\n.color-button-container.text button:nth-child(2) {\\r\\n  width: 40% !important;\\r\\n  border: 0px !important;\\r\\n  border-radius: 0px !important;\\r\\n  font-size: 0.50em;\\r\\n  background-color: var(--almost-white) ;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.color-button-container.text button.active {\\r\\n  background-color: var(--primary) !important;\\r\\n  color: var(--white) !important;\\r\\n  border: 0px solid var(--primary) !important;\\r\\n  font-weight: bolder !important;\\r\\n  width: 50% !important;\\r\\n}\\r\\n\\r\\n.color-button-container>button {\\r\\n  background: var(--white);\\r\\n  color: var(--primary);\\r\\n  font-family: inherit;\\r\\n  font-size: 0.52em;\\r\\n  text-transform: uppercase !important;\\r\\n  font-weight: 700;\\r\\n  transition: all .3s;\\r\\n  border: 3px solid var(--primary) !important;\\r\\n  cursor: pointer;\\r\\n  width: 48% !important;\\r\\n  height: 50px !important;\\r\\n  border-radius: 10px !important;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  display: flex;\\r\\n  /* set button to wrape if text overflows */\\r\\n  white-space: wrap;\\r\\n}\\r\\n\\r\\n.color-button-container button.active {\\r\\n  background-color: var(--primary) !important;\\r\\n  color: var(--white) !important;\\r\\n  border: 3px solid var(--primary) !important;\\r\\n  font-weight: bolder !important;\\r\\n}\\r\\n\\r\\n.color-picker {\\r\\n  font-family: inherit !important;\\r\\n  box-shadow: none !important;\\r\\n  border-radius: 10px !important;\\r\\n  margin-top: 5px;\\r\\n  background: none;\\r\\n}\\r\\n\\r\\n.menuedit input {\\r\\n  margin-right: 2px;\\r\\n  margin-left: 0px;\\r\\n}\\r\\n\\r\\n.menuedit>div>button {\\r\\n  height: 30px;\\r\\n  width: 50px;\\r\\n  margin: 10px 0px 5px 0px;\\r\\n  border-radius: 0px;\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n.menuedit>div>button:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.compactPickerEditInput {\\r\\n  margin: 10px !important;\\r\\n  padding: 0px !important;\\r\\n  width: 100% !important;\\r\\n}\\r\\n\\r\\n.editInputOptionSelected {\\r\\n  background-color: var(--primary) !important;\\r\\n  color: var(--white) !important;\\r\\n  border: 3px solid var(--primary) !important;\\r\\n  font-weight: bolder !important;\\r\\n}\\r\\n\\r\\n.simple {\\r\\n  position: relative;\\r\\n  top: -7px;\\r\\n  margin-top: 10px !important;\\r\\n}\\r\\n\\r\\n.notSimple {\\r\\n  position: relative;\\r\\n  top: 9px;\\r\\n  margin-top: 10px !important;\\r\\n}\\r\\n\\r\\n.menu-itemedit {\\r\\n  height: 55px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  transition: background var(--speed);\\r\\n  padding: 0.5rem;\\r\\n  margin-bottom: 0px;\\r\\n  font-size: 1.5rem;\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n.menu-itemedit .icon-buttonedit {\\r\\n  margin-right: 0.5rem;\\r\\n}\\r\\n\\r\\n.menu-itemedit .icon-buttonedit:hover {\\r\\n  filter: none;\\r\\n}\\r\\n\\r\\n.menu-itemedit:hover {\\r\\n  background-color: grey;\\r\\n}\\r\\n\\r\\n.icon-rightedit {\\r\\n  margin-left: auto;\\r\\n}\\r\\n\\r\\n/* CSSTransition classes  */\\r\\n\\r\\n.edit-menu-primary-enter {\\r\\n  position: absolute;\\r\\n  transform: translateX(-110%);\\r\\n}\\r\\n\\r\\n.edit-menu-primary-enter-active {\\r\\n  transform: translateX(300%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.edit-menu-primary-exit {\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n.edit-menu-primary-exit-active {\\r\\n  transform: translateX(-110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.edit-menu-secondary-enter {\\r\\n  transform: translateX(110%);\\r\\n}\\r\\n\\r\\n.edit-menu-secondary-enter-active {\\r\\n  transform: translateX(0%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n/* .edit-menu-secondary-exit {} */\\r\\n\\r\\n.edit-menu-secondary-exit-active {\\r\\n  transform: translateX(110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n#iconsedit {\\r\\n  color: black;\\r\\n  font-size: 1.1rem;\\r\\n}\\r\\n\\r\\n#switchtime {\\r\\n  position: absolute;\\r\\n  left: -100px;\\r\\n  bottom: 205px;\\r\\n}\\r\\n\\r\\n#dswitch {\\r\\n  position: absolute;\\r\\n  left: -120px;\\r\\n  bottom: 45px;\\r\\n}\\r\\n\\r\\n#eswitch {\\r\\n  position: absolute;\\r\\n  left: -120px;\\r\\n  bottom: -10px;\\r\\n}\\r\\n\\r\\n.dropdown button {\\r\\n  position: relative;\\r\\n  top: 0px;\\r\\n  left: 0px;\\r\\n  width: 45px;\\r\\n  height: 60px;\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  font-size: 1.8rem;\\r\\n  color: var(--primary);\\r\\n  background-color: white;\\r\\n  border: none;\\r\\n  text-align: center;\\r\\n  vertical-align: middle;\\r\\n  border-radius: 10px\\r\\n}\\r\\n\\r\\n.dropdown button:hover {\\r\\n  cursor: pointer;\\r\\n  background-color: #f6f5f5;\\r\\n}\\r\\n\\r\\n.dropdown button::selection {\\r\\n  background-color: var(--primary);\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n#pagetype input,\\r\\n#pagetype textarea {\\r\\n  position: absolute;\\r\\n  left: 20px;\\r\\n  top: 160px;\\r\\n  color: grey;\\r\\n  background-color: #f6f5f5;\\r\\n  font-weight: 700;\\r\\n  text-align: left;\\r\\n  width: 250px;\\r\\n  height: 50px;\\r\\n  border: none;\\r\\n  padding: 4px;\\r\\n  outline: none;\\r\\n  font-size: 1.5rem;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 0px;\\r\\n}\\r\\n\\r\\n#pagetype input::placeholder {\\r\\n  opacity: 0.8;\\r\\n  color: grey;\\r\\n}\\r\\n\\r\\n#colourp {\\r\\n  position: relative;\\r\\n  left: 35px;\\r\\n}\\r\\n\\r\\n.menuedit-sliders {\\r\\n  position: relative;\\r\\n  top: 0px;\\r\\n  left: 0px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  padding: 10px;\\r\\n  background-color: #f6f5f5;\\r\\n  color: var(--primary);\\r\\n  font-size: 1.2rem;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.slider {\\r\\n  left: 2%;\\r\\n  width: 95%;\\r\\n  height: 40px;\\r\\n}\\r\\n\\r\\n.slider-container {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  width: 100%;\\r\\n  height: 30px;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.slider-container>input {\\r\\n  width: 35% !important;\\r\\n  border: 3px solid var(--primary);\\r\\n  border-radius: 10px;\\r\\n  padding: 5px;\\r\\n  font-size: 1.0rem;\\r\\n}\\r\\n\\r\\n.slider-container>h1 {\\r\\n  width: 45%;\\r\\n  font-size: 0.9em;\\r\\n  font-family: inherit;\\r\\n}\\r\\n\\r\\n.htmltextarea {\\r\\n  width: 100%;\\r\\n  height: 140px;\\r\\n  resize: none;\\r\\n}\\r\\n\\r\\n.htmledit {\\r\\n  width: 250px;\\r\\n}\\r\\n\\r\\n.htmledit h1 {\\r\\n  padding-bottom: 5px;\\r\\n}\\r\\n\\r\\n.htmledit select {\\r\\n  font-size: .7em;\\r\\n  padding: 4px 0;\\r\\n  border-width: 1px;\\r\\n  margin-bottom: 10px;\\r\\n  border-radius: 2px;\\r\\n}\\r\\n\\r\\n.htmledit p {\\r\\n  font-size: .8em;\\r\\n  margin-bottom: 4px;\\r\\n}\\r\\n\\r\\n.htmlwhinput {\\r\\n  display: flex;\\r\\n  margin: 0px -10px 5px;\\r\\n}\\r\\n\\r\\n.htmlwhinput>div {\\r\\n  flex: 1;\\r\\n  padding: 0 10px;\\r\\n}\\r\\n\\r\\n.htmledit input[type=\\"number\\"] {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.htmledit input {\\r\\n  font-family: inherit;\\r\\n  padding: 4px;\\r\\n  font-size: .7em;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.htmledit input::placeholder {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n.htmledit input[type=\\"checkbox\\"] {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n  width: 24px;\\r\\n  height: 24px;\\r\\n  margin-right: 5px;\\r\\n}\\r\\n\\r\\n.htmliframeinput {\\r\\n  display: flex;\\r\\n  margin: 8px 0;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.htmliframeinput>p {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n.htmliframeinput>input {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n@keyframes fadeIn {\\r\\n  from {\\r\\n    opacity: 0;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}", "",{"version":3,"sources":["webpack://./src/components/Dropdown/DropdownEditObject.css"],"names":[],"mappings":"AAAA;EACE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;;AAEA;EACE;IACE,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,UAAU;IACV,YAAY;EACd;;EAEA;IACE,gBAAgB;IAChB,aAAa;IACb,YAAY;IACZ,cAAc;EAChB;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,UAAU;IACV,YAAY;EACd;;EAEA;IACE,gBAAgB;IAChB,aAAa;IACb,YAAY;IACZ,cAAc;EAChB;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,UAAU;IACV,YAAY;EACd;;EAEA;IACE,gBAAgB;IAChB,aAAa;IACb,YAAY;IACZ,cAAc;EAChB;AACF;;AAEA;EACE;IACE,kBAAkB;IAClB,YAAY;IACZ,WAAW;IACX,UAAU;IACV,YAAY;EACd;;EAEA;IACE,gBAAgB;IAChB,aAAa;IACb,YAAY;IACZ,cAAc;EAChB;AACF;;AAEA,gBAAgB;AAChB;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,eAAe;AACjB;;AAEA,kBAAkB;AAClB;EACE,wBAAwB;EACxB,iCAAiC;AACnC;;;AAGA;EACE,wBAAwB;EACxB,iCAAiC;EACjC,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,wCAAwC;EACxC,gCAAgC;EAChC,mBAAmB;EACnB,aAAa;EACb,6BAA6B;EAC7B,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA;EACE,wBAAwB;EACxB,sBAAsB;AACxB;;AAEA;EACE,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,4BAA4B;AAC9B;;AAEA;EACE,sBAAsB;EACtB,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,WAAW;EACX,YAAY;EACZ,mBAAmB;EACnB,eAAe;EACf,gCAAgC;EAChC,8BAA8B;EAC9B,qBAAqB;EACrB,YAAY;AACd;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;EACjB,sBAAsB;EACtB,aAAa;EACb,kBAAkB;EAClB,YAAY;EACZ,gCAAgC;AAClC;;AAEA;EACE,WAAW;EACX,aAAa;EACb,8BAA8B;EAC9B,mBAAmB;EACnB,gBAAgB;EAChB,sBAAsB;EACtB,oCAAoC;EACpC,aAAa;EACb,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,8BAA8B;AAChC;AACA;EACE,qBAAqB;EACrB,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,gCAAgC;EAChC,mBAAmB;EACnB,gBAAgB;AAClB;AACA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,6BAA6B;EAC7B,iBAAiB;AACnB;AACA;EACE,qBAAqB;EACrB,sBAAsB;EACtB,6BAA6B;EAC7B,iBAAiB;EACjB,sCAAsC;EACtC,YAAY;AACd;;AAEA;EACE,2CAA2C;EAC3C,8BAA8B;EAC9B,2CAA2C;EAC3C,8BAA8B;EAC9B,qBAAqB;AACvB;;AAEA;EACE,wBAAwB;EACxB,qBAAqB;EACrB,oBAAoB;EACpB,iBAAiB;EACjB,oCAAoC;EACpC,gBAAgB;EAChB,mBAAmB;EACnB,2CAA2C;EAC3C,eAAe;EACf,qBAAqB;EACrB,uBAAuB;EACvB,8BAA8B;EAC9B,mBAAmB;EACnB,uBAAuB;EACvB,aAAa;EACb,0CAA0C;EAC1C,iBAAiB;AACnB;;AAEA;EACE,2CAA2C;EAC3C,8BAA8B;EAC9B,2CAA2C;EAC3C,8BAA8B;AAChC;;AAEA;EACE,+BAA+B;EAC/B,2BAA2B;EAC3B,8BAA8B;EAC9B,eAAe;EACf,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,YAAY;EACZ,WAAW;EACX,wBAAwB;EACxB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,sBAAsB;AACxB;;AAEA;EACE,2CAA2C;EAC3C,8BAA8B;EAC9B,2CAA2C;EAC3C,8BAA8B;AAChC;;AAEA;EACE,kBAAkB;EAClB,SAAS;EACT,2BAA2B;AAC7B;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,2BAA2B;AAC7B;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,mCAAmC;EACnC,eAAe;EACf,kBAAkB;EAClB,iBAAiB;EACjB,YAAY;AACd;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,iBAAiB;AACnB;;AAEA,2BAA2B;;AAE3B;EACE,kBAAkB;EAClB,4BAA4B;AAC9B;;AAEA;EACE,2BAA2B;EAC3B,iCAAiC;AACnC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;EACE,yBAAyB;EACzB,iCAAiC;AACnC;;AAEA,iCAAiC;;AAEjC;EACE,2BAA2B;EAC3B,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,YAAY;AACd;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,aAAa;AACf;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,YAAY;EACZ,qCAAqC;EACrC,iBAAiB;EACjB,qBAAqB;EACrB,uBAAuB;EACvB,YAAY;EACZ,kBAAkB;EAClB,sBAAsB;EACtB;AACF;;AAEA;EACE,eAAe;EACf,yBAAyB;AAC3B;;AAEA;EACE,gCAAgC;EAChC,YAAY;AACd;;AAEA;;EAEE,kBAAkB;EAClB,UAAU;EACV,UAAU;EACV,WAAW;EACX,yBAAyB;EACzB,gBAAgB;EAChB,gBAAgB;EAChB,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,kBAAkB;EAClB,QAAQ;EACR,SAAS;EACT,WAAW;EACX,YAAY;EACZ,aAAa;EACb,yBAAyB;EACzB,qBAAqB;EACrB,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,QAAQ;EACR,UAAU;EACV,YAAY;AACd;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,8BAA8B;EAC9B,WAAW;EACX,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;EACrB,gCAAgC;EAChC,mBAAmB;EACnB,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA;EACE,WAAW;EACX,aAAa;EACb,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,cAAc;EACd,iBAAiB;EACjB,mBAAmB;EACnB,kBAAkB;AACpB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,aAAa;EACb,qBAAqB;AACvB;;AAEA;EACE,OAAO;EACP,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,oBAAoB;EACpB,YAAY;EACZ,eAAe;EACf,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,aAAa;EACb,aAAa;EACb,mBAAmB;AACrB;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,SAAS;AACX;;AAEA;EACE;IACE,UAAU;EACZ;;EAEA;IACE,UAAU;EACZ;AACF","sourcesContent":["ul {\\r\\n  list-style: none;\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n}\\r\\n\\r\\n@keyframes timer {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 214px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes html {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 528px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes input {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 424px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n@keyframes checkbox {\\r\\n  from {\\r\\n    margin-left: -20px;\\r\\n    height: 10px;\\r\\n    width: 50px;\\r\\n    z-index: 0;\\r\\n    bottom: 50px;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    margin-left: 0px;\\r\\n    height: 279px;\\r\\n    width: 272px;\\r\\n    z-index: 10000;\\r\\n  }\\r\\n}\\r\\n\\r\\n/* Icon Button */\\r\\n.htmledit>span {\\r\\n  font-size: 0.8em;\\r\\n}\\r\\n\\r\\n.htmledit>p {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n.htmledit>span {\\r\\n  font-size: 0.8em;\\r\\n}\\r\\n\\r\\n.htmledit>p {\\r\\n  margin-top: 5px;\\r\\n}\\r\\n\\r\\n/* Dropdown Menu */\\r\\n.fixed-anim {\\r\\n  animation-duration: 1.0s;\\r\\n  animation-name: fadeIn !important;\\r\\n}\\r\\n\\r\\n\\r\\n.fixed-anim-2 {\\r\\n  animation-duration: 1.0s;\\r\\n  animation-name: fadeIn !important;\\r\\n  white-space: nowrap;\\r\\n}\\r\\n\\r\\n.fixed-anim select {\\r\\n  text-align: left;\\r\\n  height: auto !important;\\r\\n}\\r\\n\\r\\n.dropdownedit {\\r\\n  position: absolute;\\r\\n  bottom: -2px;\\r\\n  background-color: rgba(255, 255, 255, 1);\\r\\n  border: 1px solid var(--primary);\\r\\n  border-radius: 30px;\\r\\n  padding: 10px;\\r\\n  box-shadow: var(--box-shadow);\\r\\n  animation-duration: 0.5s;\\r\\n  width: 272px;\\r\\n}\\r\\n\\r\\n.timer {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.html {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.input {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.checkbox {\\r\\n  animation-duration: 0.5s;\\r\\n  animation-name: fadeIn;\\r\\n}\\r\\n\\r\\n.dropdowncheckbox {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.dropdowncheckbox>input {\\r\\n  width: 24px;\\r\\n  height: 24px;\\r\\n  margin-right: 6px !important;\\r\\n}\\r\\n\\r\\n.menuedit {\\r\\n  width: 100% !important;\\r\\n  font-size: 1.3rem;\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n#menuedit-name {\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  border-radius: 10px;\\r\\n  font-size: 25px;\\r\\n  border: 3px solid var(--primary);\\r\\n  background-color: var(--white);\\r\\n  color: var(--primary);\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.menuedit select {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  top: 0 !important;\\r\\n  left: 0 !important;\\r\\n}\\r\\n\\r\\n.menuedit-title {\\r\\n  font-size: 1.5rem;\\r\\n  width: 100% !important;\\r\\n  display: flex;\\r\\n  border-radius: 9px;\\r\\n  padding: 2px;\\r\\n  border: 1px solid var(--primary);\\r\\n}\\r\\n\\r\\n.menuedit-color-container {\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n  align-items: center;\\r\\n  margin-top: 10px;\\r\\n  flex-direction: column;\\r\\n  background-color: #f6f5f5 !important;\\r\\n  padding: 10px;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.color-button-container {\\r\\n  width: 100%;\\r\\n  display: flex;\\r\\n  justify-content: space-between;\\r\\n}\\r\\n.color-button-container.text  {\\r\\n  /* flex-wrap: wrap; */\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  display: flex;\\r\\n  border: 4px solid var(--primary);\\r\\n  border-radius: 11px;\\r\\n  overflow: hidden;\\r\\n}\\r\\n.color-button-container.text button {\\r\\n  width: 45% !important;\\r\\n  border: 0px !important;\\r\\n  border-radius: 0px !important;\\r\\n  font-size: 0.50em;\\r\\n}\\r\\n.color-button-container.text button:nth-child(2) {\\r\\n  width: 40% !important;\\r\\n  border: 0px !important;\\r\\n  border-radius: 0px !important;\\r\\n  font-size: 0.50em;\\r\\n  background-color: var(--almost-white) ;\\r\\n  padding: 5px;\\r\\n}\\r\\n\\r\\n.color-button-container.text button.active {\\r\\n  background-color: var(--primary) !important;\\r\\n  color: var(--white) !important;\\r\\n  border: 0px solid var(--primary) !important;\\r\\n  font-weight: bolder !important;\\r\\n  width: 50% !important;\\r\\n}\\r\\n\\r\\n.color-button-container>button {\\r\\n  background: var(--white);\\r\\n  color: var(--primary);\\r\\n  font-family: inherit;\\r\\n  font-size: 0.52em;\\r\\n  text-transform: uppercase !important;\\r\\n  font-weight: 700;\\r\\n  transition: all .3s;\\r\\n  border: 3px solid var(--primary) !important;\\r\\n  cursor: pointer;\\r\\n  width: 48% !important;\\r\\n  height: 50px !important;\\r\\n  border-radius: 10px !important;\\r\\n  align-items: center;\\r\\n  justify-content: center;\\r\\n  display: flex;\\r\\n  /* set button to wrape if text overflows */\\r\\n  white-space: wrap;\\r\\n}\\r\\n\\r\\n.color-button-container button.active {\\r\\n  background-color: var(--primary) !important;\\r\\n  color: var(--white) !important;\\r\\n  border: 3px solid var(--primary) !important;\\r\\n  font-weight: bolder !important;\\r\\n}\\r\\n\\r\\n.color-picker {\\r\\n  font-family: inherit !important;\\r\\n  box-shadow: none !important;\\r\\n  border-radius: 10px !important;\\r\\n  margin-top: 5px;\\r\\n  background: none;\\r\\n}\\r\\n\\r\\n.menuedit input {\\r\\n  margin-right: 2px;\\r\\n  margin-left: 0px;\\r\\n}\\r\\n\\r\\n.menuedit>div>button {\\r\\n  height: 30px;\\r\\n  width: 50px;\\r\\n  margin: 10px 0px 5px 0px;\\r\\n  border-radius: 0px;\\r\\n  border: none;\\r\\n}\\r\\n\\r\\n.menuedit>div>button:hover {\\r\\n  cursor: pointer;\\r\\n}\\r\\n\\r\\n.compactPickerEditInput {\\r\\n  margin: 10px !important;\\r\\n  padding: 0px !important;\\r\\n  width: 100% !important;\\r\\n}\\r\\n\\r\\n.editInputOptionSelected {\\r\\n  background-color: var(--primary) !important;\\r\\n  color: var(--white) !important;\\r\\n  border: 3px solid var(--primary) !important;\\r\\n  font-weight: bolder !important;\\r\\n}\\r\\n\\r\\n.simple {\\r\\n  position: relative;\\r\\n  top: -7px;\\r\\n  margin-top: 10px !important;\\r\\n}\\r\\n\\r\\n.notSimple {\\r\\n  position: relative;\\r\\n  top: 9px;\\r\\n  margin-top: 10px !important;\\r\\n}\\r\\n\\r\\n.menu-itemedit {\\r\\n  height: 55px;\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  transition: background var(--speed);\\r\\n  padding: 0.5rem;\\r\\n  margin-bottom: 0px;\\r\\n  font-size: 1.5rem;\\r\\n  color: black;\\r\\n}\\r\\n\\r\\n.menu-itemedit .icon-buttonedit {\\r\\n  margin-right: 0.5rem;\\r\\n}\\r\\n\\r\\n.menu-itemedit .icon-buttonedit:hover {\\r\\n  filter: none;\\r\\n}\\r\\n\\r\\n.menu-itemedit:hover {\\r\\n  background-color: grey;\\r\\n}\\r\\n\\r\\n.icon-rightedit {\\r\\n  margin-left: auto;\\r\\n}\\r\\n\\r\\n/* CSSTransition classes  */\\r\\n\\r\\n.edit-menu-primary-enter {\\r\\n  position: absolute;\\r\\n  transform: translateX(-110%);\\r\\n}\\r\\n\\r\\n.edit-menu-primary-enter-active {\\r\\n  transform: translateX(300%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.edit-menu-primary-exit {\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n.edit-menu-primary-exit-active {\\r\\n  transform: translateX(-110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.edit-menu-secondary-enter {\\r\\n  transform: translateX(110%);\\r\\n}\\r\\n\\r\\n.edit-menu-secondary-enter-active {\\r\\n  transform: translateX(0%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n/* .edit-menu-secondary-exit {} */\\r\\n\\r\\n.edit-menu-secondary-exit-active {\\r\\n  transform: translateX(110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n#iconsedit {\\r\\n  color: black;\\r\\n  font-size: 1.1rem;\\r\\n}\\r\\n\\r\\n#switchtime {\\r\\n  position: absolute;\\r\\n  left: -100px;\\r\\n  bottom: 205px;\\r\\n}\\r\\n\\r\\n#dswitch {\\r\\n  position: absolute;\\r\\n  left: -120px;\\r\\n  bottom: 45px;\\r\\n}\\r\\n\\r\\n#eswitch {\\r\\n  position: absolute;\\r\\n  left: -120px;\\r\\n  bottom: -10px;\\r\\n}\\r\\n\\r\\n.dropdown button {\\r\\n  position: relative;\\r\\n  top: 0px;\\r\\n  left: 0px;\\r\\n  width: 45px;\\r\\n  height: 60px;\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  font-size: 1.8rem;\\r\\n  color: var(--primary);\\r\\n  background-color: white;\\r\\n  border: none;\\r\\n  text-align: center;\\r\\n  vertical-align: middle;\\r\\n  border-radius: 10px\\r\\n}\\r\\n\\r\\n.dropdown button:hover {\\r\\n  cursor: pointer;\\r\\n  background-color: #f6f5f5;\\r\\n}\\r\\n\\r\\n.dropdown button::selection {\\r\\n  background-color: var(--primary);\\r\\n  color: white;\\r\\n}\\r\\n\\r\\n#pagetype input,\\r\\n#pagetype textarea {\\r\\n  position: absolute;\\r\\n  left: 20px;\\r\\n  top: 160px;\\r\\n  color: grey;\\r\\n  background-color: #f6f5f5;\\r\\n  font-weight: 700;\\r\\n  text-align: left;\\r\\n  width: 250px;\\r\\n  height: 50px;\\r\\n  border: none;\\r\\n  padding: 4px;\\r\\n  outline: none;\\r\\n  font-size: 1.5rem;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 0px;\\r\\n}\\r\\n\\r\\n#pagetype input::placeholder {\\r\\n  opacity: 0.8;\\r\\n  color: grey;\\r\\n}\\r\\n\\r\\n#colourp {\\r\\n  position: relative;\\r\\n  left: 35px;\\r\\n}\\r\\n\\r\\n.menuedit-sliders {\\r\\n  position: relative;\\r\\n  top: 0px;\\r\\n  left: 0px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  padding: 10px;\\r\\n  background-color: #f6f5f5;\\r\\n  color: var(--primary);\\r\\n  font-size: 1.2rem;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.slider {\\r\\n  left: 2%;\\r\\n  width: 95%;\\r\\n  height: 40px;\\r\\n}\\r\\n\\r\\n.slider-container {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  justify-content: space-between;\\r\\n  width: 100%;\\r\\n  height: 30px;\\r\\n  margin-bottom: 5px;\\r\\n}\\r\\n\\r\\n.slider-container>input {\\r\\n  width: 35% !important;\\r\\n  border: 3px solid var(--primary);\\r\\n  border-radius: 10px;\\r\\n  padding: 5px;\\r\\n  font-size: 1.0rem;\\r\\n}\\r\\n\\r\\n.slider-container>h1 {\\r\\n  width: 45%;\\r\\n  font-size: 0.9em;\\r\\n  font-family: inherit;\\r\\n}\\r\\n\\r\\n.htmltextarea {\\r\\n  width: 100%;\\r\\n  height: 140px;\\r\\n  resize: none;\\r\\n}\\r\\n\\r\\n.htmledit {\\r\\n  width: 250px;\\r\\n}\\r\\n\\r\\n.htmledit h1 {\\r\\n  padding-bottom: 5px;\\r\\n}\\r\\n\\r\\n.htmledit select {\\r\\n  font-size: .7em;\\r\\n  padding: 4px 0;\\r\\n  border-width: 1px;\\r\\n  margin-bottom: 10px;\\r\\n  border-radius: 2px;\\r\\n}\\r\\n\\r\\n.htmledit p {\\r\\n  font-size: .8em;\\r\\n  margin-bottom: 4px;\\r\\n}\\r\\n\\r\\n.htmlwhinput {\\r\\n  display: flex;\\r\\n  margin: 0px -10px 5px;\\r\\n}\\r\\n\\r\\n.htmlwhinput>div {\\r\\n  flex: 1;\\r\\n  padding: 0 10px;\\r\\n}\\r\\n\\r\\n.htmledit input[type=\\"number\\"] {\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.htmledit input {\\r\\n  font-family: inherit;\\r\\n  padding: 4px;\\r\\n  font-size: .7em;\\r\\n  width: 100%;\\r\\n}\\r\\n\\r\\n.htmledit input::placeholder {\\r\\n  opacity: 0.5;\\r\\n}\\r\\n\\r\\n.htmledit input[type=\\"checkbox\\"] {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n  width: 24px;\\r\\n  height: 24px;\\r\\n  margin-right: 5px;\\r\\n}\\r\\n\\r\\n.htmliframeinput {\\r\\n  display: flex;\\r\\n  margin: 8px 0;\\r\\n  align-items: center;\\r\\n}\\r\\n\\r\\n.htmliframeinput>p {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n.htmliframeinput>input {\\r\\n  margin: 0;\\r\\n}\\r\\n\\r\\n@keyframes fadeIn {\\r\\n  from {\\r\\n    opacity: 0;\\r\\n  }\\r\\n\\r\\n  to {\\r\\n    opacity: 1;\\r\\n  }\\r\\n}"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.Z = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32134\n')},27463:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, "/* Edit Poll */\\r\\n\\r\\n.pollCorrectAnswerCheckboxContainer {\\r\\n  text-align: left;\\r\\n  padding: 5px;\\r\\n  width: 100%;\\r\\n  margin: 0 auto;\\r\\n}\\r\\n\\r\\n.pollCorrectAnswerCheckboxContainer label {\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox {\\r\\n  font-size: 19px;\\r\\n  border-radius: 2px;\\r\\n  border-top: 0px dashed white;\\r\\n  width: 500px;\\r\\n  padding-top: 0px;\\r\\n  display: block;\\r\\n  max-height: 300px;\\r\\n  overflow: auto;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox td {\\r\\n  font-weight: 100;\\r\\n  height: 35px;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox select {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  top: 0 !important;\\r\\n  left: 0 !important;\\r\\n}\\r\\n\\r\\n.pollEditQuestionInput {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  width: 100%;\\r\\n  height:100%;\\r\\n  top: 0 !important;\\r\\n  left: 0 !important;\\r\\n}\\r\\n\\r\\n\\r\\n.editPollQuestionBox td>input::placeholder {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox td>input {\\r\\n  padding-left: 5px;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox td>i {\\r\\n  padding-left: 5px;\\r\\n  color: var(--primary);\\r\\n  font-size: 25px;\\r\\n}\\r\\n\\r\\n.editPollEditBtns>i.disabled {\\r\\n  color: grey !important;\\r\\n}\\r\\n\\r\\n.editPollEditBtns>i.disabled:hover {\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n\\r\\n.editPollEditBtns:hover>i {\\r\\n  cursor: pointer;\\r\\n  text-shadow: 2px 2px 0px rgb(255, 181, 181);\\r\\n}\\r\\n\\r\\n.editPollQuestionBox th {\\r\\n  padding-right: 10px;\\r\\n  font-weight: 1000;\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.pollsEditorRequiredCheck input {\\r\\n  transform: translateY(2px);\\r\\n  width: 30px;\\r\\n  height: 30px;\\r\\n\\r\\n}\\r\\n\\r\\n.editPollStar {\\r\\n  font-size: 30px;\\r\\n  transform: translateY(7px);\\r\\n  padding-left: 5px;\\r\\n  color: var(--primary);\\r\\n  text-align: center !important;\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  font-size: 18px;\\r\\n  height: 35px;\\r\\n  margin: 10px 0px 5px 5px;\\r\\n  padding-right: 5px;\\r\\n  border-radius: 5px;\\r\\n  background-color: white;\\r\\n  border: none;\\r\\n  box-shadow: 0px 0px 0px 2px #a3a3a3;\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn>i {\\r\\n  color: #a3a3a3;\\r\\n  padding: 0px 5px;\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn:hover>i {\\r\\n  color: var(--primary);\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn:hover {\\r\\n  cursor: pointer;\\r\\n  box-shadow: 0px 0px 0px 2px var(--primary);\\r\\n}\\r\\n\\r\\n.editPollTableHead>tr>td {\\r\\n  position: sticky;\\r\\n  top: 0;\\r\\n}\\r\\n\\r\\n.editPollNewPageIcon {\\r\\n  font-size: 1rem !important;\\r\\n  padding-right: 5px;\\r\\n  color: #a3a3a3 !important;\\r\\n}\\r\\n\\r\\n.editPollPrimary-enter {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(-110%);\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n.editPollPrimary-enter-active {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollPrimary-exit {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n.editPollPrimary-exit-active {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(-110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollSecondary-enter {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(110%);\\r\\n}\\r\\n\\r\\n.editPollSecondary-enter-active {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollSecondary-exit {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n}\\r\\n\\r\\n.editPollSecondary-exit-active {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollContainer {\\r\\n  min-width: 500px;\\r\\n  overflow: hidden;\\r\\n  position: relative;\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollBackButton {\\r\\n  color: #a3a3a3;\\r\\n  font-size: 20px;\\r\\n  border: 2px solid #a3a3a3;\\r\\n  border-radius: 5px;\\r\\n  padding: 2px;\\r\\n  margin-right: 10px;\\r\\n  width: 40px;\\r\\n  background-color: transparent;\\r\\n  display: inline;\\r\\n}\\r\\n\\r\\n.editPollBackButton:hover {\\r\\n  cursor: pointer;\\r\\n  color: var(--primary);\\r\\n  border: 2px solid var(--primary);\\r\\n}\\r\\n\\r\\n.editPollAnswerBox {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  display: block;\\r\\n  margin: 0 auto !important;\\r\\n  width: 98%;\\r\\n  height: 100%;\\r\\n  padding: 2px 0px 2px 5px;\\r\\n  margin-top: 5px !important;\\r\\n  margin-bottom: 5px !important;\\r\\n}\\r\\n\\r\\n.editPollAnswerBox::placeholder {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n}\\r\\n\\r\\n.editPollNameBox {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  height: 100%;\\r\\n  padding-left: 5px;\\r\\n  width: 70%;\\r\\n  margin-left: 10px !important;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.editPollNameBox::placeholder {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n}\\r\\n", "",{"version":3,"sources":["webpack://./src/components/Dropdown/DropdownEditPoll.css"],"names":[],"mappings":"AAAA,cAAc;;AAEd;EACE,gBAAgB;EAChB,YAAY;EACZ,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,kBAAkB;EAClB,4BAA4B;EAC5B,YAAY;EACZ,gBAAgB;EAChB,cAAc;EACd,iBAAiB;EACjB,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,YAAY;AACd;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,YAAY;EACZ,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,eAAe;EACf,WAAW;EACX,WAAW;EACX,iBAAiB;EACjB,kBAAkB;AACpB;;;AAGA;EACE,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;EACjB,qBAAqB;EACrB,eAAe;AACjB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;EACf,2CAA2C;AAC7C;;AAEA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,gBAAgB;AAClB;;AAEA;EACE,0BAA0B;EAC1B,WAAW;EACX,YAAY;;AAEd;;AAEA;EACE,eAAe;EACf,0BAA0B;EAC1B,iBAAiB;EACjB,qBAAqB;EACrB,6BAA6B;AAC/B;;AAEA;EACE,qCAAqC;EACrC,eAAe;EACf,YAAY;EACZ,wBAAwB;EACxB,kBAAkB;EAClB,kBAAkB;EAClB,uBAAuB;EACvB,YAAY;EACZ,mCAAmC;AACrC;;AAEA;EACE,cAAc;EACd,gBAAgB;AAClB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,eAAe;EACf,0CAA0C;AAC5C;;AAEA;EACE,gBAAgB;EAChB,MAAM;AACR;;AAEA;EACE,0BAA0B;EAC1B,kBAAkB;EAClB,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,4BAA4B;EAC5B,kBAAkB;AACpB;;AAEA;EACE,UAAU;EACV,yBAAyB;EACzB,iCAAiC;AACnC;;AAEA;EACE,UAAU;EACV,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,YAAY;EACZ,4BAA4B;EAC5B,iCAAiC;AACnC;;AAEA;EACE,YAAY;EACZ,2BAA2B;AAC7B;;AAEA;EACE,UAAU;EACV,yBAAyB;EACzB,iCAAiC;AACnC;;AAEA;EACE,UAAU;EACV,yBAAyB;AAC3B;;AAEA;EACE,YAAY;EACZ,2BAA2B;EAC3B,iCAAiC;AACnC;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,kBAAkB;EAClB,iCAAiC;AACnC;;AAEA;EACE,cAAc;EACd,eAAe;EACf,yBAAyB;EACzB,kBAAkB;EAClB,YAAY;EACZ,kBAAkB;EAClB,WAAW;EACX,6BAA6B;EAC7B,eAAe;AACjB;;AAEA;EACE,eAAe;EACf,qBAAqB;EACrB,gCAAgC;AAClC;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,yBAAyB;EACzB,UAAU;EACV,YAAY;EACZ,wBAAwB;EACxB,0BAA0B;EAC1B,6BAA6B;AAC/B;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;AACpB;;AAEA;EACE,qCAAqC;EACrC,kBAAkB;EAClB,eAAe;EACf,YAAY;EACZ,iBAAiB;EACjB,UAAU;EACV,4BAA4B;EAC5B,qBAAqB;AACvB;;AAEA;EACE,yBAAyB;EACzB,kBAAkB;AACpB","sourcesContent":["/* Edit Poll */\\r\\n\\r\\n.pollCorrectAnswerCheckboxContainer {\\r\\n  text-align: left;\\r\\n  padding: 5px;\\r\\n  width: 100%;\\r\\n  margin: 0 auto;\\r\\n}\\r\\n\\r\\n.pollCorrectAnswerCheckboxContainer label {\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox {\\r\\n  font-size: 19px;\\r\\n  border-radius: 2px;\\r\\n  border-top: 0px dashed white;\\r\\n  width: 500px;\\r\\n  padding-top: 0px;\\r\\n  display: block;\\r\\n  max-height: 300px;\\r\\n  overflow: auto;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox td {\\r\\n  font-weight: 100;\\r\\n  height: 35px;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox select {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  width: 100%;\\r\\n  height: 100%;\\r\\n  top: 0 !important;\\r\\n  left: 0 !important;\\r\\n}\\r\\n\\r\\n.pollEditQuestionInput {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  width: 100%;\\r\\n  height:100%;\\r\\n  top: 0 !important;\\r\\n  left: 0 !important;\\r\\n}\\r\\n\\r\\n\\r\\n.editPollQuestionBox td>input::placeholder {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox td>input {\\r\\n  padding-left: 5px;\\r\\n}\\r\\n\\r\\n.editPollQuestionBox td>i {\\r\\n  padding-left: 5px;\\r\\n  color: var(--primary);\\r\\n  font-size: 25px;\\r\\n}\\r\\n\\r\\n.editPollEditBtns>i.disabled {\\r\\n  color: grey !important;\\r\\n}\\r\\n\\r\\n.editPollEditBtns>i.disabled:hover {\\r\\n  cursor: not-allowed;\\r\\n}\\r\\n\\r\\n.editPollEditBtns:hover>i {\\r\\n  cursor: pointer;\\r\\n  text-shadow: 2px 2px 0px rgb(255, 181, 181);\\r\\n}\\r\\n\\r\\n.editPollQuestionBox th {\\r\\n  padding-right: 10px;\\r\\n  font-weight: 1000;\\r\\n  text-align: left;\\r\\n}\\r\\n\\r\\n.pollsEditorRequiredCheck input {\\r\\n  transform: translateY(2px);\\r\\n  width: 30px;\\r\\n  height: 30px;\\r\\n\\r\\n}\\r\\n\\r\\n.editPollStar {\\r\\n  font-size: 30px;\\r\\n  transform: translateY(7px);\\r\\n  padding-left: 5px;\\r\\n  color: var(--primary);\\r\\n  text-align: center !important;\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  font-size: 18px;\\r\\n  height: 35px;\\r\\n  margin: 10px 0px 5px 5px;\\r\\n  padding-right: 5px;\\r\\n  border-radius: 5px;\\r\\n  background-color: white;\\r\\n  border: none;\\r\\n  box-shadow: 0px 0px 0px 2px #a3a3a3;\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn>i {\\r\\n  color: #a3a3a3;\\r\\n  padding: 0px 5px;\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn:hover>i {\\r\\n  color: var(--primary);\\r\\n}\\r\\n\\r\\n.editPollAddQuestionBtn:hover {\\r\\n  cursor: pointer;\\r\\n  box-shadow: 0px 0px 0px 2px var(--primary);\\r\\n}\\r\\n\\r\\n.editPollTableHead>tr>td {\\r\\n  position: sticky;\\r\\n  top: 0;\\r\\n}\\r\\n\\r\\n.editPollNewPageIcon {\\r\\n  font-size: 1rem !important;\\r\\n  padding-right: 5px;\\r\\n  color: #a3a3a3 !important;\\r\\n}\\r\\n\\r\\n.editPollPrimary-enter {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(-110%);\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n.editPollPrimary-enter-active {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollPrimary-exit {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n  position: absolute;\\r\\n}\\r\\n\\r\\n.editPollPrimary-exit-active {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(-110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollSecondary-enter {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(110%);\\r\\n}\\r\\n\\r\\n.editPollSecondary-enter-active {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollSecondary-exit {\\r\\n  opacity: 1;\\r\\n  transform: translateX(0%);\\r\\n}\\r\\n\\r\\n.editPollSecondary-exit-active {\\r\\n  opacity: 0.5;\\r\\n  transform: translateX(110%);\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollContainer {\\r\\n  min-width: 500px;\\r\\n  overflow: hidden;\\r\\n  position: relative;\\r\\n  transition: all var(--speed) ease;\\r\\n}\\r\\n\\r\\n.editPollBackButton {\\r\\n  color: #a3a3a3;\\r\\n  font-size: 20px;\\r\\n  border: 2px solid #a3a3a3;\\r\\n  border-radius: 5px;\\r\\n  padding: 2px;\\r\\n  margin-right: 10px;\\r\\n  width: 40px;\\r\\n  background-color: transparent;\\r\\n  display: inline;\\r\\n}\\r\\n\\r\\n.editPollBackButton:hover {\\r\\n  cursor: pointer;\\r\\n  color: var(--primary);\\r\\n  border: 2px solid var(--primary);\\r\\n}\\r\\n\\r\\n.editPollAnswerBox {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  display: block;\\r\\n  margin: 0 auto !important;\\r\\n  width: 98%;\\r\\n  height: 100%;\\r\\n  padding: 2px 0px 2px 5px;\\r\\n  margin-top: 5px !important;\\r\\n  margin-bottom: 5px !important;\\r\\n}\\r\\n\\r\\n.editPollAnswerBox::placeholder {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n}\\r\\n\\r\\n.editPollNameBox {\\r\\n  font-family: \\"Montserrat\\", sans-serif;\\r\\n  border-radius: 5px;\\r\\n  font-size: 20px;\\r\\n  height: 100%;\\r\\n  padding-left: 5px;\\r\\n  width: 70%;\\r\\n  margin-left: 10px !important;\\r\\n  display: inline-block;\\r\\n}\\r\\n\\r\\n.editPollNameBox::placeholder {\\r\\n  color: rgb(136, 136, 136);\\r\\n  font-style: italic;\\r\\n}\\r\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.Z = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27463\n')},13788:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(87537);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23645);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".tooltip-container {\\r\\n    position: relative;\\r\\n    display: inline-block;\\r\\n  }\\r\\n  \\r\\n  .tooltip-text {\\r\\n    position: absolute;\\r\\n    visibility: hidden;\\r\\n    background-color: var(--primary);\\r\\n    color: #fff;\\r\\n    text-align: center;\\r\\n    padding: 5px;\\r\\n    border-radius: 10px;\\r\\n    position: absolute;\\r\\n    z-index: 1;\\r\\n    width: 120px;\\r\\n  }\\r\\n  .left {\\r\\n    bottom: 5px; \\r\\n    left: -130px; \\r\\n  }\\r\\n  \\r\\n  .tooltip-container:hover .tooltip-text {\\r\\n    visibility: visible;\\r\\n  }", "",{"version":3,"sources":["webpack://./src/components/Tooltip/Tooltip.css"],"names":[],"mappings":"AAAA;IACI,kBAAkB;IAClB,qBAAqB;EACvB;;EAEA;IACE,kBAAkB;IAClB,kBAAkB;IAClB,gCAAgC;IAChC,WAAW;IACX,kBAAkB;IAClB,YAAY;IACZ,mBAAmB;IACnB,kBAAkB;IAClB,UAAU;IACV,YAAY;EACd;EACA;IACE,WAAW;IACX,YAAY;EACd;;EAEA;IACE,mBAAmB;EACrB","sourcesContent":[".tooltip-container {\\r\\n    position: relative;\\r\\n    display: inline-block;\\r\\n  }\\r\\n  \\r\\n  .tooltip-text {\\r\\n    position: absolute;\\r\\n    visibility: hidden;\\r\\n    background-color: var(--primary);\\r\\n    color: #fff;\\r\\n    text-align: center;\\r\\n    padding: 5px;\\r\\n    border-radius: 10px;\\r\\n    position: absolute;\\r\\n    z-index: 1;\\r\\n    width: 120px;\\r\\n  }\\r\\n  .left {\\r\\n    bottom: 5px; \\r\\n    left: -130px; \\r\\n  }\\r\\n  \\r\\n  .tooltip-container:hover .tooltip-text {\\r\\n    visibility: visible;\\r\\n  }"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.Z = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTM3ODguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ2dIO0FBQ2pCO0FBQy9GLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0Y7QUFDQSw4REFBOEQsMkJBQTJCLDhCQUE4QixPQUFPLDJCQUEyQiwyQkFBMkIsMkJBQTJCLHlDQUF5QyxvQkFBb0IsMkJBQTJCLHFCQUFxQiw0QkFBNEIsMkJBQTJCLG1CQUFtQixxQkFBcUIsT0FBTyxhQUFhLHFCQUFxQixzQkFBc0IsT0FBTyxvREFBb0QsNEJBQTRCLE9BQU8sT0FBTyxxR0FBcUcsWUFBWSxhQUFhLE9BQU8sS0FBSyxZQUFZLGFBQWEsYUFBYSxXQUFXLFlBQVksV0FBVyxZQUFZLGFBQWEsV0FBVyxVQUFVLEtBQUssS0FBSyxVQUFVLFVBQVUsTUFBTSxLQUFLLFlBQVksOENBQThDLDJCQUEyQiw4QkFBOEIsT0FBTywyQkFBMkIsMkJBQTJCLDJCQUEyQix5Q0FBeUMsb0JBQW9CLDJCQUEyQixxQkFBcUIsNEJBQTRCLDJCQUEyQixtQkFBbUIscUJBQXFCLE9BQU8sYUFBYSxxQkFBcUIsc0JBQXNCLE9BQU8sb0RBQW9ELDRCQUE0QixPQUFPLG1CQUFtQjtBQUMvNkM7QUFDQSxzREFBZSx1QkFBdUIsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2NsaWVudC8uL3NyYy9jb21wb25lbnRzL1Rvb2x0aXAvVG9vbHRpcC5jc3M/ZGRlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi50b29sdGlwLWNvbnRhaW5lciB7XFxyXFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXHJcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcclxcbiAgfVxcclxcbiAgXFxyXFxuICAudG9vbHRpcC10ZXh0IHtcXHJcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcclxcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXByaW1hcnkpO1xcclxcbiAgICBjb2xvcjogI2ZmZjtcXHJcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcclxcbiAgICBwYWRkaW5nOiA1cHg7XFxyXFxuICAgIGJvcmRlci1yYWRpdXM6IDEwcHg7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgei1pbmRleDogMTtcXHJcXG4gICAgd2lkdGg6IDEyMHB4O1xcclxcbiAgfVxcclxcbiAgLmxlZnQge1xcclxcbiAgICBib3R0b206IDVweDsgXFxyXFxuICAgIGxlZnQ6IC0xMzBweDsgXFxyXFxuICB9XFxyXFxuICBcXHJcXG4gIC50b29sdGlwLWNvbnRhaW5lcjpob3ZlciAudG9vbHRpcC10ZXh0IHtcXHJcXG4gICAgdmlzaWJpbGl0eTogdmlzaWJsZTtcXHJcXG4gIH1cIiwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvY29tcG9uZW50cy9Ub29sdGlwL1Rvb2x0aXAuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksa0JBQWtCO0lBQ2xCLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLGtCQUFrQjtJQUNsQixrQkFBa0I7SUFDbEIsZ0NBQWdDO0lBQ2hDLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsWUFBWTtJQUNaLG1CQUFtQjtJQUNuQixrQkFBa0I7SUFDbEIsVUFBVTtJQUNWLFlBQVk7RUFDZDtFQUNBO0lBQ0UsV0FBVztJQUNYLFlBQVk7RUFDZDs7RUFFQTtJQUNFLG1CQUFtQjtFQUNyQlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIudG9vbHRpcC1jb250YWluZXIge1xcclxcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxyXFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXHJcXG4gIH1cXHJcXG4gIFxcclxcbiAgLnRvb2x0aXAtdGV4dCB7XFxyXFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXHJcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1wcmltYXJ5KTtcXHJcXG4gICAgY29sb3I6ICNmZmY7XFxyXFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXHJcXG4gICAgcGFkZGluZzogNXB4O1xcclxcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHotaW5kZXg6IDE7XFxyXFxuICAgIHdpZHRoOiAxMjBweDtcXHJcXG4gIH1cXHJcXG4gIC5sZWZ0IHtcXHJcXG4gICAgYm90dG9tOiA1cHg7IFxcclxcbiAgICBsZWZ0OiAtMTMwcHg7IFxcclxcbiAgfVxcclxcbiAgXFxyXFxuICAudG9vbHRpcC1jb250YWluZXI6aG92ZXIgLnRvb2x0aXAtdGV4dCB7XFxyXFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxyXFxuICB9XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13788\n')}}]);