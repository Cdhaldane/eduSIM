"use strict";(self.webpackChunkclient=self.webpackChunkclient||[]).push([[111],{35111:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "default": function() { return /* binding */ GamePage; }\n});\n\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nvar esm_typeof = __webpack_require__(71002);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nvar defineProperty = __webpack_require__(4942);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\nvar objectWithoutProperties = __webpack_require__(45987);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nvar asyncToGenerator = __webpack_require__(15861);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js + 1 modules\nvar slicedToArray = __webpack_require__(29439);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\nvar taggedTemplateLiteral = __webpack_require__(30168);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js\nvar regenerator = __webpack_require__(64687);\nvar regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(67294);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/extends.js\nvar esm_extends = __webpack_require__(87462);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js + 2 modules\nvar toConsumableArray = __webpack_require__(93433);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nvar classCallCheck = __webpack_require__(15671);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nvar createClass = __webpack_require__(43144);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nvar assertThisInitialized = __webpack_require__(97326);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\nvar inherits = __webpack_require__(60136);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\nvar possibleConstructorReturn = __webpack_require__(82963);\n// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nvar getPrototypeOf = __webpack_require__(61120);\n// EXTERNAL MODULE: ./src/components/Level/Level.jsx + 4 modules\nvar Level = __webpack_require__(72005);\n// EXTERNAL MODULE: ./node_modules/react-modal/lib/index.js\nvar lib = __webpack_require__(83253);\nvar lib_default = /*#__PURE__*/__webpack_require__.n(lib);\n// EXTERNAL MODULE: ./src/components/Dropdown/DropdownRoles.jsx + 3 modules\nvar DropdownRoles = __webpack_require__(14497);\n// EXTERNAL MODULE: ./node_modules/styled-components/dist/styled-components.browser.esm.js + 3 modules\nvar styled_components_browser_esm = __webpack_require__(51117);\n// EXTERNAL MODULE: ./src/components/Alerts/AlertContext.jsx\nvar AlertContext = __webpack_require__(31582);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/useTranslation.js\nvar useTranslation = __webpack_require__(26793);\n;// CONCATENATED MODULE: ./src/components/CreateRoleSelection/CreateRole.jsx\n\n\n\nvar _templateObject, _templateObject2;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\nvar NameInput = styled_components_browser_esm/* default */.ZP.input(_templateObject || (_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  grid-area: main;\\n  background-color: #e5e5e5;\\n  font-family: \'Montserrat\', sans-serif;\\n  background: none;\\n  border: 1px rgba(0,0,0,0.6) solid;\\n  font-size: 1.2em;\\n  border-radius: 30px;\\n  padding: 10px;\\n  margin-right: 10px;\\n  flex: 1;\\n  height:auto;\\n  min-width: 0;\\n  max-width: 300px;\\n"])));\nvar Submit = styled_components_browser_esm/* default */.ZP.button(_templateObject2 || (_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  font-family: \\"Montserrat\\", sans-serif;\\n  font-size: 1.5rem;\\n  margin: 10px;\\n  margin-top: 10px;\\n  padding: 5px;\\n  border-radius: 5px;\\n  display: inline-block;\\n  border: 2px outset rgb(136, 136, 136);\\n  --color: rgb(161, 255, 148);\\n  background-color: var(--color);\\n  border-color: var(--color);\\n"])));\nvar CreateRole = function CreateRole(props) {\n  var _props$roleSelection;\n  var _useState = (0,react.useState)(null),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    role = _useState2[0],\n    setRole = _useState2[1];\n  var _useState3 = (0,react.useState)(""),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    name = _useState4[0],\n    setName = _useState4[1];\n  var alertContext = (0,AlertContext/* useAlertContext */.oX)();\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n  var roleRef = (0,react.useRef)(null);\n  var rolesTaken = Object.values(props.players).reduce(function (roles, _ref) {\n    var role = _ref.role;\n    var roleCount = roles[role] || 0;\n    return _objectSpread(_objectSpread({}, roles), {}, (0,defineProperty/* default */.Z)({}, role, roleCount + 1));\n  }, {});\n  (0,react.useEffect)(function () {\n    var _props$initialUserInf, _props$initialUserInf2;\n    setRole({\n      name: (_props$initialUserInf = props.initialUserInfo) === null || _props$initialUserInf === void 0 ? void 0 : _props$initialUserInf.gamerole\n    });\n    setName((_props$initialUserInf2 = props.initialUserInfo) === null || _props$initialUserInf2 === void 0 ? void 0 : _props$initialUserInf2.fname);\n  }, [props.initialUserInfo]);\n  var handleSubmit = function handleSubmit(e) {\n    e.preventDefault();\n    if (role && role.num && role.num !== -1 && rolesTaken[role.name] >= role.num) {\n      alertContext.showAlert(t("alert.roleLimitExceeded"), "warning");\n      return false;\n    }\n    if (!role.name) {\n      alertContext.showAlert(t("alert.noRoleSelected"), "warning");\n      return false;\n    }\n    props.handleSubmit({\n      role: role === null || role === void 0 ? void 0 : role.name,\n      name: name\n    });\n    return false;\n  };\n  var handleSetRole = function handleSetRole(name, num) {\n    setRole({\n      name: name,\n      num: num\n    });\n  };\n  var userExists = Object.keys(props.initialUserInfo).length > 0;\n  return /*#__PURE__*/react.createElement("div", {\n    className: "areacsv"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "areacsvform modal-role-select"\n  }, /*#__PURE__*/react.createElement("div", {\n    className: "modal-role-header"\n  }, /*#__PURE__*/react.createElement("h2", null, t("game.welcomeToTheSimulation")), /*#__PURE__*/react.createElement("p", null, userExists ? t("game.joiningAsX", {\n    name: "".concat(props.initialUserInfo.fname, " ").concat(props.initialUserInfo.lname)\n  }) : t("game.inputName"))), /*#__PURE__*/react.createElement("div", {\n    className: "rolesdrops",\n    ref: roleRef\n  }, /*#__PURE__*/react.createElement("span", {\n    className: "role-title"\n  }, t("common.role")), /*#__PURE__*/react.createElement(DropdownRoles/* default */.Z, {\n    gameid: props.gameid,\n    roleLevel: handleSetRole,\n    editMode: false,\n    rolesTaken: rolesTaken,\n    initRole: role,\n    disabled: (props === null || props === void 0 ? void 0 : props.roleSelection) !== "student",\n    random: props === null || props === void 0 ? void 0 : (_props$roleSelection = props.roleSelection) === null || _props$roleSelection === void 0 ? void 0 : _props$roleSelection.startsWith("random"),\n    roleRef: roleRef,\n    roles: props.roles\n  })), /*#__PURE__*/react.createElement("form", {\n    onSubmit: handleSubmit,\n    action: "#"\n  }, /*#__PURE__*/react.createElement("span", null, t("game.name")), /*#__PURE__*/react.createElement(NameInput, {\n    type: "text",\n    placeholder: t("game.namePlaceholder"),\n    value: name ? name : "",\n    onChange: function onChange(e) {\n      return setName(e.target.value);\n    },\n    required: true,\n    maxLength: "25"\n  }), /*#__PURE__*/react.createElement(Submit, {\n    type: "submit"\n  }, t("game.go")))));\n};\n/* harmony default export */ var CreateRoleSelection_CreateRole = (CreateRole);\n// EXTERNAL MODULE: ./node_modules/moment/moment.js\nvar moment = __webpack_require__(30381);\nvar moment_default = /*#__PURE__*/__webpack_require__.n(moment);\n// EXTERNAL MODULE: ./node_modules/immutable/dist/immutable.es.js\nvar immutable_es = __webpack_require__(35369);\n// EXTERNAL MODULE: ./src/components/Stage/Overlay.jsx\nvar Overlay = __webpack_require__(99107);\n// EXTERNAL MODULE: ./node_modules/react-i18next/dist/es/withTranslation.js\nvar withTranslation = __webpack_require__(91768);\n// EXTERNAL MODULE: ./node_modules/cloudinary-react/dist/cloudinary-react.esm.js\nvar cloudinary_react_esm = __webpack_require__(42736);\n// EXTERNAL MODULE: ./node_modules/lodash/lodash.js\nvar lodash = __webpack_require__(96486);\n;// CONCATENATED MODULE: ./src/components/Stage/CanvasGameUtils.jsx\n\n\n\n\nvar CanvasUtils = function CanvasUtils(props) {\n  //\n  //        CONDITION UTILS \n  //\n\n  var handleCompare = function handleCompare(variable1, comparator, variable2, math, variable3) {\n    variable2 = handleThenCompare(variable2, math, variable3);\n    if (comparator === \'=\') {\n      if (variable1 === variable2) return true;else return false;\n    }\n    if (comparator === \'!=\') {\n      if (variable1 !== variable2) return true;else return false;\n    }\n    if (comparator === \'>\') {\n      if (variable1 > variable2) return true;else return false;\n    }\n    if (comparator === \'<\') {\n      if (variable1 < variable2) return true;else return false;\n    }\n  };\n  var handleThenCompare = function handleThenCompare(variable2, math, variable3) {\n    if (isNumeric(variable2) && isNumeric(variable3)) {\n      if (math === \'+\') {\n        variable2 = variable2 + variable3;\n      }\n      if (math === \'-\') {\n        variable2 = variable2 - variable3;\n      }\n      if (math === \'X\') {\n        variable2 = variable2 * variable3;\n      }\n      if (math === \'/\') {\n        variable2 = variable2 / variable3;\n      }\n    }\n    return variable2;\n  };\n  var isNumeric = function isNumeric(n) {\n    return /^-?\\d+$/.test(n);\n  };\n  var checkCondition = function checkCondition(var1, comparator, var2, math, var3) {\n    var _getRealValue = getRealValue(var1, var2, var3),\n      _getRealValue2 = (0,slicedToArray/* default */.Z)(_getRealValue, 3),\n      variable1 = _getRealValue2[0],\n      variable2 = _getRealValue2[1],\n      variable3 = _getRealValue2[2];\n    if (variable1 === undefined || variable2 === undefined) return false;\n    return handleCompare(variable1, comparator, variable2, math, variable3);\n  };\n  var setCondition = function setCondition(var1, var2, math, var3) {\n    var _getRealValue3 = getRealValue(var1, var2, var3),\n      _getRealValue4 = (0,slicedToArray/* default */.Z)(_getRealValue3, 3),\n      variable1 = _getRealValue4[0],\n      variable2 = _getRealValue4[1],\n      variable3 = _getRealValue4[2];\n    if (variable1 === undefined || variable2 === undefined) return false;\n    var x = handleThenCompare(variable2, math, variable3);\n    if (props.globalVars[var1] !== x) props.handleVariable(var1, x);\n  };\n  var getRealValue = function getRealValue(var1, var2, var3) {\n    var variable1, variable2, variable3;\n    variable1 = props.globalVars[var1.toString()];\n    if (Array.isArray(var2)) variable2 = props.globalVars[var2.toString()];else variable2 = var2;\n    if (Array.isArray(var3)) variable3 = props.globalVars[var3.toString()];else variable3 = var3;\n    if (variable1 === \'true\') variable1 = true;\n    if (variable1 === \'false\') variable1 = false;\n    if (variable2 === \'true\') variable2 = true;\n    if (variable2 === \'false\') variable2 = false;\n    if (variable3 === \'true\') variable3 = true;\n    if (variable3 === \'false\') variable3 = false;\n    if (isNumeric(variable1)) variable1 = parseInt(variable1);\n    if (isNumeric(variable2)) variable2 = parseInt(variable2);\n    if (isNumeric(variable3)) variable3 = parseInt(variable3);\n    // if (variable1 === undefined || variable2 === undefined) return [false];\n    return [variable1, variable2, variable3];\n  };\n  (0,react.useEffect)(function () {\n    var x = [];\n    if (!props.editMode) for (var i = 0; i < props.globalCons.length; i++) {\n      var result = [];\n      for (var j = 0; j < props.globalCons[i].length; j++) {\n        var con = props.globalCons[i][j].flatMap(function (x) {\n          return x;\n        });\n        var var1 = con[0];\n        var comparator = con[1];\n        var var2 = con[2];\n        var math = con[3];\n        var var3 = con[4];\n        if (j < props.globalCons[i].length - 1) {\n          result.push(checkCondition(var1, comparator, var2, math, var3));\n        } else {\n          if (!result.includes(false)) {\n            setCondition(var1, var2, math, var3);\n          }\n        }\n      }\n    }\n  }, [props]);\n  return /*#__PURE__*/react.createElement(react.Fragment, null);\n};\n/* harmony default export */ var CanvasGameUtils = (CanvasUtils);\nfunction splitArrayByValue(arr, index) {\n  var result = [];\n  arr.forEach(function (item) {\n    var value = item[index];\n    var existingArray = result.find(function (arr) {\n      return arr[0][index] === value;\n    });\n    if (existingArray) {\n      existingArray.push(item);\n    } else {\n      result.push([item]);\n    }\n  });\n  return result;\n}\nvar filterObjectBasedOnArray = function filterObjectBasedOnArray(obj, arr) {\n  var newObj = {};\n  arr.forEach(function (item) {\n    // assuming each object in the array has an \'id\' property\n    var key = item.id;\n    if (key in obj) {\n      newObj[key] = obj[key];\n    }\n  });\n  return newObj;\n};\nvar checkCorrespondence = function checkCorrespondence(objArray, subArray) {\n  // Check if we\'ve reached a bottom-level array (its elements are not arrays)\n  if (!Array.isArray(subArray[0])) {\n    var _loop = function _loop(j) {\n      var objExists = objArray.some(function (obj) {\n        return obj.name === subArray[j];\n      });\n      if (!objExists) return {\n        v: false\n      };\n    };\n    // Check first two positions\n    for (var j = 0; j < Math.min(2, subArray.length); j++) {\n      var _ret = _loop(j);\n      if ((0,esm_typeof/* default */.Z)(_ret) === "object") return _ret.v;\n    }\n    return true;\n  }\n\n  // If we haven\'t reached a bottom-level array, recurse into each subArray\n  for (var i = 0; i < subArray.length; i++) {\n    if (!checkCorrespondence(objArray, subArray[i])) return false;\n  }\n  return true;\n};\nvar filterArrayBasedOnArray = function filterArrayBasedOnArray(arr, obj) {\n  var out = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (checkCorrespondence(obj, arr[i])) {\n      out.push(arr[i]);\n    }\n  }\n  return out;\n};\nvar handleCollisions = function handleCollisions(props, state) {\n  var trigs = props.globalTrigs;\n  trigs = trigs.map(function (subArr) {\n    return subArr.map(function (item) {\n      return Array.isArray(item) ? item.flat().join(\'\') : item;\n    });\n  });\n  for (var i = 0; i < trigs.length; i++) {\n    if (trigs[i].length === 4) {\n      trigs[i].splice(3, 1);\n    }\n  }\n  var result = props.savedObjects.flatMap(function (key) {\n    return state[key];\n  });\n  var filteredResult = result.filter(function (obj) {\n    return obj.level === state.level;\n  });\n  var groupedArrays = splitArrayByValue(trigs, 2);\n  groupedArrays = filterArrayBasedOnArray(groupedArrays, filteredResult);\n  var gamepieces = filterObjectBasedOnArray(props.gamepieceStatus, filteredResult);\n  groupedArrays.map(function (group) {\n    var touchingArray = [];\n    group.map(function (item) {\n      var name = filteredResult.filter(function (obj) {\n        return obj.name === item[0];\n      });\n      var shape = undefined;\n      name.map(function (obj) {\n        if (Object.keys(gamepieces).includes(obj.id)) {\n          shape = gamepieces[obj.id];\n        }\n      });\n      if (name === undefined) return;\n      if (shape === undefined) return;\n      shape.id = item[0];\n      var touch = handleTouching(shape, item[1], filteredResult);\n      touchingArray.push(touch);\n    });\n    if (touchingArray.includes(true) && !props.globalVars[group[0][2]]) {\n      props.socket.emit("varChange", {\n        name: group[0][2],\n        value: true\n      });\n    } else if (!touchingArray.includes(true) && props.globalVars[group[0][2]] !== false) {\n      props.socket.emit("varChange", {\n        name: group[0][2],\n        value: false\n      });\n    }\n  });\n};\nvar handleTouching = function handleTouching(shapeOne, shapeTwo, filteredResult) {\n  var shape1 = shapeOne;\n  var shape2 = filteredResult.find(function (obj) {\n    return obj.name === shapeTwo;\n  });\n  if (shape1 === undefined || shape2 === undefined) return false;\n  var shape1Left = shape1.x;\n  var shape1Right = shape1.x;\n  var shape1Top = shape1.y;\n  var shape1Bottom = shape1.y;\n  var shape2Left = shape2.x - shape2.width / 2;\n  var shape2Right = shape2.x + 0.5 * shape2.width;\n  var shape2Top = shape2.y - shape2.height / 2;\n  var shape2Bottom = shape2.y + 0.5 * shape2.height;\n  // Check for intersection along the x-axis\n  var isIntersectX = shape1Right >= shape2Left && shape1Left <= shape2Right;\n\n  // Check for intersection along the y-axis\n  var isIntersectY = shape1Bottom >= shape2Top && shape1Top <= shape2Bottom;\n\n  // if(isIntersectX && isIntersectY) console.log(shapeOne, shapeTwo)\n\n  // Return true if there is intersection along both axes\n  return isIntersectX && isIntersectY;\n};\nvar handleNotColliding = function handleNotColliding(id, props) {};\n\n// if (xDist < sW / 2 && yDist < sH / 2) {\n//   e.target.x(sX + this.originCenter(sW / 2, id) - this.originCenter(this.realWidth(obj) / 2, obj.id));\n//   e.target.y(sY + this.originCenter(sH / 2, id) - this.originCenter(this.realHeight(obj) / 2, obj.id));\n//   console.log("COLLISION");\n//   handleCollisions(obj.id, id, true, this.props);\n// } else {\n//   handleNotColliding(obj.id, this.props);\n// }\n// EXTERNAL MODULE: ./node_modules/draft-js/lib/Draft.js\nvar Draft = __webpack_require__(9041);\n// EXTERNAL MODULE: ./node_modules/react-konva/es/ReactKonva.js + 5 modules\nvar ReactKonva = __webpack_require__(16904);\n// EXTERNAL MODULE: ./public/icons/layers.svg\nvar icons_layers = __webpack_require__(18510);\n// EXTERNAL MODULE: ./public/icons/chevron-up.svg\nvar chevron_up = __webpack_require__(88025);\n// EXTERNAL MODULE: ./public/icons/chevron-down.svg\nvar chevron_down = __webpack_require__(53602);\n;// CONCATENATED MODULE: ./src/components/Stage/CanvasGame.jsx\n\n\n\n\n\n\n\n\n\n\nvar CanvasGame_templateObject;\nfunction CanvasGame_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction CanvasGame_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? CanvasGame_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : CanvasGame_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,getPrototypeOf/* default */.Z)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,getPrototypeOf/* default */.Z)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,possibleConstructorReturn/* default */.Z)(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar EndScreen = styled_components_browser_esm/* default */.ZP.div(CanvasGame_templateObject || (CanvasGame_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  position: fixed;\\n  width: 100vw;\\n  height: 100vh;\\n  background-color: #e5e5e5;\\n  top: 0;\\n  left: 0;\\n  z-index: 5;\\n  color: var(--text-color);\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  transition: opacity .4s;\\n  ", "\\n  & > p {\\n    font-size: 3em;\\n  }\\n  & > button {\\n    align-self: center;\\n    font-family: inherit;\\n    padding: 10px 20px;\\n    font-size: 1em;\\n    color: white;\\n    background-color: var(--primary);\\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);\\n    border: none;\\n    text-align: center;\\n    cursor: pointer;\\n    border-radius: 10px;\\n    margin-top: 10px;\\n  }\\n"])), function (p) {\n  return !p.open && "\\n    opacity: 0;\\n    pointer-events: none;\\n  ";\n});\nvar Graphics = /*#__PURE__*/function (_Component) {\n  (0,inherits/* default */.Z)(Graphics, _Component);\n  var _super = _createSuper(Graphics);\n  function Graphics(props) {\n    var _this;\n    (0,classCallCheck/* default */.Z)(this, Graphics);\n    _this = _super.call(this, props);\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "customObjects", (0,toConsumableArray/* default */.Z)(_this.props.customObjectsLabels));\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "savedObjects", [].concat((0,toConsumableArray/* default */.Z)(_this.props.savedObjects), ["status", "pages", "overlayImage"]));\n    // Replaces variables in text content (stored in {})\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "formatTextMacros", function (simple, text) {\n      var _this$props$players$_, _this$props$players$_2;\n      var newText;\n      var editorContent;\n      var editorState;\n      var blocks;\n      // Simple mode modifies a string, Rich text mode modifies an EditorState (draft.js)\n      if (simple) {\n        newText = text;\n      } else {\n        editorState = Draft.EditorState.createWithContent((0,Draft.convertFromRaw)(JSON.parse(text)));\n        editorContent = editorState.getCurrentContent();\n        newText = editorContent.getPlainText("\\x01");\n        blocks = editorContent.getBlocksAsArray().map(function (block) {\n          return [block.getKey(), block.getText()];\n        });\n      }\n      var start = false;\n      if (simple) {\n        for (var i = 0; i < newText.length; i++) {\n          var c = newText[i];\n          if (c === "{") start = i;\n          if (c === "}" && start !== false) {\n            var content = void 0,\n              key = void 0;\n            switch (key = newText.slice(start + 1, i)) {\n              case "playername":\n                content = (_this$props$players$_ = _this.props.players[_this.props.socket.id]) === null || _this$props$players$_ === void 0 ? void 0 : _this$props$players$_.name;\n                break;\n              case "playerrole":\n                content = ((_this$props$players$_2 = _this.props.players[_this.props.socket.id]) === null || _this$props$players$_2 === void 0 ? void 0 : _this$props$players$_2.role) || "(no role selected)";\n                break;\n              case "lastsetvar":\n                content = sessionStorage.lastSetVar;\n                break;\n              case "currentdate":\n                content = moment_default()().format("dddd, MMMM Do YYYY");\n                break;\n              default:\n                var vars = {};\n                if (!!sessionStorage.gameVars) vars = _this.props.localVars;\n                if (Object.keys(_this.props.globalVars).length > 0) vars = CanvasGame_objectSpread(CanvasGame_objectSpread({}, vars), _this.props.globalVars);\n                content = vars[key];\n            }\n            newText = newText.slice(0, start) + (content !== undefined ? content : "unknown") + newText.slice(i + 1);\n            i = start;\n            start = false;\n          }\n        }\n        return newText;\n      } else {\n        // Go block by block\n        var _vars = {};\n        if (!!sessionStorage.gameVars) _vars = _this.props.localVars;\n        var varKeys = Object.keys(_vars);\n        for (var blockNum = 0; blockNum < blocks.length; blockNum++) {\n          var blockKey = blocks[blockNum][0];\n          var blockText = blocks[blockNum][1];\n          for (var varNum = 0; varNum < varKeys.length; varNum++) {\n            if (blockText.includes("{".concat(varKeys[varNum], "}"))) {\n              // Replace the text\n              var selectionStart = blockText.indexOf("{".concat(varKeys[varNum], "}"));\n              var selectionEnd = selectionStart + varKeys[varNum].length + 2;\n              var selection = Draft.SelectionState.createEmpty(blockKey).merge({\n                focusOffset: selectionEnd,\n                anchorOffset: selectionStart\n              });\n              var charList = editorContent.getBlockForKey(blockKey).getCharacterList();\n              for (var _i = 0; _i < charList.size; _i++) {\n                if (_i < selectionStart || _i > selectionEnd) {\n                  charList = charList.set(_i, null);\n                }\n              }\n              var textStyles = charList.reduce(function (styles, c) {\n                if (styles && c) {\n                  return styles.union(c.getStyle());\n                } else {\n                  return styles;\n                }\n              }, (0,immutable_es/* OrderedSet */.hU)());\n              editorContent = Draft.Modifier.replaceText(editorContent, selection, _vars[varKeys[varNum]].toString(), textStyles);\n            }\n          }\n        }\n        var newEditorState = Draft.EditorState.push(editorState, editorContent, \'remove-range\');\n        return JSON.stringify((0,Draft.convertToRaw)(newEditorState.getCurrentContent()));\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "checkObjConditions", function (conditions) {\n      if (!conditions || !conditions.varName) return true;\n      var vars = {};\n      if (!!sessionStorage.gameVars) vars = JSON.parse(sessionStorage.gameVars);\n      if (!!sessionStorage.lastSetVar) vars.lastsetvar = sessionStorage.lastSetVar;\n      if (Object.keys(_this.props.globalVars).length > 0) vars = CanvasGame_objectSpread(CanvasGame_objectSpread({}, vars), _this.props.globalVars);\n      var trueValue = isNaN(conditions.trueValue) ? conditions.trueValue : parseInt(conditions.trueValue);\n      var trueValueAlt = isNaN(conditions.trueValueAlt) ? conditions.trueValueAlt : parseInt(conditions.trueValueAlt);\n      var val = isNaN(val) ? vars[conditions.varName] : parseInt(vars[conditions.varName]);\n      var varLen = isNaN(val) ? (val || "").length : val;\n      if (val === true) val = \'true\';\n      if (val === false) val = \'false\';\n      switch (conditions.condition) {\n        case "isequal":\n          return val == trueValue;\n        case "true":\n          return val === \'true\';\n        case "false":\n          return val === \'false\';\n        case "isgreater":\n          return varLen > trueValue;\n        case "isless":\n          return varLen < trueValue;\n        case "between":\n          return varLen <= trueValueAlt && varLen >= trueValue;\n        case "negative":\n          return !val;\n        case "onchange":\n          return sessionStorage.lastSetVar === conditions.varName;\n        default:\n          return !!val;\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getDragProps", function (id) {\n      var _JSON$parse;\n      var obj = _this.props.gamepieceStatus[id];\n      var dbid = (_JSON$parse = JSON.parse(localStorage.getItem(\'userInfo\'))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse.dbid;\n      if (!obj || obj.info) return {};\n      if (obj.dragging === dbid) return {};\n      return {\n        x: obj.x,\n        y: obj.y,\n        opacity: obj.dragging ? 0.7 : 1,\n        draggable: obj.dragging ? false : true\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "sendInteraction", function (gamepieceId, parameters) {\n      _this.props.socket.emit("interaction", {\n        gamepieceId: gamepieceId,\n        parameters: parameters,\n        sameState: true\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getPage", function (index) {\n      return _this.state.pages[_this.state.level - 1] || {};\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "refresh", function () {\n      _this.forceUpdate();\n      _this.props.refresh();\n    });\n    // for drag calculations\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "realWidth", function (_ref) {\n      var width = _ref.width,\n        radiusX = _ref.radiusX;\n      if (!width && radiusX) {\n        return radiusX * 2;\n      }\n      return width;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "realHeight", function (_ref2) {\n      var height = _ref2.height,\n        radiusY = _ref2.radiusY;\n      if (!height && radiusY) {\n        return radiusY * 2;\n      }\n      return height;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "originCenter", function (value, name) {\n      return name.startsWith("ellipses") || name.startsWith("stars") || name.startsWith("triangles") ? 0 : value;\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "renderOverlay", function (page) {\n      if (!_this.state.overlayOpen) {\n        _this.setState({\n          overlayOpenIndex: page.id,\n          overlayOpen: true\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "componentDidUpdate", function (prevProps, prevState) {\n      if (prevState.canvasLoading !== _this.state.canvasLoading) {\n        _this.props.setCanvasLoading(_this.state.canvasLoading);\n      }\n      if (prevProps.level !== _this.props.level) {\n        _this.setState({\n          level: _this.props.level\n        });\n      }\n      handleCollisions(_this.props, _this.state);\n\n      // Show overlay if it is the next page and a pageEnter overlay is available\n      var page = _this.getPage(_this.state.level - 1);\n      var overlayPageEnter = null;\n      var overlayCondition = null;\n      if (page !== null && page !== void 0 && page.overlays) {\n        for (var i = 0; i < page.overlays.length; i++) {\n          if (page.overlays[i].overlayOpenOption === "pageEnter") {\n            overlayPageEnter = page.overlays[i];\n            break;\n          }\n          if (page.overlays[i].overlayCondition) {\n            var conditions = page.overlays[i].overlayCondition.conditions;\n            if (conditions != undefined) {\n              var overlayCheck = _this.checkObjConditions(conditions);\n              if (overlayCheck) {\n                overlayCondition = page.overlays[i];\n                _this.renderOverlay(overlayCondition);\n                break;\n              }\n            }\n          }\n        }\n      }\n      if (!_this.state.overlayOpen && overlayPageEnter && (prevState.level < _this.state.level || !_this.state.updateRanOnce)) {\n        _this.setState({\n          overlayOpenIndex: overlayPageEnter.id,\n          overlayOpen: true\n        });\n      }\n      if (!_this.state.updateRanOnce) {\n        _this.setState({\n          updateRanOnce: true\n        });\n      }\n\n      // This passes info all the way up to the App component so that it can be used in functions\n      // shared between Canvas (Simulation Edit Mode) and CanvasGame (Simulation Play Mode)\n      if (Object.keys(_this.state).filter(function (key) {\n        return _this.state[key] !== prevState[key];\n      }).length) {\n        var userId = JSON.parse(localStorage.getItem(\'userInfo\')) ? JSON.parse(localStorage.getItem(\'userInfo\')).dbid : null;\n        _this.props.setGamePlayProps({\n          refresh: _this.refresh,\n          setState: _this.setState,\n          state: _this.state,\n          refs: _this.refs,\n          userId: userId,\n          getInteractiveProps: _this.getInteractiveProps,\n          getVariableProps: _this.getVariableProps,\n          getPageProps: _this.getPageProps,\n          checkObjConditions: _this.checkObjConditions,\n          formatTextMacros: _this.formatTextMacros,\n          getDragProps: _this.getDragProps,\n          sendInteraction: _this.sendInteraction,\n          dragLayer: function dragLayer() {},\n          onDocClick: function onDocClick(e) {\n            return _this.onDocClick(e);\n          },\n          handleDragEnd: function handleDragEnd(obj, e) {\n            handleCollisions(_this.props, _this.state);\n            if (obj.infolevel) return {};\n            _this.props.socket.emit("interaction", {\n              gamepieceId: obj.id,\n              parameters: CanvasGame_objectSpread(CanvasGame_objectSpread({}, _this.props.gamepieceStatus[obj.id]), {}, {\n                x: e.target.x(),\n                y: e.target.y(),\n                dragging: false\n              })\n            });\n          },\n          onObjectDragMove: function onObjectDragMove(obj, e) {\n            // Bound the drag to the edge of the screen\n            var objRef = _this.refs[obj.id];\n            var stage = _this.stage || objRef.getLayer();\n            _this.stage = stage;\n            handleCollisions(_this.props, _this.state);\n            var layer = _this.state.personalAreaOpen ? "personal" : _this.state.overlayOpen ? "overlay" : "group";\n            var layerGroup = [];\n            if (layer === \'overlay\') {\n              layerGroup = _this.state.pages[_this.state.level - 1].overlays.filter(function (overlay) {\n                return overlay.id === _this.state.overlayOpenIndex;\n              })[0].layers;\n            } else {\n              layerGroup = _this.state.pages[_this.state.level - 1]["".concat(layer, "Layers")];\n            }\n            if (layerGroup.includes(obj.id) && layerGroup[layerGroup.length - 1] !== obj.id) {\n              layerGroup.splice(layerGroup.indexOf(obj.id), 1);\n              layerGroup.push(obj.id);\n              _this.refresh();\n            }\n            // const screenRect = {\n            //   x: (-stage.x() + (!this.state.overlayOpen && !this.state.personalAreaOpen ? 70 : 0)) / stage.scaleX(),\n            //   y: (-stage.y() + (!this.state.overlayOpen && !this.state.personalAreaOpen ? this.topPad : 0)) / stage.scaleY(),\n            //   width: (stage.width() - (objRef.getClientRect().width /\n            //     (obj.id.includes("ellipse") ? 2 : 1))) / stage.scaleX(),\n            //   height: (stage.height() - (objRef.getClientRect().height /\n            //     (obj.id.includes("ellipse") ? 2 : 1))) / stage.scaleY()\n            // };\n            // objRef.y(Math.max(objRef.y(), screenRect.y)); // Top Bound\n            // objRef.y(Math.min(objRef.y(), screenRect.y + screenRect.height)); // Bottom Bound\n            // objRef.x(Math.max(objRef.x(), screenRect.x)); // Left Bound\n            // objRef.x(Math.min(objRef.x(), screenRect.x + screenRect.width)); // Right Bound\n            if (obj) {\n              [].concat((0,toConsumableArray/* default */.Z)(_this.state.images), (0,toConsumableArray/* default */.Z)(_this.state.rectangles), (0,toConsumableArray/* default */.Z)(_this.state.ellipses), (0,toConsumableArray/* default */.Z)(_this.state.triangles), (0,toConsumableArray/* default */.Z)(_this.state.stars), (0,toConsumableArray/* default */.Z)(_this.state.texts)).filter(function (img) {\n                return img.rolelevel === obj.rolelevel && img.level === obj.level && img.overlay === obj.overlay && img.overlayIndex === obj.overlayIndex && img.id !== obj.id && img.anchor;\n              }).forEach(function (_ref3) {\n                var x = _ref3.x,\n                  y = _ref3.y,\n                  width = _ref3.width,\n                  height = _ref3.height,\n                  radiusX = _ref3.radiusX,\n                  radiusY = _ref3.radiusY,\n                  id = _ref3.id,\n                  rolelevel = _ref3.rolelevel;\n                var sX, sY;\n                console.log(obj);\n                if (!layerGroup.includes(id)) {\n                  return;\n                }\n                if (_this.props.gamepieceStatus[id]) {\n                  sX = _this.props.gamepieceStatus[id].x;\n                  sY = _this.props.gamepieceStatus[id].y;\n                }\n                if (!sX || !sY) {\n                  sX = x;\n                  sY = y;\n                }\n                var sW = _this.realWidth({\n                    width: width,\n                    radiusX: radiusX\n                  }),\n                  sH = _this.realHeight({\n                    height: height,\n                    radiusY: radiusY\n                  });\n                var xDist = Math.abs(e.target.x() + _this.originCenter(_this.realWidth(obj) / 2, obj.id) - (sX + _this.originCenter(sW / 2, id)));\n                var yDist = Math.abs(e.target.y() + _this.originCenter(_this.realHeight(obj) / 2, obj.id) - (sY + _this.originCenter(sH / 2, id)));\n                if (xDist < sW / 2 && yDist < sH / 2) {\n                  e.target.x(sX + _this.originCenter(sW / 2, id) - _this.originCenter(_this.realWidth(obj) / 2, obj.id));\n                  e.target.y(sY + _this.originCenter(sH / 2, id) - _this.originCenter(_this.realHeight(obj) / 2, obj.id));\n                }\n              });\n              if (!obj.infolevel) {\n                _this.props.socket.emit("interaction", {\n                  gamepieceId: obj.id,\n                  parameters: {\n                    x: e.target.x(),\n                    y: e.target.y(),\n                    dragging: userId\n                  }\n                });\n              }\n            }\n          }\n        });\n        _this.props.setUserId(userId);\n\n        // Recenter if the canvas has changed\n        // This includes opening/closing personal and overlay areas and changing levels\n        if (_this.state.personalAreaOpen !== prevState.personalAreaOpen || _this.state.overlayOpen !== prevState.overlayOpen || _this.state.level !== prevState.level) {\n          var layer = _this.state.personalAreaOpen ? "personal" : _this.state.overlayOpen ? "overlay" : "group";\n          _this.setState({\n            canvasLoading: true\n          });\n          setTimeout(function () {\n            _this.props.reCenter("play", layer, _this.state.level !== prevState.level ? "resize" : "normal");\n          }, 300);\n        }\n      }\n\n      // Update the custom objects state in the parent component (if custom objs changed)\n      for (var _i2 = 0; _i2 < _this.customObjects.length; _i2++) {\n        if (_this.state[_this.customObjects[_i2]] !== prevState[_this.customObjects[_i2]]) {\n          var customObjs = {};\n          for (var j = 0; j < _this.customObjects.length; j++) {\n            customObjs[_this.customObjects[j]] = _this.state[_this.customObjects[j]];\n          }\n          _this.props.setCustomObjs(customObjs);\n          break;\n        }\n      }\n      if (_this.state.pages[_this.state.level - 1]) {\n        document.querySelector(\':root\').style.setProperty(\'--primary\', _this.state.pages[_this.state.level - 1].primaryColor);\n        _this.props.setPageColor(_this.state.pages[_this.state.level - 1].groupColor);\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handlePlayerInfo", function (_ref4) {\n      var initRole = _ref4.role,\n        name = _ref4.name,\n        dbid = _ref4.dbid;\n      _this.toggleModal();\n      _this.setState({\n        selectrole: false\n      });\n      var role = initRole;\n      if (_this.props.roleSelection === "random") role = -1;else if (_this.props.roleSelection === "randomByLevel") role = -2; //seeded\n      _this.setState({\n        rolelevel: role || \'\'\n      });\n      var id = dbid;\n      var gameid = localStorage.gameid;\n      if (!dbid) id = Math.floor((1 + Math.random()) * 0x1000000).toString(16).substring(1);\n      _this.props.socket.emit("playerUpdate", {\n        role: role,\n        name: name,\n        dbid: _this.props.initialUserId || id,\n        invited: !!_this.props.initialUserId\n      });\n      localStorage.setItem(\'userInfo\', JSON.stringify({\n        gameid: gameid,\n        role: role,\n        name: name,\n        dbid: _this.props.initialUserId || id\n      }));\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getInteractiveProps", function (id) {\n      return {\n        updateStatus: function updateStatus(parameters) {\n          _this.props.socket.emit("interaction", {\n            gamepieceId: id,\n            parameters: parameters\n          });\n        },\n        status: _this.props.gamepieceStatus[id] || {}\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getVariableProps", function () {\n      return {\n        updateVariable: function updateVariable(name, value, increment) {\n          _this.props.socket.emit("varChange", {\n            name: name,\n            value: value,\n            increment: increment\n          });\n        },\n        variables: _this.props.globalVars,\n        interactions: _this.props.globalInts,\n        conditions: _this.props.globalCons\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "getPageProps", function () {\n      return {\n        handleButtonPage: function handleButtonPage(e) {\n          _this.props.socket.emit("goToPage", {\n            level: e\n          });\n        }\n      };\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleVariable", function (name, value) {\n      if (_this.props.globalVars[name] !== value) {\n        _this.props.socket.emit("varChange", {\n          name: name,\n          value: value\n        });\n      }\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleLevel", function (e) {\n      _this.props.socket.emit("goToPage", {\n        level: e\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleEnd", function (e) {\n      _this.setState({\n        end: true\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "handleRestart", function () {\n      _this.props.socket.emit("goToPage", {\n        level: 1\n      });\n      _this.setState({\n        end: false\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "toggleModal", function () {\n      _this.setState({\n        startModalOpen: !_this.state.startModalOpen\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "setOverlayOpen", function (val, index) {\n      _this.setState({\n        overlayOpen: val,\n        overlayOpenIndex: index\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "onDocClick", function (e) {\n      var src = e.docsrc;\n      fetch(src, {\n        method: \'GET\',\n        headers: {\n          \'Content-Type\': \'application/pdf\'\n        }\n      }).then(function (response) {\n        return response.blob();\n      }).then(function (blob) {\n        // Create a blob link to download\n        var url = window.URL.createObjectURL(new Blob([blob]));\n        var link = document.createElement(\'a\');\n        link.href = url;\n        link.setAttribute(\'download\', \'file.pdf\');\n\n        // Append to html link element page\n        document.body.appendChild(link);\n\n        // Start download\n        link.click();\n\n        // Clean up and remove the link\n        link.parentNode.removeChild(link);\n      });\n    });\n    (0,defineProperty/* default */.Z)((0,assertThisInitialized/* default */.Z)(_this), "contextMenuEventShortcuts", function (event) {\n      var x = 88,\n        deleteKey = 46,\n        copy = 67,\n        paste = 86,\n        z = 90,\n        y = 89,\n        r = 82;\n      if (event.shiftKey && event.keyCode === r) {\n        _this.props.reCenter("play");\n      } else if (event.altKey && event.keyCode === r) {\n        // Print Info (FOR DEBUGGING)\n        console.log("Refs:");\n        console.log(CanvasGame_objectSpread({}, _this.refs));\n        console.log("State:");\n        console.log(CanvasGame_objectSpread({}, _this.state));\n      }\n    });\n    _this.setState = _this.setState.bind((0,assertThisInitialized/* default */.Z)(_this));\n    _this.forceUpdate = _this.forceUpdate.bind((0,assertThisInitialized/* default */.Z)(_this));\n    var objectState = {};\n    for (var i = 0; i < _this.props.savedObjects.length; i++) {\n      objectState = CanvasGame_objectSpread(CanvasGame_objectSpread({}, objectState), {}, (0,defineProperty/* default */.Z)({}, _this.props.savedObjects[i], []));\n    }\n    localStorage.setItem("localVars", JSON.stringify(_this.props.localVars));\n    localStorage.setItem("localCons", JSON.stringify(_this.props.localCons));\n    localStorage.setItem("localInts", JSON.stringify(_this.props.localInts));\n    localStorage.setItem("localTrigs", JSON.stringify(_this.props.localTrigs));\n    console.log(props);\n    _this.state = CanvasGame_objectSpread(CanvasGame_objectSpread({}, objectState), {}, {\n      // Layer Position and Scales\n      groupLayerScale: 1,\n      groupLayerX: 0,\n      groupLayerY: 0,\n      personalLayerScale: 1,\n      personalLayerX: 0,\n      personalLayerY: 0,\n      overlayLayerScale: 1,\n      overlayLayerX: 0,\n      overlayLayerY: 0,\n      startModalOpen: true,\n      personalAreaOpen: 0,\n      // 0 is closed, 1 is open\n      overlayOpen: false,\n      overlayOpenIndex: -1,\n      nextLevelOnOverlayClose: false,\n      level: 1,\n      nextLevel: 2,\n      pageNumber: 6,\n      pages: [],\n      end: false,\n      rolelevel: \'Role\',\n      gameroles: [],\n      state: false,\n      selectrole: false,\n      gameinstanceid: _this.props.gameinstanceid,\n      adminid: _this.props.adminid,\n      canvasLoading: true,\n      updateRanOnce: false\n    });\n    _this.dragTick = 0;\n    _this.topPad = 0; // to be set in componentDidMount or elsewhere outside the drag callback\n    _this.stage = null; // to be set when stage is available\n    _this.shapeHashTable = {}; // precomputed hash table\n\n    setTimeout(function () {\n      _this.setState({\n        canvasLoading: true\n      }, function () {\n        _this.props.setCanvasLoading(_this.state.canvasLoading);\n        _this.props.reCenter("play");\n      });\n    }, 0);\n    return _this;\n  }\n  (0,createClass/* default */.Z)(Graphics, [{\n    key: "componentDidMount",\n    value: function componentDidMount() {\n      var _this2 = this;\n      if (this.props.gamepieceStatus.running) {\n        this.setState({\n          selectrole: false\n        });\n      } else {\n        this.setState({\n          selectrole: true\n        });\n      }\n      this.setState({\n        nextLevel: this.state.level + 1\n      });\n      try {\n        var objects = JSON.parse(this.props.gameinstance.game_parameters);\n        this.setState({\n          pageNumber: objects.numberOfPages\n        });\n        this.savedObjects.forEach(function (object) {\n          _this2.setState((0,defineProperty/* default */.Z)({}, object, objects[object] || []));\n        });\n      } catch (e) {\n        console.log(e);\n      }\n      ;\n      if (localStorage.userInfo) {\n        if (JSON.parse(localStorage.userInfo).gameid == localStorage.gameid) {\n          var info = JSON.parse(localStorage.userInfo);\n          if (this.props.alert) this.props.alert(this.props.t("alert.loggedInAsX", {\n            name: info.name\n          }), "info");\n          this.handlePlayerInfo(info);\n        }\n      }\n\n      // Reposition / scale objects on screen resize\n      var resizeTimeout;\n      window.onresize = function () {\n        clearTimeout(resizeTimeout);\n        var layer = _this2.state.overlayOpen ? "overlay" : _this2.state.personalAreaOpen ? "personal" : "group";\n        resizeTimeout = setTimeout(function () {\n          _this2.props.reCenter("play", layer, "resize");\n        }, 100);\n      };\n\n      // Check if shape is draggable, move to top of page layers\n    }\n  }, {\n    key: "render",\n    value: function render() {\n      var _this3 = this,\n        _this$state$pages,\n        _this$state$pages2,\n        _this$state$pages2$pe,\n        _this$state$pages3,\n        _this$state$pages3$pe,\n        _this$state$pages4,\n        _this$state$pages4$pe,\n        _this$state$pages5,\n        _this$state$pages5$pe;\n      return /*#__PURE__*/react.createElement(react.Fragment, null, this.state.selectrole && /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement((lib_default()), {\n        isOpen: this.state.selectrole,\n        contentLabel: "My dialog",\n        className: "createmodaltab",\n        overlayClassName: "myoverlaytab",\n        closeTimeoutMS: 250,\n        ariaHideApp: false\n      }, /*#__PURE__*/react.createElement(CreateRoleSelection_CreateRole, {\n        gameid: this.state.gameinstanceid,\n        handleSubmit: this.handlePlayerInfo,\n        gameroles: this.state.gameroles,\n        players: this.props.players,\n        initialUserInfo: this.props.initialUserInfo,\n        roleSelection: this.props.roleSelection,\n        roles: this.props.roles\n      }))), /*#__PURE__*/react.createElement(CanvasGameUtils, (0,esm_extends/* default */.Z)({}, this.props, this)), this.getPage(this.state.level - 1).overlays && /*#__PURE__*/react.createElement("div", {\n        className: "overlay-button-container play"\n      }, this.getPage(this.state.level - 1).overlays.map(function (overlay, i) {\n        if (!overlay.hideBtn) {\n          var nonHiddenI = 0;\n          for (var j = 0; j < i; j++) {\n            var o = _this3.getPage(_this3.state.level - 1).overlays[j];\n            if (!o.hideBtn) {\n              nonHiddenI++;\n            }\n          }\n          return /*#__PURE__*/react.createElement("div", {\n            key: i,\n            className: "overlayButton",\n            onClick: function onClick() {\n              if (_this3.state.personalAreaOpen) return;\n              _this3.setOverlayOpen(true, overlay.id);\n            },\n            style: {\n              top: window.matchMedia("(orientation: portrait)").matches ? 100 : "".concat(70 * (nonHiddenI + 1), "px")\n            }\n          }, _this3.state.pages[_this3.state.level - 1].overlays.map(function (image, i) {\n            if (image.id === overlay.id && image.image) {\n              return /*#__PURE__*/react.createElement(cloudinary_react_esm/* Image */.Ee, {\n                key: i,\n                className: "overlayIcons",\n                cloudName: "uottawaedusim",\n                publicId: "https://res.cloudinary.com/uottawaedusim/image/upload/" + image.image\n              });\n            } else if (overlay.id === image.id) {\n              return /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(icons_layers/* default */.Z, {\n                className: "icon overlay-icon"\n              }));\n            }\n          }));\n        } else {\n          return;\n        }\n      })), this.state.overlayOpen && /*#__PURE__*/react.createElement(Overlay/* default */.Z, {\n        playMode: true,\n        closeOverlay: function closeOverlay() {\n          _this3.setState({\n            overlayOpen: false,\n            nextLevelOnOverlayClose: false,\n            overlayOpenIndex: -1\n          });\n          if (_this3.state.nextLevelOnOverlayClose) {\n            _this3.handleLevel(_this3.state.level + 1);\n          }\n        },\n        handleLevel: this.handleLevel,\n        overlayIndex: this.state.overlayOpenIndex,\n        state: this.state,\n        propsIn: this.props,\n        setRefs: function setRefs(type, ref) {\n          _this3.refs[type] = ref;\n        }\n      }), /*#__PURE__*/react.createElement("div", {\n        tabIndex: "0",\n        onKeyDown: this.contextMenuEventShortcuts,\n        id: "groupGameContainer",\n        className: "playModeCanvasContainer"\n      }, /*#__PURE__*/react.createElement("div", {\n        className: "stageContainer"\n      }, /*#__PURE__*/react.createElement(ReactKonva/* Stage */.Hf, {\n        height: this.state.pages[this.state.level - 1] ? this.state.pages[this.state.level - 1].groupPositionRect.h * this.state.pages[this.state.level - 1].groupPositionRect.scaleY * this.state.groupLayerScale : window.innerHeight - 50,\n        width: this.state.pages[this.state.level - 1] ? this.state.pages[this.state.level - 1].groupPositionRect.w * this.state.pages[this.state.level - 1].groupPositionRect.scaleX * this.state.groupLayerScale : window.innerWidth,\n        offsetX: this.state.groupCenterX,\n        offsetY: this.state.groupCenterY,\n        ref: "graphicStage"\n      }, !this.state.personalAreaOpen && !this.state.overlayOpen ? this.props.loadObjects("group", "play") : null))), /*#__PURE__*/react.createElement("div", {\n        className: "eheader"\n      }, /*#__PURE__*/react.createElement(Level/* default */.Z, {\n        handlePageCloseOverlay: function handlePageCloseOverlay(index) {\n          _this3.setState({\n            overlayOpen: false,\n            nextLevelOnOverlayClose: false,\n            overlayOpenIndex: -1\n          });\n        },\n        handlePageOpenOverlay: function handlePageOpenOverlay(index) {\n          _this3.setState({\n            overlayOpen: true,\n            overlayOpenIndex: index\n          });\n        },\n        socket: this.props.socket,\n        overlay: this.state.overlayOpen,\n        variables: this.props.globalVars,\n        alerts: this.props.alerts,\n        cons: this.props.globalCons,\n        ints: this.props,\n        page: this.getPage(this.state.level - 1),\n        number: this.state.pageNumber,\n        ptype: this.state.ptype,\n        level: this.handleLevel,\n        handleLevel: this.props.handleLevel,\n        realLevel: this.props.realLevel,\n        gamepage: true,\n        updateVariable: this.handleVariable,\n        levelVal: this.state.level,\n        end: this.handleEnd,\n        freeAdvance: this.props.freeAdvance,\n        disableNext: this.props.disableNext,\n        countdown: this.props.countdown\n      }), /*#__PURE__*/react.createElement("div", null, /*#__PURE__*/react.createElement("div", {\n        id: "personalInfoContainer",\n        className: "info" + this.state.personalAreaOpen + " personalAreaAnimOn",\n        style: {\n          backgroundColor: this.state.personalAreaOpen ? (_this$state$pages = this.state.pages[this.state.level - 1]) === null || _this$state$pages === void 0 ? void 0 : _this$state$pages.personalColor : "transparent"\n        }\n      }, /*#__PURE__*/react.createElement("div", {\n        id: "playModeRoleLabel"\n      }, this.state.rolelevel), /*#__PURE__*/react.createElement("div", {\n        id: "personalGameContainer",\n        className: "personalAreaStageContainer playModeCanvasContainer",\n        style: {\n          backgroundImage: \'none\'\n        }\n      }, /*#__PURE__*/react.createElement(ReactKonva/* Stage */.Hf, {\n        height: this.state.pages[this.state.level - 1] ? ((_this$state$pages2 = this.state.pages[this.state.level - 1]) === null || _this$state$pages2 === void 0 ? void 0 : (_this$state$pages2$pe = _this$state$pages2.personalPositionRect[this.state.rolelevel]) === null || _this$state$pages2$pe === void 0 ? void 0 : _this$state$pages2$pe.h) * ((_this$state$pages3 = this.state.pages[this.state.level - 1]) === null || _this$state$pages3 === void 0 ? void 0 : (_this$state$pages3$pe = _this$state$pages3.personalPositionRect[this.state.rolelevel]) === null || _this$state$pages3$pe === void 0 ? void 0 : _this$state$pages3$pe.scaleY) * this.state.personalLayerScale : window.innerHeight - 50,\n        width: this.state.pages[this.state.level - 1] ? ((_this$state$pages4 = this.state.pages[this.state.level - 1]) === null || _this$state$pages4 === void 0 ? void 0 : (_this$state$pages4$pe = _this$state$pages4.personalPositionRect[this.state.rolelevel]) === null || _this$state$pages4$pe === void 0 ? void 0 : _this$state$pages4$pe.w) * ((_this$state$pages5 = this.state.pages[this.state.level - 1]) === null || _this$state$pages5 === void 0 ? void 0 : (_this$state$pages5$pe = _this$state$pages5.personalPositionRect[this.state.rolelevel]) === null || _this$state$pages5$pe === void 0 ? void 0 : _this$state$pages5$pe.scaleX) * this.state.personalLayerScale : window.innerWidth,\n        offsetX: this.state.personalCenterX,\n        offsetY: this.state.personalCenterY,\n        ref: "personalAreaStage"\n      }, this.state.personalAreaOpen && !this.state.overlayOpen ? this.props.loadObjects("personal", "play") : null)), this.state.personalAreaOpen !== 1 ? /*#__PURE__*/react.createElement("button", {\n        className: "personalAreaToggle",\n        onClick: function onClick() {\n          return _this3.setState({\n            personalAreaOpen: 1\n          });\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_up/* default */.Z, {\n        className: "icon chevrons"\n      }))) : /*#__PURE__*/react.createElement("button", {\n        className: "personalAreaToggle",\n        onClick: function onClick() {\n          return _this3.setState({\n            personalAreaOpen: 0\n          });\n        }\n      }, /*#__PURE__*/react.createElement("i", null, /*#__PURE__*/react.createElement(chevron_down/* default */.Z, {\n        className: "icon chevrons"\n      })))))), /*#__PURE__*/react.createElement(EndScreen, {\n        open: this.state.end || this.props.isEnd\n      }, /*#__PURE__*/react.createElement("p", null, this.props.t("game.thanksForJoining")), this.props.freeAdvance && /*#__PURE__*/react.createElement("button", {\n        onClick: function onClick() {\n          return _this3.handleRestart();\n        }\n      }, this.props.t("game.resetSimulation"))));\n    }\n  }]);\n  return Graphics;\n}(react.Component);\n/* harmony default export */ var CanvasGame = ((0,withTranslation/* withTranslation */.Z)()(Graphics));\n// EXTERNAL MODULE: ./node_modules/react-router/esm/react-router.js\nvar react_router = __webpack_require__(16550);\n// EXTERNAL MODULE: ./node_modules/axios/index.js\nvar axios = __webpack_require__(9669);\nvar axios_default = /*#__PURE__*/__webpack_require__.n(axios);\n// EXTERNAL MODULE: ./node_modules/socket.io-client/build/esm/index.js + 28 modules\nvar esm = __webpack_require__(63992);\n// EXTERNAL MODULE: ./src/components/SideBar/Sidebar.jsx + 23 modules\nvar Sidebar = __webpack_require__(30450);\n// EXTERNAL MODULE: ./src/components/AutoUpdate/index.jsx\nvar AutoUpdate = __webpack_require__(54132);\n// EXTERNAL MODULE: ./src/components/Loading/Loading.jsx + 1 modules\nvar Loading = __webpack_require__(42861);\n// EXTERNAL MODULE: ./src/components/Stage/Info.css\nvar Info = __webpack_require__(99187);\n// EXTERNAL MODULE: ./src/components/Tabs/Tabs.css\nvar Tabs = __webpack_require__(45757);\n// EXTERNAL MODULE: ./src/components/Stage/Stage.css\nvar Stage = __webpack_require__(3654);\n;// CONCATENATED MODULE: ./src/views/GamePage.jsx\n\n\n\n\n\n\nvar _excluded = ["players", "chatlog", "notelog"],\n  _excluded2 = ["id"];\nvar GamePage_templateObject, GamePage_templateObject2;\n\nfunction GamePage_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction GamePage_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? GamePage_ownKeys(Object(source), !0).forEach(function (key) { (0,defineProperty/* default */.Z)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : GamePage_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Main = styled_components_browser_esm/* default */.ZP.main(GamePage_templateObject || (GamePage_templateObject = (0,taggedTemplateLiteral/* default */.Z)(["\\n  grid-area: main;\\n  background-color: ", ";\\n  @media screen and (orientation: portrait) {\\n    padding-left: 0px;\\n  }\\n"])), function (p) {\n  return p.color;\n});\nvar PauseCover = styled_components_browser_esm/* default */.ZP.div(GamePage_templateObject2 || (GamePage_templateObject2 = (0,taggedTemplateLiteral/* default */.Z)(["\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  background: rgba(0,0,0,0.7);\\n  width: 100vw;\\n  height: 100vh;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: white;\\n  font-size: 2em;\\n  z-index: 900;\\n  & > i {\\n    font-size: 3em;\\n  }\\n"])));\nvar Game = function Game(props) {\n  var _room$gameinstance2, _room$gameinstance3, _roomStatus$settings2, _roomStatus$settings3, _roomStatus$settings4, _roomStatus$settings5;\n  var roomurl = (0,react_router.useLocation)().pathname.split("/")[2];\n  var _useState = (0,react.useState)(null),\n    _useState2 = (0,slicedToArray/* default */.Z)(_useState, 2),\n    room = _useState2[0],\n    setRoomInfo = _useState2[1];\n  var _useState3 = (0,react.useState)(null),\n    _useState4 = (0,slicedToArray/* default */.Z)(_useState3, 2),\n    socket = _useState4[0],\n    setSocketInfo = _useState4[1];\n  var _useState5 = (0,react.useState)({}),\n    _useState6 = (0,slicedToArray/* default */.Z)(_useState5, 2),\n    roomStatus = _useState6[0],\n    setRoomStatus = _useState6[1];\n  var _useState7 = (0,react.useState)(false),\n    _useState8 = (0,slicedToArray/* default */.Z)(_useState7, 2),\n    showNav = _useState8[0],\n    setShowNav = _useState8[1];\n  var _useState9 = (0,react.useState)({}),\n    _useState10 = (0,slicedToArray/* default */.Z)(_useState9, 2),\n    players = _useState10[0],\n    setPlayers = _useState10[1];\n  var _useState11 = (0,react.useState)([]),\n    _useState12 = (0,slicedToArray/* default */.Z)(_useState11, 2),\n    messageBacklog = _useState12[0],\n    setMessageBacklog = _useState12[1];\n  var _useState13 = (0,react.useState)(false),\n    _useState14 = (0,slicedToArray/* default */.Z)(_useState13, 2),\n    isEnd = _useState14[0],\n    setIsEnd = _useState14[1];\n  var _useState15 = (0,react.useState)(true),\n    _useState16 = (0,slicedToArray/* default */.Z)(_useState15, 2),\n    isLoading = _useState16[0],\n    setLoading = _useState16[1];\n  var _useState17 = (0,react.useState)(true),\n    _useState18 = (0,slicedToArray/* default */.Z)(_useState17, 2),\n    isL = _useState18[0],\n    setL = _useState18[1];\n  var _useState19 = (0,react.useState)(),\n    _useState20 = (0,slicedToArray/* default */.Z)(_useState19, 2),\n    customObjs = _useState20[0],\n    setCustomObjs = _useState20[1];\n  var _useState21 = (0,react.useState)(1),\n    _useState22 = (0,slicedToArray/* default */.Z)(_useState21, 2),\n    level = _useState22[0],\n    setLevel = _useState22[1];\n  var _useState23 = (0,react.useState)([]),\n    _useState24 = (0,slicedToArray/* default */.Z)(_useState23, 2),\n    roles = _useState24[0],\n    setRoles = _useState24[1];\n  var alertContext = (0,AlertContext/* useAlertContext */.oX)();\n  var _useState25 = (0,react.useState)(false),\n    _useState26 = (0,slicedToArray/* default */.Z)(_useState25, 2),\n    selectrole = _useState26[0],\n    setSelectrole = _useState26[1];\n  var _useState27 = (0,react.useState)(),\n    _useState28 = (0,slicedToArray/* default */.Z)(_useState27, 2),\n    notes = _useState28[0],\n    setNotes = _useState28[1];\n  var _useState29 = (0,react.useState)(),\n    _useState30 = (0,slicedToArray/* default */.Z)(_useState29, 2),\n    userId = _useState30[0],\n    setUserId = _useState30[1];\n  var _useState31 = (0,react.useState)("#FFF"),\n    _useState32 = (0,slicedToArray/* default */.Z)(_useState31, 2),\n    pageColor = _useState32[0],\n    setPageColor = _useState32[1];\n  var _useState33 = (0,react.useState)(false),\n    _useState34 = (0,slicedToArray/* default */.Z)(_useState33, 2),\n    canvasLoading = _useState34[0],\n    setCanvasLoading = _useState34[1];\n  var _useState35 = (0,react.useState)(0),\n    _useState36 = (0,slicedToArray/* default */.Z)(_useState35, 2),\n    invalidateSidebar = _useState36[0],\n    setInvalidateSidebar = _useState36[1];\n  var _useState37 = (0,react.useState)(false),\n    _useState38 = (0,slicedToArray/* default */.Z)(_useState37, 2),\n    disableNext = _useState38[0],\n    setDisableNext = _useState38[1];\n  var _useState39 = (0,react.useState)({}),\n    _useState40 = (0,slicedToArray/* default */.Z)(_useState39, 2),\n    playerLevels = _useState40[0],\n    setPlayerLevels = _useState40[1];\n  var _useTranslation = (0,useTranslation/* useTranslation */.$)(),\n    t = _useTranslation.t;\n\n  //set states for globalVars, globalInts, globalCons, globalTrigs, localVars, localInts, localCons, localTrigs\n  var _useState41 = (0,react.useState)([]),\n    _useState42 = (0,slicedToArray/* default */.Z)(_useState41, 2),\n    globalVars = _useState42[0],\n    setGlobalVars = _useState42[1];\n  var _useState43 = (0,react.useState)([]),\n    _useState44 = (0,slicedToArray/* default */.Z)(_useState43, 2),\n    globalInts = _useState44[0],\n    setGlobalInts = _useState44[1];\n  var _useState45 = (0,react.useState)([]),\n    _useState46 = (0,slicedToArray/* default */.Z)(_useState45, 2),\n    globalCons = _useState46[0],\n    setGlobalCons = _useState46[1];\n  var _useState47 = (0,react.useState)([]),\n    _useState48 = (0,slicedToArray/* default */.Z)(_useState47, 2),\n    globalTrigs = _useState48[0],\n    setGlobalTrigs = _useState48[1];\n  var _useState49 = (0,react.useState)([]),\n    _useState50 = (0,slicedToArray/* default */.Z)(_useState49, 2),\n    tasks = _useState50[0],\n    setTasks = _useState50[1];\n  var _useState51 = (0,react.useState)([]),\n    _useState52 = (0,slicedToArray/* default */.Z)(_useState51, 2),\n    localVars = _useState52[0],\n    setLocalVars = _useState52[1];\n  var _useState53 = (0,react.useState)([]),\n    _useState54 = (0,slicedToArray/* default */.Z)(_useState53, 2),\n    localInts = _useState54[0],\n    setLocalInts = _useState54[1];\n  var _useState55 = (0,react.useState)([]),\n    _useState56 = (0,slicedToArray/* default */.Z)(_useState55, 2),\n    localCons = _useState56[0],\n    setLocalCons = _useState56[1];\n  var _useState57 = (0,react.useState)([]),\n    _useState58 = (0,slicedToArray/* default */.Z)(_useState57, 2),\n    localTrigs = _useState58[0],\n    setLocalTrigs = _useState58[1];\n  var toggle = function toggle() {\n    return setShowNav(!showNav);\n  };\n  var userid = new URLSearchParams((0,react_router.useLocation)().search).get("user");\n  var _useState59 = (0,react.useState)({}),\n    _useState60 = (0,slicedToArray/* default */.Z)(_useState59, 2),\n    queryUser = _useState60[0],\n    setQueryUser = _useState60[1];\n  (0,react.useEffect)(function () {\n    document.title = \'eduSIM - Playing\';\n    // Clean up the title when the component unmounts\n    return function () {\n      document.title = \'eduSIM\';\n    };\n  }, [room]);\n  (0,react.useEffect)(function () {\n    (0,asyncToGenerator/* default */.Z)( /*#__PURE__*/regenerator_default().mark(function _callee() {\n      var _yield$axios$get, roomData, gameData, client;\n      return regenerator_default().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            if (roomurl) {\n              _context.next = 2;\n              break;\n            }\n            return _context.abrupt("return");\n          case 2:\n            _context.next = 4;\n            return axios_default().get({"REACT_APP_API_ORIGIN":"http://206.12.91.254:8080","REACT_APP_AUTH0_DOMAIN":"dev-3-81kkgt.us.auth0.com","REACT_APP_AUTH0_CLIENT_ID":"DjTX4pPeCfDPKGNcG8AwMEcJjkTZyYp3","REACT_APP_GRAFANAAUTH_KEY":"eyJrIjoiT1BMTmdaNnh3ejl6Um8xMHgzakhnYzNWYUlzVXR1a20iLCJuIjoiRGVtbyIsImlkIjoxfQ==","REACT_APP_GOOGLEAPI_KEY":"AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU"}.REACT_APP_API_ORIGIN + \'/api/playerrecords/getRoomByURL\', {\n              params: {\n                url: roomurl\n              }\n            });\n          case 4:\n            _yield$axios$get = _context.sent;\n            roomData = _yield$axios$get.data;\n            gameData = roomData;\n            console.log(gameData);\n            setRoomInfo(roomData);\n            if (userid) {\n              axios_default().get({"REACT_APP_API_ORIGIN":"http://206.12.91.254:8080","REACT_APP_AUTH0_DOMAIN":"dev-3-81kkgt.us.auth0.com","REACT_APP_AUTH0_CLIENT_ID":"DjTX4pPeCfDPKGNcG8AwMEcJjkTZyYp3","REACT_APP_GRAFANAAUTH_KEY":"eyJrIjoiT1BMTmdaNnh3ejl6Um8xMHgzakhnYzNWYUlzVXR1a20iLCJuIjoiRGVtbyIsImlkIjoxfQ==","REACT_APP_GOOGLEAPI_KEY":"AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU"}.REACT_APP_API_ORIGIN + \'/api/playerrecords/getPlayer\', {\n                params: {\n                  id: userid\n                }\n              }).then(function (res) {\n                setQueryUser(res.data);\n              });\n            }\n            _context.next = 12;\n            return (0,esm.io)({"REACT_APP_API_ORIGIN":"http://206.12.91.254:8080","REACT_APP_AUTH0_DOMAIN":"dev-3-81kkgt.us.auth0.com","REACT_APP_AUTH0_CLIENT_ID":"DjTX4pPeCfDPKGNcG8AwMEcJjkTZyYp3","REACT_APP_GRAFANAAUTH_KEY":"eyJrIjoiT1BMTmdaNnh3ejl6Um8xMHgzakhnYzNWYUlzVXR1a20iLCJuIjoiRGVtbyIsImlkIjoxfQ==","REACT_APP_GOOGLEAPI_KEY":"AIzaSyCvq0AcfmcAeJeJ7-IZwi0JGjeTYBhWghU"}.REACT_APP_API_ORIGIN, {\n              query: {\n                room: roomurl\n              }\n            });\n          case 12:\n            client = _context.sent;\n            client.on("connectStatus", function (_ref2) {\n              var _gameData$gameinstanc, _gameData$gameinstanc2, _gameData$gameinstanc3, _gameData$gameinstanc4, _gameData$gameinstanc5, _gameData$gameinstanc6, _gameData$gameinstanc7, _gameData$gameinstanc8, _gameData$gameinstanc9, _gameData$gameinstanc10;\n              var players = _ref2.players,\n                chatlog = _ref2.chatlog,\n                notelog = _ref2.notelog,\n                status = (0,objectWithoutProperties/* default */.Z)(_ref2, _excluded);\n              setPlayers(players);\n              setRoomStatus(status || {});\n              setMessageBacklog(chatlog);\n              setNotes(notelog);\n              setTasks((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc = gameData.gameinstance) === null || _gameData$gameinstanc === void 0 ? void 0 : _gameData$gameinstanc.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).tasks || []);\n              setGlobalCons((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc2 = gameData.gameinstance) === null || _gameData$gameinstanc2 === void 0 ? void 0 : _gameData$gameinstanc2.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).globalCons);\n              setGlobalVars(flattenObject((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc3 = gameData.gameinstance) === null || _gameData$gameinstanc3 === void 0 ? void 0 : _gameData$gameinstanc3.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).globalVars));\n              setGlobalInts((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc4 = gameData.gameinstance) === null || _gameData$gameinstanc4 === void 0 ? void 0 : _gameData$gameinstanc4.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).globalInts);\n              setGlobalTrigs((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc5 = gameData.gameinstance) === null || _gameData$gameinstanc5 === void 0 ? void 0 : _gameData$gameinstanc5.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).globalTrigs);\n              setLocalCons((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc6 = gameData.gameinstance) === null || _gameData$gameinstanc6 === void 0 ? void 0 : _gameData$gameinstanc6.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).localCons);\n              setLocalVars((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc7 = gameData.gameinstance) === null || _gameData$gameinstanc7 === void 0 ? void 0 : _gameData$gameinstanc7.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).localVars);\n              setLocalInts((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc8 = gameData.gameinstance) === null || _gameData$gameinstanc8 === void 0 ? void 0 : _gameData$gameinstanc8.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).localInts);\n              setLocalTrigs((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc9 = gameData.gameinstance) === null || _gameData$gameinstanc9 === void 0 ? void 0 : _gameData$gameinstanc9.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).localTrigs);\n              setRoles((gameData === null || gameData === void 0 ? void 0 : (_gameData$gameinstanc10 = gameData.gameinstance) === null || _gameData$gameinstanc10 === void 0 ? void 0 : _gameData$gameinstanc10.game_parameters) && JSON.parse(gameData.gameinstance.game_parameters).roles);\n              setSelectrole(true);\n            });\n            client.on("roomStatusUpdate", function (_ref3) {\n              var status = _ref3.status,\n                refresh = _ref3.refresh,\n                lastSetVar = _ref3.lastSetVar;\n              if (refresh) {\n                localStorage.removeItem("userInfo");\n                window.location.reload();\n              }\n              if (lastSetVar) {\n                sessionStorage.setItem(\'lastSetVar\', lastSetVar);\n              }\n              if (status.level) setLevel(status.level);\n              setRoomStatus(status);\n            });\n            client.on("clientJoined", function (_ref4) {\n              var id = _ref4.id,\n                player = (0,objectWithoutProperties/* default */.Z)(_ref4, _excluded2);\n              setPlayers(function (l) {\n                return GamePage_objectSpread(GamePage_objectSpread({}, l), {}, (0,defineProperty/* default */.Z)({}, id, player));\n              });\n            });\n            client.on("clientLeft", function (id) {\n              setPlayers(function (l) {\n                var n = GamePage_objectSpread({}, l);\n                delete n[id];\n                return n;\n              });\n            });\n            client.on("errorLog", function (_ref5) {\n              var key = _ref5.key,\n                _ref5$params = _ref5.params,\n                params = _ref5$params === void 0 ? {} : _ref5$params;\n            } // alertContext.showAlert(t(key, params), "error");\n            );\n\n            client.on("userLevelUpdate", function (data) {\n              setLevel(data.level);\n            });\n            setSocketInfo(client);\n            setLoading(false);\n            return _context.abrupt("return", function () {\n              return client.disconnect();\n            });\n          case 22:\n          case "end":\n            return _context.stop();\n        }\n      }, _callee);\n    }))();\n  }, [roomurl]);\n  var timeFromNow = function timeFromNow() {\n    return roomStatus.running ? moment_default()(moment_default()()).diff(roomStatus.startTime - (roomStatus.timeElapsed || 0)) : roomStatus.timeElapsed || 0;\n  };\n  var countdown = function countdown() {\n    var _roomStatus$settings;\n    var count = (((_roomStatus$settings = roomStatus.settings) === null || _roomStatus$settings === void 0 ? void 0 : _roomStatus$settings.advanceMode) || 1) * 60000;\n    return count - timeFromNow() - Math.floor((count - timeFromNow()) / count) * count;\n  };\n  (0,react.useEffect)(function () {\n    var _room$gameinstance;\n    if (room !== null && room !== void 0 && (_room$gameinstance = room.gameinstance) !== null && _room$gameinstance !== void 0 && _room$gameinstance.game_parameters && JSON.parse(room.gameinstance.game_parameters).pages.length < roomStatus.level) {\n      setIsEnd(true);\n    }\n  }, []);\n\n  // Parse seeded roles\n  var parsedPlayers = (0,react.useMemo)(function () {\n    var newPlayers = {};\n    for (var id in players) {\n      var p = GamePage_objectSpread({}, players[id]);\n      newPlayers[id] = p;\n      if (roles && roles.length > 0) {\n        if (p.role === -1) {\n          newPlayers[id].role = roles[parseInt(p.dbid, 16) % roles.length].roleName;\n        } else if (p.role === -2) {\n          newPlayers[id].role = roles[(Math.pow(level, level) + parseInt(p.dbid, 16)) % roles.length].roleName;\n        }\n      }\n    }\n    return newPlayers;\n  }, [players, roles, level]);\n  var flattenObject = function flattenObject(obj) {\n    var flattened = {};\n    Object.keys(obj).forEach(function (key) {\n      var value = obj[key];\n      if ((0,esm_typeof/* default */.Z)(value) === \'object\' && value !== null && !Array.isArray(value)) {\n        Object.assign(flattened, flattenObject(value));\n      } else {\n        flattened[key] = value;\n      }\n    });\n    return flattened;\n  };\n  var handleLevel = function handleLevel(x, type) {\n    if (type === \'game\') setLevel(x);else {\n      socket.emit("goToPage", {\n        level: x\n      });\n    }\n  };\n  var handleSetNotes = function handleSetNotes(data) {\n    setNotes(data);\n  };\n  var handleEditNotes = function handleEditNotes(data) {\n    setNotes(data);\n  };\n  var handleDelNotes = function handleDelNotes(data) {\n    setNotes(data);\n  };\n  var handleDisable = function handleDisable(e) {\n    setDisableNext(e);\n  };\n  (0,react.useEffect)(function () {\n    var x, y, s, t;\n    Object.keys(globalVars).forEach(function (key) {\n      s = globalVars[key];\n      if (typeof s === \'string\' && s.includes(\'Random\')) {\n        for (var i = 0; i < s.length; i++) {\n          if (s[i] == \'(\') x = i;\n          if (s[i] == \')\') y = i;\n        }\n        s = s.substring(x + 1, y).split(\',\');\n        t = s[2].replace(\'.\', \'\').split(\'\').reverse().join(\'\');\n        globalVars[key] = Math.round((Math.random() * (s[1] - s[0]) + s[0]) * t) / t;\n      }\n    });\n    setL(false);\n  }, [globalVars]);\n  (0,react.useEffect)(function () {\n    var vars = GamePage_objectSpread(GamePage_objectSpread({}, globalVars), roomStatus.variables);\n    setGlobalVars(vars);\n  }, [roomStatus.variables]);\n  return !isLoading && !isL ? /*#__PURE__*/react.createElement("div", {\n    className: "editpage"\n  }, /*#__PURE__*/react.createElement(Sidebar/* default */.Z, {\n    userId: userId,\n    customObjs: customObjs,\n    gamepieceStatus: roomStatus || {},\n    className: "grid-sidebar game",\n    visible: showNav,\n    close: toggle,\n    socket: socket,\n    img: ((_room$gameinstance2 = room.gameinstance) === null || _room$gameinstance2 === void 0 ? void 0 : _room$gameinstance2.gameinstance_photo_path) || "",\n    title: ((_room$gameinstance3 = room.gameinstance) === null || _room$gameinstance3 === void 0 ? void 0 : _room$gameinstance3.gameinstance_name) || "",\n    subtitle: room.gameroom_name || "",\n    handleLevel: handleLevel,\n    globalVars: globalVars || {},\n    level: level,\n    page: level,\n    handleDisable: handleDisable,\n    submenuProps: {\n      messageBacklog: messageBacklog\n    },\n    players: parsedPlayers,\n    game: true,\n    disabled: !roomStatus.running,\n    alerts: tasks,\n    notes: {\n      notes: notes\n    },\n    setNotes: handleSetNotes,\n    editNotes: handleEditNotes,\n    delNotes: handleDelNotes\n  }), /*#__PURE__*/react.createElement(Main, {\n    color: pageColor,\n    className: "playModeMain"\n  }, /*#__PURE__*/react.createElement(CanvasGame, {\n    selectrole: selectrole,\n    setPageColor: setPageColor,\n    canvasHeights: props.canvasHeights,\n    customObjectsLabels: props.customObjectsLabels,\n    loadObjects: props.loadObjects,\n    reCenter: props.reCenter,\n    setUserId: setUserId,\n    setCustomObjs: setCustomObjs,\n    setCanvasLoading: setCanvasLoading,\n    disableNext: disableNext,\n    setGamePlayProps: props.setGamePlayProps,\n    savedObjects: props.savedObjects,\n    adminid: localStorage.adminid,\n    gameinstance: room.gameinstance,\n    gameinstanceid: room.gameinstanceid,\n    socket: socket,\n    alerts: tasks || [],\n    players: parsedPlayers,\n    handleLevel: handleLevel,\n    isEnd: isEnd,\n    level: level || 0,\n    freeAdvance: !((_roomStatus$settings2 = roomStatus.settings) !== null && _roomStatus$settings2 !== void 0 && _roomStatus$settings2.advanceMode) || ((_roomStatus$settings3 = roomStatus.settings) === null || _roomStatus$settings3 === void 0 ? void 0 : _roomStatus$settings3.advanceMode) === "student",\n    gamepieceStatus: roomStatus.gamepieces || {},\n    globalVars: globalVars || {},\n    globalCons: globalCons || [],\n    globalInts: globalInts || [],\n    globalTrigs: globalTrigs || [],\n    localCons: localCons || [],\n    localVars: localVars || [],\n    localInts: localInts || [],\n    localTrigs: localTrigs || [],\n    roles: roles || [],\n    setNotes: setNotes,\n    notes: notes || [],\n    roleSelection: ((_roomStatus$settings4 = roomStatus.settings) === null || _roomStatus$settings4 === void 0 ? void 0 : _roomStatus$settings4.roleMode) || "student",\n    initialUserInfo: queryUser,\n    initialUserId: userid,\n    alert: alertContext.showAlert,\n    refresh: function refresh() {\n      return setInvalidateSidebar(Math.random());\n    },\n    countdown: roomStatus.settings && !isNaN(roomStatus.settings.advanceMode) && countdown\n  }), !roomStatus.running && /*#__PURE__*/react.createElement(PauseCover, null, /*#__PURE__*/react.createElement("i", {\n    className: "fa fa-pause-circle fa-2x"\n  }), /*#__PURE__*/react.createElement("p", null, t("game.paused")))), !isNaN((_roomStatus$settings5 = roomStatus.settings) === null || _roomStatus$settings5 === void 0 ? void 0 : _roomStatus$settings5.advanceMode) && /*#__PURE__*/react.createElement(AutoUpdate/* default */.Z, {\n    value: function value() {\n      return Math.floor(timeFromNow() / (roomStatus.settings.advanceMode * 60000)) + 1;\n    },\n    intervalTime: 20,\n    enabled: true,\n    noDisplay: true,\n    onChange: setLevel\n  }), canvasLoading && /*#__PURE__*/react.createElement("div", {\n    className: "gameLoadingOverlay"\n  }, /*#__PURE__*/react.createElement(Loading/* default */.Z, null))) : /*#__PURE__*/react.createElement(Loading/* default */.Z, null);\n};\n/* harmony default export */ var GamePage = (Game);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///35111\n')}}]);